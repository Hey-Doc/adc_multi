
adc_multi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006174  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006330  08006330  00016330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063a0  080063a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080063a0  080063a0  000163a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063a8  080063a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063a8  080063a8  000163a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063ac  080063ac  000163ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080063b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c8  2000000c  080063bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  080063bc  000204d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000174e8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002678  00000000  00000000  00037524  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001558  00000000  00000000  00039ba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001420  00000000  00000000  0003b0f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c983  00000000  00000000  0003c518  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fb8a  00000000  00000000  00068e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011848b  00000000  00000000  00078a25  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00190eb0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b8c  00000000  00000000  00190f2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08006318 	.word	0x08006318

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08006318 	.word	0x08006318

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b972 	b.w	80004f8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	4688      	mov	r8, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14b      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023a:	428a      	cmp	r2, r1
 800023c:	4615      	mov	r5, r2
 800023e:	d967      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0720 	rsb	r7, r2, #32
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	fa20 f707 	lsr.w	r7, r0, r7
 8000252:	4095      	lsls	r5, r2
 8000254:	ea47 0803 	orr.w	r8, r7, r3
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbb8 f7fe 	udiv	r7, r8, lr
 8000264:	fa1f fc85 	uxth.w	ip, r5
 8000268:	fb0e 8817 	mls	r8, lr, r7, r8
 800026c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000270:	fb07 f10c 	mul.w	r1, r7, ip
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18eb      	adds	r3, r5, r3
 800027a:	f107 30ff 	add.w	r0, r7, #4294967295
 800027e:	f080 811b 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8118 	bls.w	80004b8 <__udivmoddi4+0x28c>
 8000288:	3f02      	subs	r7, #2
 800028a:	442b      	add	r3, r5
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0fe 	udiv	r0, r3, lr
 8000294:	fb0e 3310 	mls	r3, lr, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a0:	45a4      	cmp	ip, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	192c      	adds	r4, r5, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8107 	bcs.w	80004bc <__udivmoddi4+0x290>
 80002ae:	45a4      	cmp	ip, r4
 80002b0:	f240 8104 	bls.w	80004bc <__udivmoddi4+0x290>
 80002b4:	3802      	subs	r0, #2
 80002b6:	442c      	add	r4, r5
 80002b8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002bc:	eba4 040c 	sub.w	r4, r4, ip
 80002c0:	2700      	movs	r7, #0
 80002c2:	b11e      	cbz	r6, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c6 4300 	strd	r4, r3, [r6]
 80002cc:	4639      	mov	r1, r7
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0xbe>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80eb 	beq.w	80004b2 <__udivmoddi4+0x286>
 80002dc:	2700      	movs	r7, #0
 80002de:	e9c6 0100 	strd	r0, r1, [r6]
 80002e2:	4638      	mov	r0, r7
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f783 	clz	r7, r3
 80002ee:	2f00      	cmp	r7, #0
 80002f0:	d147      	bne.n	8000382 <__udivmoddi4+0x156>
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xd0>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2c4>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4698      	mov	r8, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d0e0      	beq.n	80002cc <__udivmoddi4+0xa0>
 800030a:	e9c6 4800 	strd	r4, r8, [r6]
 800030e:	e7dd      	b.n	80002cc <__udivmoddi4+0xa0>
 8000310:	b902      	cbnz	r2, 8000314 <__udivmoddi4+0xe8>
 8000312:	deff      	udf	#255	; 0xff
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	2a00      	cmp	r2, #0
 800031a:	f040 808f 	bne.w	800043c <__udivmoddi4+0x210>
 800031e:	1b49      	subs	r1, r1, r5
 8000320:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000324:	fa1f f885 	uxth.w	r8, r5
 8000328:	2701      	movs	r7, #1
 800032a:	fbb1 fcfe 	udiv	ip, r1, lr
 800032e:	0c23      	lsrs	r3, r4, #16
 8000330:	fb0e 111c 	mls	r1, lr, ip, r1
 8000334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000338:	fb08 f10c 	mul.w	r1, r8, ip
 800033c:	4299      	cmp	r1, r3
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x124>
 8000340:	18eb      	adds	r3, r5, r3
 8000342:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4299      	cmp	r1, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 800034e:	4684      	mov	ip, r0
 8000350:	1a59      	subs	r1, r3, r1
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb1 f0fe 	udiv	r0, r1, lr
 8000358:	fb0e 1410 	mls	r4, lr, r0, r1
 800035c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000360:	fb08 f800 	mul.w	r8, r8, r0
 8000364:	45a0      	cmp	r8, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x14c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x14a>
 8000370:	45a0      	cmp	r8, r4
 8000372:	f200 80b6 	bhi.w	80004e2 <__udivmoddi4+0x2b6>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 0408 	sub.w	r4, r4, r8
 800037c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000380:	e79f      	b.n	80002c2 <__udivmoddi4+0x96>
 8000382:	f1c7 0c20 	rsb	ip, r7, #32
 8000386:	40bb      	lsls	r3, r7
 8000388:	fa22 fe0c 	lsr.w	lr, r2, ip
 800038c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000390:	fa01 f407 	lsl.w	r4, r1, r7
 8000394:	fa20 f50c 	lsr.w	r5, r0, ip
 8000398:	fa21 f30c 	lsr.w	r3, r1, ip
 800039c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a0:	4325      	orrs	r5, r4
 80003a2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003a6:	0c2c      	lsrs	r4, r5, #16
 80003a8:	fb08 3319 	mls	r3, r8, r9, r3
 80003ac:	fa1f fa8e 	uxth.w	sl, lr
 80003b0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b4:	fb09 f40a 	mul.w	r4, r9, sl
 80003b8:	429c      	cmp	r4, r3
 80003ba:	fa02 f207 	lsl.w	r2, r2, r7
 80003be:	fa00 f107 	lsl.w	r1, r0, r7
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1e 0303 	adds.w	r3, lr, r3
 80003c8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003cc:	f080 8087 	bcs.w	80004de <__udivmoddi4+0x2b2>
 80003d0:	429c      	cmp	r4, r3
 80003d2:	f240 8084 	bls.w	80004de <__udivmoddi4+0x2b2>
 80003d6:	f1a9 0902 	sub.w	r9, r9, #2
 80003da:	4473      	add	r3, lr
 80003dc:	1b1b      	subs	r3, r3, r4
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e4:	fb08 3310 	mls	r3, r8, r0, r3
 80003e8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003ec:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f0:	45a2      	cmp	sl, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1e 0404 	adds.w	r4, lr, r4
 80003f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003fc:	d26b      	bcs.n	80004d6 <__udivmoddi4+0x2aa>
 80003fe:	45a2      	cmp	sl, r4
 8000400:	d969      	bls.n	80004d6 <__udivmoddi4+0x2aa>
 8000402:	3802      	subs	r0, #2
 8000404:	4474      	add	r4, lr
 8000406:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040a:	fba0 8902 	umull	r8, r9, r0, r2
 800040e:	eba4 040a 	sub.w	r4, r4, sl
 8000412:	454c      	cmp	r4, r9
 8000414:	46c2      	mov	sl, r8
 8000416:	464b      	mov	r3, r9
 8000418:	d354      	bcc.n	80004c4 <__udivmoddi4+0x298>
 800041a:	d051      	beq.n	80004c0 <__udivmoddi4+0x294>
 800041c:	2e00      	cmp	r6, #0
 800041e:	d069      	beq.n	80004f4 <__udivmoddi4+0x2c8>
 8000420:	ebb1 050a 	subs.w	r5, r1, sl
 8000424:	eb64 0403 	sbc.w	r4, r4, r3
 8000428:	fa04 fc0c 	lsl.w	ip, r4, ip
 800042c:	40fd      	lsrs	r5, r7
 800042e:	40fc      	lsrs	r4, r7
 8000430:	ea4c 0505 	orr.w	r5, ip, r5
 8000434:	e9c6 5400 	strd	r5, r4, [r6]
 8000438:	2700      	movs	r7, #0
 800043a:	e747      	b.n	80002cc <__udivmoddi4+0xa0>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f703 	lsr.w	r7, r0, r3
 8000444:	4095      	lsls	r5, r2
 8000446:	fa01 f002 	lsl.w	r0, r1, r2
 800044a:	fa21 f303 	lsr.w	r3, r1, r3
 800044e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000452:	4338      	orrs	r0, r7
 8000454:	0c01      	lsrs	r1, r0, #16
 8000456:	fbb3 f7fe 	udiv	r7, r3, lr
 800045a:	fa1f f885 	uxth.w	r8, r5
 800045e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb07 f308 	mul.w	r3, r7, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x256>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f107 3cff 	add.w	ip, r7, #4294967295
 8000478:	d22f      	bcs.n	80004da <__udivmoddi4+0x2ae>
 800047a:	428b      	cmp	r3, r1
 800047c:	d92d      	bls.n	80004da <__udivmoddi4+0x2ae>
 800047e:	3f02      	subs	r7, #2
 8000480:	4429      	add	r1, r5
 8000482:	1acb      	subs	r3, r1, r3
 8000484:	b281      	uxth	r1, r0
 8000486:	fbb3 f0fe 	udiv	r0, r3, lr
 800048a:	fb0e 3310 	mls	r3, lr, r0, r3
 800048e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000492:	fb00 f308 	mul.w	r3, r0, r8
 8000496:	428b      	cmp	r3, r1
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x27e>
 800049a:	1869      	adds	r1, r5, r1
 800049c:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a0:	d217      	bcs.n	80004d2 <__udivmoddi4+0x2a6>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d915      	bls.n	80004d2 <__udivmoddi4+0x2a6>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4429      	add	r1, r5
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b0:	e73b      	b.n	800032a <__udivmoddi4+0xfe>
 80004b2:	4637      	mov	r7, r6
 80004b4:	4630      	mov	r0, r6
 80004b6:	e709      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b8:	4607      	mov	r7, r0
 80004ba:	e6e7      	b.n	800028c <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fb      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004c0:	4541      	cmp	r1, r8
 80004c2:	d2ab      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c8:	eb69 020e 	sbc.w	r2, r9, lr
 80004cc:	3801      	subs	r0, #1
 80004ce:	4613      	mov	r3, r2
 80004d0:	e7a4      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d2:	4660      	mov	r0, ip
 80004d4:	e7e9      	b.n	80004aa <__udivmoddi4+0x27e>
 80004d6:	4618      	mov	r0, r3
 80004d8:	e795      	b.n	8000406 <__udivmoddi4+0x1da>
 80004da:	4667      	mov	r7, ip
 80004dc:	e7d1      	b.n	8000482 <__udivmoddi4+0x256>
 80004de:	4681      	mov	r9, r0
 80004e0:	e77c      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e2:	3802      	subs	r0, #2
 80004e4:	442c      	add	r4, r5
 80004e6:	e747      	b.n	8000378 <__udivmoddi4+0x14c>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	442b      	add	r3, r5
 80004ee:	e72f      	b.n	8000350 <__udivmoddi4+0x124>
 80004f0:	4638      	mov	r0, r7
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xda>
 80004f4:	4637      	mov	r7, r6
 80004f6:	e6e9      	b.n	80002cc <__udivmoddi4+0xa0>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000502:	f001 f8e0 	bl	80016c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000506:	f000 f839 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050a:	f000 fc21 	bl	8000d50 <MX_GPIO_Init>
  MX_ADC1_Init();
 800050e:	f000 f8e5 	bl	80006dc <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000512:	f000 f959 	bl	80007c8 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8000516:	f000 f98f 	bl	8000838 <MX_I2C1_Init>
  MX_I2C2_Init();
 800051a:	f000 f9cd 	bl	80008b8 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 800051e:	f000 fa0b 	bl	8000938 <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 8000522:	f000 fa5f 	bl	80009e4 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000526:	f000 fa9b 	bl	8000a60 <MX_SPI3_Init>
  MX_UART4_Init();
 800052a:	f000 fad7 	bl	8000adc <MX_UART4_Init>
  MX_USART1_UART_Init();
 800052e:	f000 fb21 	bl	8000b74 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000532:	f000 fb6b 	bl	8000c0c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000536:	f000 fbb7 	bl	8000ca8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 800053a:	f000 fc01 	bl	8000d40 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
  int32_t ADC_data[2]={0,0};
 800053e:	2300      	movs	r3, #0
 8000540:	603b      	str	r3, [r7, #0]
 8000542:	2300      	movs	r3, #0
 8000544:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		HAL_ADC_Start(&hadc1);
 8000546:	480c      	ldr	r0, [pc, #48]	; (8000578 <main+0x7c>)
 8000548:	f001 fc56 	bl	8001df8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 10);
 800054c:	210a      	movs	r1, #10
 800054e:	480a      	ldr	r0, [pc, #40]	; (8000578 <main+0x7c>)
 8000550:	f001 fcb5 	bl	8001ebe <HAL_ADC_PollForConversion>
		ADC_data[0] = HAL_ADC_GetValue(&hadc1);
 8000554:	4808      	ldr	r0, [pc, #32]	; (8000578 <main+0x7c>)
 8000556:	f001 fd3a 	bl	8001fce <HAL_ADC_GetValue>
 800055a:	4603      	mov	r3, r0
 800055c:	603b      	str	r3, [r7, #0]
		HAL_ADC_Start(&hadc1);
 800055e:	4806      	ldr	r0, [pc, #24]	; (8000578 <main+0x7c>)
 8000560:	f001 fc4a 	bl	8001df8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 10);
 8000564:	210a      	movs	r1, #10
 8000566:	4804      	ldr	r0, [pc, #16]	; (8000578 <main+0x7c>)
 8000568:	f001 fca9 	bl	8001ebe <HAL_ADC_PollForConversion>
		ADC_data[1] = HAL_ADC_GetValue(&hadc1);
 800056c:	4802      	ldr	r0, [pc, #8]	; (8000578 <main+0x7c>)
 800056e:	f001 fd2e 	bl	8001fce <HAL_ADC_GetValue>
 8000572:	4603      	mov	r3, r0
 8000574:	607b      	str	r3, [r7, #4]
		HAL_ADC_Start(&hadc1);
 8000576:	e7e6      	b.n	8000546 <main+0x4a>
 8000578:	20000228 	.word	0x20000228

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b0bc      	sub	sp, #240	; 0xf0
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000586:	2244      	movs	r2, #68	; 0x44
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f005 febc 	bl	8006308 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	2294      	movs	r2, #148	; 0x94
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f005 feae 	bl	8006308 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80005ac:	2000      	movs	r0, #0
 80005ae:	f003 fba7 	bl	8003d00 <HAL_PWREx_ControlVoltageScaling>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x40>
  {
    Error_Handler();
 80005b8:	f000 fd0a 	bl	8000fd0 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005bc:	f003 fb70 	bl	8003ca0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005c0:	4b44      	ldr	r3, [pc, #272]	; (80006d4 <SystemClock_Config+0x158>)
 80005c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005c6:	4a43      	ldr	r2, [pc, #268]	; (80006d4 <SystemClock_Config+0x158>)
 80005c8:	f023 0318 	bic.w	r3, r3, #24
 80005cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005d0:	2314      	movs	r3, #20
 80005d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005d6:	2301      	movs	r3, #1
 80005d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005dc:	2301      	movs	r3, #1
 80005de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005e8:	2360      	movs	r3, #96	; 0x60
 80005ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ee:	2302      	movs	r3, #2
 80005f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005f4:	2301      	movs	r3, #1
 80005f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005fa:	2301      	movs	r3, #1
 80005fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000600:	233c      	movs	r3, #60	; 0x3c
 8000602:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000606:	2302      	movs	r3, #2
 8000608:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800060c:	2302      	movs	r3, #2
 800060e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000612:	2302      	movs	r3, #2
 8000614:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800061c:	4618      	mov	r0, r3
 800061e:	f003 fc13 	bl	8003e48 <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000628:	f000 fcd2 	bl	8000fd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062c:	230f      	movs	r3, #15
 800062e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000632:	2303      	movs	r3, #3
 8000634:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800064a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800064e:	2105      	movs	r1, #5
 8000650:	4618      	mov	r0, r3
 8000652:	f004 f81f 	bl	8004694 <HAL_RCC_ClockConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800065c:	f000 fcb8 	bl	8000fd0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000660:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemClock_Config+0x15c>)
 8000662:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_OSPI;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000664:	2300      	movs	r3, #0
 8000666:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000668:	2300      	movs	r3, #0
 800066a:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800066c:	2300      	movs	r3, #0
 800066e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000670:	2300      	movs	r3, #0
 8000672:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000674:	2300      	movs	r3, #0
 8000676:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000678:	2300      	movs	r3, #0
 800067a:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800067c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000680:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000684:	2300      	movs	r3, #0
 8000686:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800068a:	2300      	movs	r3, #0
 800068c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000690:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000694:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000696:	2301      	movs	r3, #1
 8000698:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800069a:	2301      	movs	r3, #1
 800069c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800069e:	2318      	movs	r3, #24
 80006a0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80006ae:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80006b2:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	4618      	mov	r0, r3
 80006b8:	f004 fa9c 	bl	8004bf4 <HAL_RCCEx_PeriphCLKConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 80006c2:	f000 fc85 	bl	8000fd0 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006c6:	f004 fdbd 	bl	8005244 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006ca:	bf00      	nop
 80006cc:	37f0      	adds	r7, #240	; 0xf0
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40021000 	.word	0x40021000
 80006d8:	010160cf 	.word	0x010160cf

080006dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006e2:	463b      	mov	r3, r7
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
 80006f0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80006f2:	4b31      	ldr	r3, [pc, #196]	; (80007b8 <MX_ADC1_Init+0xdc>)
 80006f4:	4a31      	ldr	r2, [pc, #196]	; (80007bc <MX_ADC1_Init+0xe0>)
 80006f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006f8:	4b2f      	ldr	r3, [pc, #188]	; (80007b8 <MX_ADC1_Init+0xdc>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006fe:	4b2e      	ldr	r3, [pc, #184]	; (80007b8 <MX_ADC1_Init+0xdc>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000704:	4b2c      	ldr	r3, [pc, #176]	; (80007b8 <MX_ADC1_Init+0xdc>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800070a:	4b2b      	ldr	r3, [pc, #172]	; (80007b8 <MX_ADC1_Init+0xdc>)
 800070c:	2201      	movs	r2, #1
 800070e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000710:	4b29      	ldr	r3, [pc, #164]	; (80007b8 <MX_ADC1_Init+0xdc>)
 8000712:	2204      	movs	r2, #4
 8000714:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000716:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <MX_ADC1_Init+0xdc>)
 8000718:	2200      	movs	r2, #0
 800071a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800071c:	4b26      	ldr	r3, [pc, #152]	; (80007b8 <MX_ADC1_Init+0xdc>)
 800071e:	2200      	movs	r2, #0
 8000720:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000722:	4b25      	ldr	r3, [pc, #148]	; (80007b8 <MX_ADC1_Init+0xdc>)
 8000724:	2202      	movs	r2, #2
 8000726:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000728:	4b23      	ldr	r3, [pc, #140]	; (80007b8 <MX_ADC1_Init+0xdc>)
 800072a:	2201      	movs	r2, #1
 800072c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000730:	4b21      	ldr	r3, [pc, #132]	; (80007b8 <MX_ADC1_Init+0xdc>)
 8000732:	2201      	movs	r2, #1
 8000734:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000736:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <MX_ADC1_Init+0xdc>)
 8000738:	2200      	movs	r2, #0
 800073a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800073c:	4b1e      	ldr	r3, [pc, #120]	; (80007b8 <MX_ADC1_Init+0xdc>)
 800073e:	2200      	movs	r2, #0
 8000740:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000742:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <MX_ADC1_Init+0xdc>)
 8000744:	2200      	movs	r2, #0
 8000746:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800074a:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <MX_ADC1_Init+0xdc>)
 800074c:	2200      	movs	r2, #0
 800074e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000750:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <MX_ADC1_Init+0xdc>)
 8000752:	2200      	movs	r2, #0
 8000754:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000758:	4817      	ldr	r0, [pc, #92]	; (80007b8 <MX_ADC1_Init+0xdc>)
 800075a:	f001 fa03 	bl	8001b64 <HAL_ADC_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000764:	f000 fc34 	bl	8000fd0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <MX_ADC1_Init+0xe4>)
 800076a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800076c:	2306      	movs	r3, #6
 800076e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000770:	2304      	movs	r3, #4
 8000772:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000774:	237f      	movs	r3, #127	; 0x7f
 8000776:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000778:	2304      	movs	r3, #4
 800077a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000780:	463b      	mov	r3, r7
 8000782:	4619      	mov	r1, r3
 8000784:	480c      	ldr	r0, [pc, #48]	; (80007b8 <MX_ADC1_Init+0xdc>)
 8000786:	f001 fc2f 	bl	8001fe8 <HAL_ADC_ConfigChannel>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000790:	f000 fc1e 	bl	8000fd0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000794:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_ADC1_Init+0xe8>)
 8000796:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000798:	230c      	movs	r3, #12
 800079a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079c:	463b      	mov	r3, r7
 800079e:	4619      	mov	r1, r3
 80007a0:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_ADC1_Init+0xdc>)
 80007a2:	f001 fc21 	bl	8001fe8 <HAL_ADC_ConfigChannel>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80007ac:	f000 fc10 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	3718      	adds	r7, #24
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000228 	.word	0x20000228
 80007bc:	50040000 	.word	0x50040000
 80007c0:	04300002 	.word	0x04300002
 80007c4:	08600004 	.word	0x08600004

080007c8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 80007cc:	4b18      	ldr	r3, [pc, #96]	; (8000830 <MX_DFSDM1_Init+0x68>)
 80007ce:	4a19      	ldr	r2, [pc, #100]	; (8000834 <MX_DFSDM1_Init+0x6c>)
 80007d0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 80007d2:	4b17      	ldr	r3, [pc, #92]	; (8000830 <MX_DFSDM1_Init+0x68>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80007d8:	4b15      	ldr	r3, [pc, #84]	; (8000830 <MX_DFSDM1_Init+0x68>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_DFSDM1_Init+0x68>)
 80007e0:	2202      	movs	r2, #2
 80007e2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_DFSDM1_Init+0x68>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_DFSDM1_Init+0x68>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_DFSDM1_Init+0x68>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_DFSDM1_Init+0x68>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_DFSDM1_Init+0x68>)
 80007fe:	2204      	movs	r2, #4
 8000800:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_DFSDM1_Init+0x68>)
 8000804:	2200      	movs	r2, #0
 8000806:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_DFSDM1_Init+0x68>)
 800080a:	2201      	movs	r2, #1
 800080c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_DFSDM1_Init+0x68>)
 8000810:	2200      	movs	r2, #0
 8000812:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_DFSDM1_Init+0x68>)
 8000816:	2200      	movs	r2, #0
 8000818:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_DFSDM1_Init+0x68>)
 800081c:	f002 f94a 	bl	8002ab4 <HAL_DFSDM_ChannelInit>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000826:	f000 fbd3 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000498 	.word	0x20000498
 8000834:	40016040 	.word	0x40016040

08000838 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800083c:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <MX_I2C1_Init+0x74>)
 800083e:	4a1c      	ldr	r2, [pc, #112]	; (80008b0 <MX_I2C1_Init+0x78>)
 8000840:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000842:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <MX_I2C1_Init+0x74>)
 8000844:	4a1b      	ldr	r2, [pc, #108]	; (80008b4 <MX_I2C1_Init+0x7c>)
 8000846:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000848:	4b18      	ldr	r3, [pc, #96]	; (80008ac <MX_I2C1_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800084e:	4b17      	ldr	r3, [pc, #92]	; (80008ac <MX_I2C1_Init+0x74>)
 8000850:	2201      	movs	r2, #1
 8000852:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000854:	4b15      	ldr	r3, [pc, #84]	; (80008ac <MX_I2C1_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800085a:	4b14      	ldr	r3, [pc, #80]	; (80008ac <MX_I2C1_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <MX_I2C1_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_I2C1_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_I2C1_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000872:	480e      	ldr	r0, [pc, #56]	; (80008ac <MX_I2C1_Init+0x74>)
 8000874:	f002 fbf7 	bl	8003066 <HAL_I2C_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800087e:	f000 fba7 	bl	8000fd0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000882:	2100      	movs	r1, #0
 8000884:	4809      	ldr	r0, [pc, #36]	; (80008ac <MX_I2C1_Init+0x74>)
 8000886:	f002 fc7d 	bl	8003184 <HAL_I2CEx_ConfigAnalogFilter>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000890:	f000 fb9e 	bl	8000fd0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000894:	2100      	movs	r1, #0
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_I2C1_Init+0x74>)
 8000898:	f002 fcbf 	bl	800321a <HAL_I2CEx_ConfigDigitalFilter>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008a2:	f000 fb95 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200000dc 	.word	0x200000dc
 80008b0:	40005400 	.word	0x40005400
 80008b4:	307075b1 	.word	0x307075b1

080008b8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008bc:	4b1b      	ldr	r3, [pc, #108]	; (800092c <MX_I2C2_Init+0x74>)
 80008be:	4a1c      	ldr	r2, [pc, #112]	; (8000930 <MX_I2C2_Init+0x78>)
 80008c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80008c2:	4b1a      	ldr	r3, [pc, #104]	; (800092c <MX_I2C2_Init+0x74>)
 80008c4:	4a1b      	ldr	r2, [pc, #108]	; (8000934 <MX_I2C2_Init+0x7c>)
 80008c6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008c8:	4b18      	ldr	r3, [pc, #96]	; (800092c <MX_I2C2_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ce:	4b17      	ldr	r3, [pc, #92]	; (800092c <MX_I2C2_Init+0x74>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008d4:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_I2C2_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008da:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_I2C2_Init+0x74>)
 80008dc:	2200      	movs	r2, #0
 80008de:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <MX_I2C2_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_I2C2_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_I2C2_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008f2:	480e      	ldr	r0, [pc, #56]	; (800092c <MX_I2C2_Init+0x74>)
 80008f4:	f002 fbb7 	bl	8003066 <HAL_I2C_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008fe:	f000 fb67 	bl	8000fd0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000902:	2100      	movs	r1, #0
 8000904:	4809      	ldr	r0, [pc, #36]	; (800092c <MX_I2C2_Init+0x74>)
 8000906:	f002 fc3d 	bl	8003184 <HAL_I2CEx_ConfigAnalogFilter>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000910:	f000 fb5e 	bl	8000fd0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000914:	2100      	movs	r1, #0
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_I2C2_Init+0x74>)
 8000918:	f002 fc7f 	bl	800321a <HAL_I2CEx_ConfigDigitalFilter>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000922:	f000 fb55 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000178 	.word	0x20000178
 8000930:	40005800 	.word	0x40005800
 8000934:	307075b1 	.word	0x307075b1

08000938 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 800094c:	4b23      	ldr	r3, [pc, #140]	; (80009dc <MX_OCTOSPI1_Init+0xa4>)
 800094e:	4a24      	ldr	r2, [pc, #144]	; (80009e0 <MX_OCTOSPI1_Init+0xa8>)
 8000950:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000952:	4b22      	ldr	r3, [pc, #136]	; (80009dc <MX_OCTOSPI1_Init+0xa4>)
 8000954:	2201      	movs	r2, #1
 8000956:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000958:	4b20      	ldr	r3, [pc, #128]	; (80009dc <MX_OCTOSPI1_Init+0xa4>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 800095e:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <MX_OCTOSPI1_Init+0xa4>)
 8000960:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000964:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8000966:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <MX_OCTOSPI1_Init+0xa4>)
 8000968:	2220      	movs	r2, #32
 800096a:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 800096c:	4b1b      	ldr	r3, [pc, #108]	; (80009dc <MX_OCTOSPI1_Init+0xa4>)
 800096e:	2201      	movs	r2, #1
 8000970:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000972:	4b1a      	ldr	r3, [pc, #104]	; (80009dc <MX_OCTOSPI1_Init+0xa4>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000978:	4b18      	ldr	r3, [pc, #96]	; (80009dc <MX_OCTOSPI1_Init+0xa4>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 800097e:	4b17      	ldr	r3, [pc, #92]	; (80009dc <MX_OCTOSPI1_Init+0xa4>)
 8000980:	2201      	movs	r2, #1
 8000982:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000984:	4b15      	ldr	r3, [pc, #84]	; (80009dc <MX_OCTOSPI1_Init+0xa4>)
 8000986:	2200      	movs	r2, #0
 8000988:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800098a:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_OCTOSPI1_Init+0xa4>)
 800098c:	2200      	movs	r2, #0
 800098e:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <MX_OCTOSPI1_Init+0xa4>)
 8000992:	2200      	movs	r2, #0
 8000994:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_OCTOSPI1_Init+0xa4>)
 8000998:	2208      	movs	r2, #8
 800099a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800099c:	480f      	ldr	r0, [pc, #60]	; (80009dc <MX_OCTOSPI1_Init+0xa4>)
 800099e:	f002 fc89 	bl	80032b4 <HAL_OSPI_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 80009a8:	f000 fb12 	bl	8000fd0 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 80009ac:	2301      	movs	r3, #1
 80009ae:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 80009b0:	2301      	movs	r3, #1
 80009b2:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80009b4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80009b8:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80009c0:	4619      	mov	r1, r3
 80009c2:	4806      	ldr	r0, [pc, #24]	; (80009dc <MX_OCTOSPI1_Init+0xa4>)
 80009c4:	f002 fd30 	bl	8003428 <HAL_OSPIM_Config>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 80009ce:	f000 faff 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000128 	.word	0x20000128
 80009e0:	a0001000 	.word	0xa0001000

080009e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009e8:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <MX_SPI1_Init+0x74>)
 80009ea:	4a1c      	ldr	r2, [pc, #112]	; (8000a5c <MX_SPI1_Init+0x78>)
 80009ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009ee:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <MX_SPI1_Init+0x74>)
 80009f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009f6:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <MX_SPI1_Init+0x74>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80009fc:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <MX_SPI1_Init+0x74>)
 80009fe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a02:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a04:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <MX_SPI1_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a0a:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <MX_SPI1_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_SPI1_Init+0x74>)
 8000a12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a16:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <MX_SPI1_Init+0x74>)
 8000a1a:	2208      	movs	r2, #8
 8000a1c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_SPI1_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <MX_SPI1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <MX_SPI1_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_SPI1_Init+0x74>)
 8000a32:	2207      	movs	r2, #7
 8000a34:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <MX_SPI1_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_SPI1_Init+0x74>)
 8000a3e:	2208      	movs	r2, #8
 8000a40:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_SPI1_Init+0x74>)
 8000a44:	f004 fdee 	bl	8005624 <HAL_SPI_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a4e:	f000 fabf 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200003a8 	.word	0x200003a8
 8000a5c:	40013000 	.word	0x40013000

08000a60 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a64:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <MX_SPI3_Init+0x74>)
 8000a66:	4a1c      	ldr	r2, [pc, #112]	; (8000ad8 <MX_SPI3_Init+0x78>)
 8000a68:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <MX_SPI3_Init+0x74>)
 8000a6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a70:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a72:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <MX_SPI3_Init+0x74>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a78:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <MX_SPI3_Init+0x74>)
 8000a7a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a7e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a80:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <MX_SPI3_Init+0x74>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a86:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <MX_SPI3_Init+0x74>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a8c:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_SPI3_Init+0x74>)
 8000a8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a92:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_SPI3_Init+0x74>)
 8000a96:	2208      	movs	r2, #8
 8000a98:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_SPI3_Init+0x74>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <MX_SPI3_Init+0x74>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <MX_SPI3_Init+0x74>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_SPI3_Init+0x74>)
 8000aae:	2207      	movs	r2, #7
 8000ab0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <MX_SPI3_Init+0x74>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_SPI3_Init+0x74>)
 8000aba:	2208      	movs	r2, #8
 8000abc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_SPI3_Init+0x74>)
 8000ac0:	f004 fdb0 	bl	8005624 <HAL_SPI_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000aca:	f000 fa81 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200001c4 	.word	0x200001c4
 8000ad8:	40003c00 	.word	0x40003c00

08000adc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ae0:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <MX_UART4_Init+0x90>)
 8000ae2:	4a23      	ldr	r2, [pc, #140]	; (8000b70 <MX_UART4_Init+0x94>)
 8000ae4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000ae6:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <MX_UART4_Init+0x90>)
 8000ae8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aec:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000aee:	4b1f      	ldr	r3, [pc, #124]	; (8000b6c <MX_UART4_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000af4:	4b1d      	ldr	r3, [pc, #116]	; (8000b6c <MX_UART4_Init+0x90>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000afa:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <MX_UART4_Init+0x90>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b00:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <MX_UART4_Init+0x90>)
 8000b02:	220c      	movs	r2, #12
 8000b04:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b06:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <MX_UART4_Init+0x90>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b0c:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <MX_UART4_Init+0x90>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b12:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <MX_UART4_Init+0x90>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b18:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <MX_UART4_Init+0x90>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b1e:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <MX_UART4_Init+0x90>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b24:	4811      	ldr	r0, [pc, #68]	; (8000b6c <MX_UART4_Init+0x90>)
 8000b26:	f004 fe20 	bl	800576a <HAL_UART_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000b30:	f000 fa4e 	bl	8000fd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b34:	2100      	movs	r1, #0
 8000b36:	480d      	ldr	r0, [pc, #52]	; (8000b6c <MX_UART4_Init+0x90>)
 8000b38:	f005 fadd 	bl	80060f6 <HAL_UARTEx_SetTxFifoThreshold>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000b42:	f000 fa45 	bl	8000fd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b46:	2100      	movs	r1, #0
 8000b48:	4808      	ldr	r0, [pc, #32]	; (8000b6c <MX_UART4_Init+0x90>)
 8000b4a:	f005 fb12 	bl	8006172 <HAL_UARTEx_SetRxFifoThreshold>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000b54:	f000 fa3c 	bl	8000fd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000b58:	4804      	ldr	r0, [pc, #16]	; (8000b6c <MX_UART4_Init+0x90>)
 8000b5a:	f005 fa93 	bl	8006084 <HAL_UARTEx_DisableFifoMode>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000b64:	f000 fa34 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	2000031c 	.word	0x2000031c
 8000b70:	40004c00 	.word	0x40004c00

08000b74 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b78:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <MX_USART1_UART_Init+0x90>)
 8000b7a:	4a23      	ldr	r2, [pc, #140]	; (8000c08 <MX_USART1_UART_Init+0x94>)
 8000b7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b7e:	4b21      	ldr	r3, [pc, #132]	; (8000c04 <MX_USART1_UART_Init+0x90>)
 8000b80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b86:	4b1f      	ldr	r3, [pc, #124]	; (8000c04 <MX_USART1_UART_Init+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b8c:	4b1d      	ldr	r3, [pc, #116]	; (8000c04 <MX_USART1_UART_Init+0x90>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b92:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <MX_USART1_UART_Init+0x90>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b98:	4b1a      	ldr	r3, [pc, #104]	; (8000c04 <MX_USART1_UART_Init+0x90>)
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9e:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <MX_USART1_UART_Init+0x90>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba4:	4b17      	ldr	r3, [pc, #92]	; (8000c04 <MX_USART1_UART_Init+0x90>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000baa:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <MX_USART1_UART_Init+0x90>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bb0:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <MX_USART1_UART_Init+0x90>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bb6:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <MX_USART1_UART_Init+0x90>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bbc:	4811      	ldr	r0, [pc, #68]	; (8000c04 <MX_USART1_UART_Init+0x90>)
 8000bbe:	f004 fdd4 	bl	800576a <HAL_UART_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000bc8:	f000 fa02 	bl	8000fd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bcc:	2100      	movs	r1, #0
 8000bce:	480d      	ldr	r0, [pc, #52]	; (8000c04 <MX_USART1_UART_Init+0x90>)
 8000bd0:	f005 fa91 	bl	80060f6 <HAL_UARTEx_SetTxFifoThreshold>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000bda:	f000 f9f9 	bl	8000fd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bde:	2100      	movs	r1, #0
 8000be0:	4808      	ldr	r0, [pc, #32]	; (8000c04 <MX_USART1_UART_Init+0x90>)
 8000be2:	f005 fac6 	bl	8006172 <HAL_UARTEx_SetRxFifoThreshold>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000bec:	f000 f9f0 	bl	8000fd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000bf0:	4804      	ldr	r0, [pc, #16]	; (8000c04 <MX_USART1_UART_Init+0x90>)
 8000bf2:	f005 fa47 	bl	8006084 <HAL_UARTEx_DisableFifoMode>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000bfc:	f000 f9e8 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000290 	.word	0x20000290
 8000c08:	40013800 	.word	0x40013800

08000c0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c10:	4b23      	ldr	r3, [pc, #140]	; (8000ca0 <MX_USART2_UART_Init+0x94>)
 8000c12:	4a24      	ldr	r2, [pc, #144]	; (8000ca4 <MX_USART2_UART_Init+0x98>)
 8000c14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c16:	4b22      	ldr	r3, [pc, #136]	; (8000ca0 <MX_USART2_UART_Init+0x94>)
 8000c18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1e:	4b20      	ldr	r3, [pc, #128]	; (8000ca0 <MX_USART2_UART_Init+0x94>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c24:	4b1e      	ldr	r3, [pc, #120]	; (8000ca0 <MX_USART2_UART_Init+0x94>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ca0 <MX_USART2_UART_Init+0x94>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c30:	4b1b      	ldr	r3, [pc, #108]	; (8000ca0 <MX_USART2_UART_Init+0x94>)
 8000c32:	220c      	movs	r2, #12
 8000c34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000c36:	4b1a      	ldr	r3, [pc, #104]	; (8000ca0 <MX_USART2_UART_Init+0x94>)
 8000c38:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c3c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c3e:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <MX_USART2_UART_Init+0x94>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c44:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <MX_USART2_UART_Init+0x94>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <MX_USART2_UART_Init+0x94>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c50:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <MX_USART2_UART_Init+0x94>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c56:	4812      	ldr	r0, [pc, #72]	; (8000ca0 <MX_USART2_UART_Init+0x94>)
 8000c58:	f004 fd87 	bl	800576a <HAL_UART_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000c62:	f000 f9b5 	bl	8000fd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c66:	2100      	movs	r1, #0
 8000c68:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <MX_USART2_UART_Init+0x94>)
 8000c6a:	f005 fa44 	bl	80060f6 <HAL_UARTEx_SetTxFifoThreshold>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000c74:	f000 f9ac 	bl	8000fd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4809      	ldr	r0, [pc, #36]	; (8000ca0 <MX_USART2_UART_Init+0x94>)
 8000c7c:	f005 fa79 	bl	8006172 <HAL_UARTEx_SetRxFifoThreshold>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000c86:	f000 f9a3 	bl	8000fd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c8a:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <MX_USART2_UART_Init+0x94>)
 8000c8c:	f005 f9fa 	bl	8006084 <HAL_UARTEx_DisableFifoMode>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000c96:	f000 f99b 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	2000040c 	.word	0x2000040c
 8000ca4:	40004400 	.word	0x40004400

08000ca8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cac:	4b22      	ldr	r3, [pc, #136]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000cae:	4a23      	ldr	r2, [pc, #140]	; (8000d3c <MX_USART3_UART_Init+0x94>)
 8000cb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cb2:	4b21      	ldr	r3, [pc, #132]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000cb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cba:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cc0:	4b1d      	ldr	r3, [pc, #116]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cc6:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ccc:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000cce:	220c      	movs	r2, #12
 8000cd0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cd2:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd8:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cde:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ce4:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cea:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cf0:	4811      	ldr	r0, [pc, #68]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000cf2:	f004 fd3a 	bl	800576a <HAL_UART_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000cfc:	f000 f968 	bl	8000fd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d00:	2100      	movs	r1, #0
 8000d02:	480d      	ldr	r0, [pc, #52]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000d04:	f005 f9f7 	bl	80060f6 <HAL_UARTEx_SetTxFifoThreshold>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d0e:	f000 f95f 	bl	8000fd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d12:	2100      	movs	r1, #0
 8000d14:	4808      	ldr	r0, [pc, #32]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000d16:	f005 fa2c 	bl	8006172 <HAL_UARTEx_SetRxFifoThreshold>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d20:	f000 f956 	bl	8000fd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d24:	4804      	ldr	r0, [pc, #16]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000d26:	f005 f9ad 	bl	8006084 <HAL_UARTEx_DisableFifoMode>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d30:	f000 f94e 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000050 	.word	0x20000050
 8000d3c:	40004800 	.word	0x40004800

08000d40 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
	...

08000d50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08c      	sub	sp, #48	; 0x30
 8000d54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d56:	f107 031c 	add.w	r3, r7, #28
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
 8000d64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d66:	4b94      	ldr	r3, [pc, #592]	; (8000fb8 <MX_GPIO_Init+0x268>)
 8000d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6a:	4a93      	ldr	r2, [pc, #588]	; (8000fb8 <MX_GPIO_Init+0x268>)
 8000d6c:	f043 0310 	orr.w	r3, r3, #16
 8000d70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d72:	4b91      	ldr	r3, [pc, #580]	; (8000fb8 <MX_GPIO_Init+0x268>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d76:	f003 0310 	and.w	r3, r3, #16
 8000d7a:	61bb      	str	r3, [r7, #24]
 8000d7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7e:	4b8e      	ldr	r3, [pc, #568]	; (8000fb8 <MX_GPIO_Init+0x268>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d82:	4a8d      	ldr	r2, [pc, #564]	; (8000fb8 <MX_GPIO_Init+0x268>)
 8000d84:	f043 0304 	orr.w	r3, r3, #4
 8000d88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d8a:	4b8b      	ldr	r3, [pc, #556]	; (8000fb8 <MX_GPIO_Init+0x268>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8e:	f003 0304 	and.w	r3, r3, #4
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d96:	4b88      	ldr	r3, [pc, #544]	; (8000fb8 <MX_GPIO_Init+0x268>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9a:	4a87      	ldr	r2, [pc, #540]	; (8000fb8 <MX_GPIO_Init+0x268>)
 8000d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000da0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da2:	4b85      	ldr	r3, [pc, #532]	; (8000fb8 <MX_GPIO_Init+0x268>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	4b82      	ldr	r3, [pc, #520]	; (8000fb8 <MX_GPIO_Init+0x268>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	4a81      	ldr	r2, [pc, #516]	; (8000fb8 <MX_GPIO_Init+0x268>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dba:	4b7f      	ldr	r3, [pc, #508]	; (8000fb8 <MX_GPIO_Init+0x268>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc6:	4b7c      	ldr	r3, [pc, #496]	; (8000fb8 <MX_GPIO_Init+0x268>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dca:	4a7b      	ldr	r2, [pc, #492]	; (8000fb8 <MX_GPIO_Init+0x268>)
 8000dcc:	f043 0302 	orr.w	r3, r3, #2
 8000dd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd2:	4b79      	ldr	r3, [pc, #484]	; (8000fb8 <MX_GPIO_Init+0x268>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dde:	4b76      	ldr	r3, [pc, #472]	; (8000fb8 <MX_GPIO_Init+0x268>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de2:	4a75      	ldr	r2, [pc, #468]	; (8000fb8 <MX_GPIO_Init+0x268>)
 8000de4:	f043 0308 	orr.w	r3, r3, #8
 8000de8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dea:	4b73      	ldr	r3, [pc, #460]	; (8000fb8 <MX_GPIO_Init+0x268>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	f003 0308 	and.w	r3, r3, #8
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	f240 1105 	movw	r1, #261	; 0x105
 8000dfc:	486f      	ldr	r0, [pc, #444]	; (8000fbc <MX_GPIO_Init+0x26c>)
 8000dfe:	f002 f8f7 	bl	8002ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8000e02:	2200      	movs	r2, #0
 8000e04:	f248 111c 	movw	r1, #33052	; 0x811c
 8000e08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0c:	f002 f8f0 	bl	8002ff0 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000e10:	2200      	movs	r2, #0
 8000e12:	f24f 0134 	movw	r1, #61492	; 0xf034
 8000e16:	486a      	ldr	r0, [pc, #424]	; (8000fc0 <MX_GPIO_Init+0x270>)
 8000e18:	f002 f8ea 	bl	8002ff0 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f242 0183 	movw	r1, #8323	; 0x2083
 8000e22:	4868      	ldr	r0, [pc, #416]	; (8000fc4 <MX_GPIO_Init+0x274>)
 8000e24:	f002 f8e4 	bl	8002ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000e2e:	4866      	ldr	r0, [pc, #408]	; (8000fc8 <MX_GPIO_Init+0x278>)
 8000e30:	f002 f8de 	bl	8002ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000e34:	f240 1305 	movw	r3, #261	; 0x105
 8000e38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e46:	f107 031c 	add.w	r3, r7, #28
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	485b      	ldr	r0, [pc, #364]	; (8000fbc <MX_GPIO_Init+0x26c>)
 8000e4e:	f001 ff3d 	bl	8002ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8000e52:	237a      	movs	r3, #122	; 0x7a
 8000e54:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e56:	4b5d      	ldr	r3, [pc, #372]	; (8000fcc <MX_GPIO_Init+0x27c>)
 8000e58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e5e:	f107 031c 	add.w	r3, r7, #28
 8000e62:	4619      	mov	r1, r3
 8000e64:	4855      	ldr	r0, [pc, #340]	; (8000fbc <MX_GPIO_Init+0x26c>)
 8000e66:	f001 ff31 	bl	8002ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000e6a:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8000e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e70:	4b56      	ldr	r3, [pc, #344]	; (8000fcc <MX_GPIO_Init+0x27c>)
 8000e72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e78:	f107 031c 	add.w	r3, r7, #28
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4852      	ldr	r0, [pc, #328]	; (8000fc8 <MX_GPIO_Init+0x278>)
 8000e80:	f001 ff24 	bl	8002ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8000e84:	f248 131c 	movw	r3, #33052	; 0x811c
 8000e88:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	f107 031c 	add.w	r3, r7, #28
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea0:	f001 ff14 	bl	8002ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ea8:	4b48      	ldr	r3, [pc, #288]	; (8000fcc <MX_GPIO_Init+0x27c>)
 8000eaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000eb0:	f107 031c 	add.w	r3, r7, #28
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4842      	ldr	r0, [pc, #264]	; (8000fc0 <MX_GPIO_Init+0x270>)
 8000eb8:	f001 ff08 	bl	8002ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000ed0:	f107 031c 	add.w	r3, r7, #28
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	483a      	ldr	r0, [pc, #232]	; (8000fc0 <MX_GPIO_Init+0x270>)
 8000ed8:	f001 fef8 	bl	8002ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000edc:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000ee0:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eee:	f107 031c 	add.w	r3, r7, #28
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4832      	ldr	r0, [pc, #200]	; (8000fc0 <MX_GPIO_Init+0x270>)
 8000ef6:	f001 fee9 	bl	8002ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8000efa:	f64d 4304 	movw	r3, #56324	; 0xdc04
 8000efe:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f00:	4b32      	ldr	r3, [pc, #200]	; (8000fcc <MX_GPIO_Init+0x27c>)
 8000f02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f08:	f107 031c 	add.w	r3, r7, #28
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	482d      	ldr	r0, [pc, #180]	; (8000fc4 <MX_GPIO_Init+0x274>)
 8000f10:	f001 fedc 	bl	8002ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8000f14:	f242 0383 	movw	r3, #8323	; 0x2083
 8000f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2300      	movs	r3, #0
 8000f24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f26:	f107 031c 	add.w	r3, r7, #28
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4825      	ldr	r0, [pc, #148]	; (8000fc4 <MX_GPIO_Init+0x274>)
 8000f2e:	f001 fecd 	bl	8002ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000f32:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000f36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2300      	movs	r3, #0
 8000f42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f44:	f107 031c 	add.w	r3, r7, #28
 8000f48:	4619      	mov	r1, r3
 8000f4a:	481f      	ldr	r0, [pc, #124]	; (8000fc8 <MX_GPIO_Init+0x278>)
 8000f4c:	f001 febe 	bl	8002ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000f50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f56:	2300      	movs	r3, #0
 8000f58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	4619      	mov	r1, r3
 8000f64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f68:	f001 feb0 	bl	8002ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000f6c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	2302      	movs	r3, #2
 8000f74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f7e:	230a      	movs	r3, #10
 8000f80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f82:	f107 031c 	add.w	r3, r7, #28
 8000f86:	4619      	mov	r1, r3
 8000f88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f8c:	f001 fe9e 	bl	8002ccc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2100      	movs	r1, #0
 8000f94:	2017      	movs	r0, #23
 8000f96:	f001 fd56 	bl	8002a46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f9a:	2017      	movs	r0, #23
 8000f9c:	f001 fd6f 	bl	8002a7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	2028      	movs	r0, #40	; 0x28
 8000fa6:	f001 fd4e 	bl	8002a46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000faa:	2028      	movs	r0, #40	; 0x28
 8000fac:	f001 fd67 	bl	8002a7e <HAL_NVIC_EnableIRQ>

}
 8000fb0:	bf00      	nop
 8000fb2:	3730      	adds	r7, #48	; 0x30
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	48001000 	.word	0x48001000
 8000fc0:	48000400 	.word	0x48000400
 8000fc4:	48000c00 	.word	0x48000c00
 8000fc8:	48000800 	.word	0x48000800
 8000fcc:	10110000 	.word	0x10110000

08000fd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <Error_Handler+0x6>

08000fd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HAL_MspInit+0x44>)
 8000fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	; (800101c <HAL_MspInit+0x44>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6613      	str	r3, [r2, #96]	; 0x60
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <HAL_MspInit+0x44>)
 8000fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <HAL_MspInit+0x44>)
 8000ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffa:	4a08      	ldr	r2, [pc, #32]	; (800101c <HAL_MspInit+0x44>)
 8000ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001000:	6593      	str	r3, [r2, #88]	; 0x58
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_MspInit+0x44>)
 8001004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40021000 	.word	0x40021000

08001020 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a15      	ldr	r2, [pc, #84]	; (8001094 <HAL_ADC_MspInit+0x74>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d123      	bne.n	800108a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001042:	4b15      	ldr	r3, [pc, #84]	; (8001098 <HAL_ADC_MspInit+0x78>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	4a14      	ldr	r2, [pc, #80]	; (8001098 <HAL_ADC_MspInit+0x78>)
 8001048:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800104c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104e:	4b12      	ldr	r3, [pc, #72]	; (8001098 <HAL_ADC_MspInit+0x78>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800105a:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <HAL_ADC_MspInit+0x78>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105e:	4a0e      	ldr	r2, [pc, #56]	; (8001098 <HAL_ADC_MspInit+0x78>)
 8001060:	f043 0304 	orr.w	r3, r3, #4
 8001064:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <HAL_ADC_MspInit+0x78>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001072:	233f      	movs	r3, #63	; 0x3f
 8001074:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001076:	230b      	movs	r3, #11
 8001078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4619      	mov	r1, r3
 8001084:	4805      	ldr	r0, [pc, #20]	; (800109c <HAL_ADC_MspInit+0x7c>)
 8001086:	f001 fe21 	bl	8002ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800108a:	bf00      	nop
 800108c:	3728      	adds	r7, #40	; 0x28
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	50040000 	.word	0x50040000
 8001098:	40021000 	.word	0x40021000
 800109c:	48000800 	.word	0x48000800

080010a0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	; 0x28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 80010b8:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <HAL_DFSDM_ChannelMspInit+0x84>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d12d      	bne.n	800111c <HAL_DFSDM_ChannelMspInit+0x7c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80010c0:	4b19      	ldr	r3, [pc, #100]	; (8001128 <HAL_DFSDM_ChannelMspInit+0x88>)
 80010c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c4:	4a18      	ldr	r2, [pc, #96]	; (8001128 <HAL_DFSDM_ChannelMspInit+0x88>)
 80010c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010ca:	6613      	str	r3, [r2, #96]	; 0x60
 80010cc:	4b16      	ldr	r3, [pc, #88]	; (8001128 <HAL_DFSDM_ChannelMspInit+0x88>)
 80010ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010d8:	4b13      	ldr	r3, [pc, #76]	; (8001128 <HAL_DFSDM_ChannelMspInit+0x88>)
 80010da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010dc:	4a12      	ldr	r2, [pc, #72]	; (8001128 <HAL_DFSDM_ChannelMspInit+0x88>)
 80010de:	f043 0310 	orr.w	r3, r3, #16
 80010e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e4:	4b10      	ldr	r3, [pc, #64]	; (8001128 <HAL_DFSDM_ChannelMspInit+0x88>)
 80010e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e8:	f003 0310 	and.w	r3, r3, #16
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80010f0:	f44f 7320 	mov.w	r3, #640	; 0x280
 80010f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001102:	2306      	movs	r3, #6
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	4619      	mov	r1, r3
 800110c:	4807      	ldr	r0, [pc, #28]	; (800112c <HAL_DFSDM_ChannelMspInit+0x8c>)
 800110e:	f001 fddd 	bl	8002ccc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001112:	4b04      	ldr	r3, [pc, #16]	; (8001124 <HAL_DFSDM_ChannelMspInit+0x84>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	3301      	adds	r3, #1
 8001118:	4a02      	ldr	r2, [pc, #8]	; (8001124 <HAL_DFSDM_ChannelMspInit+0x84>)
 800111a:	6013      	str	r3, [r2, #0]
  }

}
 800111c:	bf00      	nop
 800111e:	3728      	adds	r7, #40	; 0x28
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000028 	.word	0x20000028
 8001128:	40021000 	.word	0x40021000
 800112c:	48001000 	.word	0x48001000

08001130 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08c      	sub	sp, #48	; 0x30
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 031c 	add.w	r3, r7, #28
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a2f      	ldr	r2, [pc, #188]	; (800120c <HAL_I2C_MspInit+0xdc>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d129      	bne.n	80011a6 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001152:	4b2f      	ldr	r3, [pc, #188]	; (8001210 <HAL_I2C_MspInit+0xe0>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001156:	4a2e      	ldr	r2, [pc, #184]	; (8001210 <HAL_I2C_MspInit+0xe0>)
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800115e:	4b2c      	ldr	r3, [pc, #176]	; (8001210 <HAL_I2C_MspInit+0xe0>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	61bb      	str	r3, [r7, #24]
 8001168:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800116a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800116e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001170:	2312      	movs	r3, #18
 8001172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001174:	2301      	movs	r3, #1
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001178:	2303      	movs	r3, #3
 800117a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800117c:	2304      	movs	r3, #4
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001180:	f107 031c 	add.w	r3, r7, #28
 8001184:	4619      	mov	r1, r3
 8001186:	4823      	ldr	r0, [pc, #140]	; (8001214 <HAL_I2C_MspInit+0xe4>)
 8001188:	f001 fda0 	bl	8002ccc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800118c:	4b20      	ldr	r3, [pc, #128]	; (8001210 <HAL_I2C_MspInit+0xe0>)
 800118e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001190:	4a1f      	ldr	r2, [pc, #124]	; (8001210 <HAL_I2C_MspInit+0xe0>)
 8001192:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001196:	6593      	str	r3, [r2, #88]	; 0x58
 8001198:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <HAL_I2C_MspInit+0xe0>)
 800119a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80011a4:	e02d      	b.n	8001202 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C2)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a1b      	ldr	r2, [pc, #108]	; (8001218 <HAL_I2C_MspInit+0xe8>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d128      	bne.n	8001202 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b0:	4b17      	ldr	r3, [pc, #92]	; (8001210 <HAL_I2C_MspInit+0xe0>)
 80011b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b4:	4a16      	ldr	r2, [pc, #88]	; (8001210 <HAL_I2C_MspInit+0xe0>)
 80011b6:	f043 0302 	orr.w	r3, r3, #2
 80011ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011bc:	4b14      	ldr	r3, [pc, #80]	; (8001210 <HAL_I2C_MspInit+0xe0>)
 80011be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80011c8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ce:	2312      	movs	r3, #18
 80011d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011d2:	2301      	movs	r3, #1
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011da:	2304      	movs	r3, #4
 80011dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011de:	f107 031c 	add.w	r3, r7, #28
 80011e2:	4619      	mov	r1, r3
 80011e4:	480b      	ldr	r0, [pc, #44]	; (8001214 <HAL_I2C_MspInit+0xe4>)
 80011e6:	f001 fd71 	bl	8002ccc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <HAL_I2C_MspInit+0xe0>)
 80011ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ee:	4a08      	ldr	r2, [pc, #32]	; (8001210 <HAL_I2C_MspInit+0xe0>)
 80011f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011f4:	6593      	str	r3, [r2, #88]	; 0x58
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_I2C_MspInit+0xe0>)
 80011f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
}
 8001202:	bf00      	nop
 8001204:	3730      	adds	r7, #48	; 0x30
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40005400 	.word	0x40005400
 8001210:	40021000 	.word	0x40021000
 8001214:	48000400 	.word	0x48000400
 8001218:	40005800 	.word	0x40005800

0800121c <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	; 0x28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  if(hospi->Instance==OCTOSPI1)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a1d      	ldr	r2, [pc, #116]	; (80012b0 <HAL_OSPI_MspInit+0x94>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d134      	bne.n	80012a8 <HAL_OSPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 800123e:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <HAL_OSPI_MspInit+0x98>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	4a1c      	ldr	r2, [pc, #112]	; (80012b4 <HAL_OSPI_MspInit+0x98>)
 8001244:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001248:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124a:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <HAL_OSPI_MspInit+0x98>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001256:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <HAL_OSPI_MspInit+0x98>)
 8001258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800125a:	4a16      	ldr	r2, [pc, #88]	; (80012b4 <HAL_OSPI_MspInit+0x98>)
 800125c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001260:	6513      	str	r3, [r2, #80]	; 0x50
 8001262:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <HAL_OSPI_MspInit+0x98>)
 8001264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <HAL_OSPI_MspInit+0x98>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001272:	4a10      	ldr	r2, [pc, #64]	; (80012b4 <HAL_OSPI_MspInit+0x98>)
 8001274:	f043 0310 	orr.w	r3, r3, #16
 8001278:	64d3      	str	r3, [r2, #76]	; 0x4c
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <HAL_OSPI_MspInit+0x98>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	f003 0310 	and.w	r3, r3, #16
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	68bb      	ldr	r3, [r7, #8]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001286:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800128a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128c:	2302      	movs	r3, #2
 800128e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001294:	2303      	movs	r3, #3
 8001296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001298:	230a      	movs	r3, #10
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	4619      	mov	r1, r3
 80012a2:	4805      	ldr	r0, [pc, #20]	; (80012b8 <HAL_OSPI_MspInit+0x9c>)
 80012a4:	f001 fd12 	bl	8002ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 80012a8:	bf00      	nop
 80012aa:	3728      	adds	r7, #40	; 0x28
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	a0001000 	.word	0xa0001000
 80012b4:	40021000 	.word	0x40021000
 80012b8:	48001000 	.word	0x48001000

080012bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08c      	sub	sp, #48	; 0x30
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 031c 	add.w	r3, r7, #28
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a2f      	ldr	r2, [pc, #188]	; (8001398 <HAL_SPI_MspInit+0xdc>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d129      	bne.n	8001332 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012de:	4b2f      	ldr	r3, [pc, #188]	; (800139c <HAL_SPI_MspInit+0xe0>)
 80012e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e2:	4a2e      	ldr	r2, [pc, #184]	; (800139c <HAL_SPI_MspInit+0xe0>)
 80012e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012e8:	6613      	str	r3, [r2, #96]	; 0x60
 80012ea:	4b2c      	ldr	r3, [pc, #176]	; (800139c <HAL_SPI_MspInit+0xe0>)
 80012ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012f2:	61bb      	str	r3, [r7, #24]
 80012f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	4b29      	ldr	r3, [pc, #164]	; (800139c <HAL_SPI_MspInit+0xe0>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	4a28      	ldr	r2, [pc, #160]	; (800139c <HAL_SPI_MspInit+0xe0>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001302:	4b26      	ldr	r3, [pc, #152]	; (800139c <HAL_SPI_MspInit+0xe0>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800130e:	23e0      	movs	r3, #224	; 0xe0
 8001310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2302      	movs	r3, #2
 8001314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131a:	2303      	movs	r3, #3
 800131c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800131e:	2305      	movs	r3, #5
 8001320:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	4619      	mov	r1, r3
 8001328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132c:	f001 fcce 	bl	8002ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001330:	e02d      	b.n	800138e <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a1a      	ldr	r2, [pc, #104]	; (80013a0 <HAL_SPI_MspInit+0xe4>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d128      	bne.n	800138e <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800133c:	4b17      	ldr	r3, [pc, #92]	; (800139c <HAL_SPI_MspInit+0xe0>)
 800133e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001340:	4a16      	ldr	r2, [pc, #88]	; (800139c <HAL_SPI_MspInit+0xe0>)
 8001342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001346:	6593      	str	r3, [r2, #88]	; 0x58
 8001348:	4b14      	ldr	r3, [pc, #80]	; (800139c <HAL_SPI_MspInit+0xe0>)
 800134a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <HAL_SPI_MspInit+0xe0>)
 8001356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001358:	4a10      	ldr	r2, [pc, #64]	; (800139c <HAL_SPI_MspInit+0xe0>)
 800135a:	f043 0304 	orr.w	r3, r3, #4
 800135e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001360:	4b0e      	ldr	r3, [pc, #56]	; (800139c <HAL_SPI_MspInit+0xe0>)
 8001362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800136c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	2302      	movs	r3, #2
 8001374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137a:	2303      	movs	r3, #3
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800137e:	2306      	movs	r3, #6
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001382:	f107 031c 	add.w	r3, r7, #28
 8001386:	4619      	mov	r1, r3
 8001388:	4806      	ldr	r0, [pc, #24]	; (80013a4 <HAL_SPI_MspInit+0xe8>)
 800138a:	f001 fc9f 	bl	8002ccc <HAL_GPIO_Init>
}
 800138e:	bf00      	nop
 8001390:	3730      	adds	r7, #48	; 0x30
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40013000 	.word	0x40013000
 800139c:	40021000 	.word	0x40021000
 80013a0:	40003c00 	.word	0x40003c00
 80013a4:	48000800 	.word	0x48000800

080013a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b090      	sub	sp, #64	; 0x40
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a5d      	ldr	r2, [pc, #372]	; (800153c <HAL_UART_MspInit+0x194>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d129      	bne.n	800141e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80013ca:	4b5d      	ldr	r3, [pc, #372]	; (8001540 <HAL_UART_MspInit+0x198>)
 80013cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ce:	4a5c      	ldr	r2, [pc, #368]	; (8001540 <HAL_UART_MspInit+0x198>)
 80013d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80013d4:	6593      	str	r3, [r2, #88]	; 0x58
 80013d6:	4b5a      	ldr	r3, [pc, #360]	; (8001540 <HAL_UART_MspInit+0x198>)
 80013d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
 80013e0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	4b57      	ldr	r3, [pc, #348]	; (8001540 <HAL_UART_MspInit+0x198>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e6:	4a56      	ldr	r2, [pc, #344]	; (8001540 <HAL_UART_MspInit+0x198>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ee:	4b54      	ldr	r3, [pc, #336]	; (8001540 <HAL_UART_MspInit+0x198>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80013fa:	2303      	movs	r3, #3
 80013fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001406:	2303      	movs	r3, #3
 8001408:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800140a:	2308      	movs	r3, #8
 800140c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001412:	4619      	mov	r1, r3
 8001414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001418:	f001 fc58 	bl	8002ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800141c:	e089      	b.n	8001532 <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART1)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a48      	ldr	r2, [pc, #288]	; (8001544 <HAL_UART_MspInit+0x19c>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d128      	bne.n	800147a <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001428:	4b45      	ldr	r3, [pc, #276]	; (8001540 <HAL_UART_MspInit+0x198>)
 800142a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800142c:	4a44      	ldr	r2, [pc, #272]	; (8001540 <HAL_UART_MspInit+0x198>)
 800142e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001432:	6613      	str	r3, [r2, #96]	; 0x60
 8001434:	4b42      	ldr	r3, [pc, #264]	; (8001540 <HAL_UART_MspInit+0x198>)
 8001436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001438:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800143c:	623b      	str	r3, [r7, #32]
 800143e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001440:	4b3f      	ldr	r3, [pc, #252]	; (8001540 <HAL_UART_MspInit+0x198>)
 8001442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001444:	4a3e      	ldr	r2, [pc, #248]	; (8001540 <HAL_UART_MspInit+0x198>)
 8001446:	f043 0302 	orr.w	r3, r3, #2
 800144a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800144c:	4b3c      	ldr	r3, [pc, #240]	; (8001540 <HAL_UART_MspInit+0x198>)
 800144e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	61fb      	str	r3, [r7, #28]
 8001456:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001458:	23c0      	movs	r3, #192	; 0xc0
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145c:	2302      	movs	r3, #2
 800145e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001464:	2303      	movs	r3, #3
 8001466:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001468:	2307      	movs	r3, #7
 800146a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001470:	4619      	mov	r1, r3
 8001472:	4835      	ldr	r0, [pc, #212]	; (8001548 <HAL_UART_MspInit+0x1a0>)
 8001474:	f001 fc2a 	bl	8002ccc <HAL_GPIO_Init>
}
 8001478:	e05b      	b.n	8001532 <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART2)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a33      	ldr	r2, [pc, #204]	; (800154c <HAL_UART_MspInit+0x1a4>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d128      	bne.n	80014d6 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001484:	4b2e      	ldr	r3, [pc, #184]	; (8001540 <HAL_UART_MspInit+0x198>)
 8001486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001488:	4a2d      	ldr	r2, [pc, #180]	; (8001540 <HAL_UART_MspInit+0x198>)
 800148a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800148e:	6593      	str	r3, [r2, #88]	; 0x58
 8001490:	4b2b      	ldr	r3, [pc, #172]	; (8001540 <HAL_UART_MspInit+0x198>)
 8001492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001498:	61bb      	str	r3, [r7, #24]
 800149a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800149c:	4b28      	ldr	r3, [pc, #160]	; (8001540 <HAL_UART_MspInit+0x198>)
 800149e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a0:	4a27      	ldr	r2, [pc, #156]	; (8001540 <HAL_UART_MspInit+0x198>)
 80014a2:	f043 0308 	orr.w	r3, r3, #8
 80014a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a8:	4b25      	ldr	r3, [pc, #148]	; (8001540 <HAL_UART_MspInit+0x198>)
 80014aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ac:	f003 0308 	and.w	r3, r3, #8
 80014b0:	617b      	str	r3, [r7, #20]
 80014b2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80014b4:	2378      	movs	r3, #120	; 0x78
 80014b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c0:	2303      	movs	r3, #3
 80014c2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014c4:	2307      	movs	r3, #7
 80014c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014cc:	4619      	mov	r1, r3
 80014ce:	4820      	ldr	r0, [pc, #128]	; (8001550 <HAL_UART_MspInit+0x1a8>)
 80014d0:	f001 fbfc 	bl	8002ccc <HAL_GPIO_Init>
}
 80014d4:	e02d      	b.n	8001532 <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART3)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a1e      	ldr	r2, [pc, #120]	; (8001554 <HAL_UART_MspInit+0x1ac>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d128      	bne.n	8001532 <HAL_UART_MspInit+0x18a>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014e0:	4b17      	ldr	r3, [pc, #92]	; (8001540 <HAL_UART_MspInit+0x198>)
 80014e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e4:	4a16      	ldr	r2, [pc, #88]	; (8001540 <HAL_UART_MspInit+0x198>)
 80014e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014ea:	6593      	str	r3, [r2, #88]	; 0x58
 80014ec:	4b14      	ldr	r3, [pc, #80]	; (8001540 <HAL_UART_MspInit+0x198>)
 80014ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <HAL_UART_MspInit+0x198>)
 80014fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fc:	4a10      	ldr	r2, [pc, #64]	; (8001540 <HAL_UART_MspInit+0x198>)
 80014fe:	f043 0308 	orr.w	r3, r3, #8
 8001502:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001504:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <HAL_UART_MspInit+0x198>)
 8001506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001508:	f003 0308 	and.w	r3, r3, #8
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001510:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001514:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151e:	2303      	movs	r3, #3
 8001520:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001522:	2307      	movs	r3, #7
 8001524:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001526:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800152a:	4619      	mov	r1, r3
 800152c:	4808      	ldr	r0, [pc, #32]	; (8001550 <HAL_UART_MspInit+0x1a8>)
 800152e:	f001 fbcd 	bl	8002ccc <HAL_GPIO_Init>
}
 8001532:	bf00      	nop
 8001534:	3740      	adds	r7, #64	; 0x40
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40004c00 	.word	0x40004c00
 8001540:	40021000 	.word	0x40021000
 8001544:	40013800 	.word	0x40013800
 8001548:	48000400 	.word	0x48000400
 800154c:	40004400 	.word	0x40004400
 8001550:	48000c00 	.word	0x48000c00
 8001554:	40004800 	.word	0x40004800

08001558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800155c:	e7fe      	b.n	800155c <NMI_Handler+0x4>

0800155e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001562:	e7fe      	b.n	8001562 <HardFault_Handler+0x4>

08001564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001568:	e7fe      	b.n	8001568 <MemManage_Handler+0x4>

0800156a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800156e:	e7fe      	b.n	800156e <BusFault_Handler+0x4>

08001570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001574:	e7fe      	b.n	8001574 <UsageFault_Handler+0x4>

08001576 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015a4:	f000 f8e4 	bl	8001770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}

080015ac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80015b0:	2020      	movs	r0, #32
 80015b2:	f001 fd35 	bl	8003020 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80015b6:	2040      	movs	r0, #64	; 0x40
 80015b8:	f001 fd32 	bl	8003020 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80015bc:	2080      	movs	r0, #128	; 0x80
 80015be:	f001 fd2f 	bl	8003020 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80015c2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80015c6:	f001 fd2b 	bl	8003020 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}

080015ce <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80015d2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80015d6:	f001 fd23 	bl	8003020 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80015da:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80015de:	f001 fd1f 	bl	8003020 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80015e2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80015e6:	f001 fd1b 	bl	8003020 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80015ea:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015ee:	f001 fd17 	bl	8003020 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80015f2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80015f6:	f001 fd13 	bl	8003020 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80015fa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80015fe:	f001 fd0f 	bl	8003020 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800160c:	4b17      	ldr	r3, [pc, #92]	; (800166c <SystemInit+0x64>)
 800160e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001612:	4a16      	ldr	r2, [pc, #88]	; (800166c <SystemInit+0x64>)
 8001614:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001618:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800161c:	4b14      	ldr	r3, [pc, #80]	; (8001670 <SystemInit+0x68>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a13      	ldr	r2, [pc, #76]	; (8001670 <SystemInit+0x68>)
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001628:	4b11      	ldr	r3, [pc, #68]	; (8001670 <SystemInit+0x68>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <SystemInit+0x68>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a0f      	ldr	r2, [pc, #60]	; (8001670 <SystemInit+0x68>)
 8001634:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001638:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800163c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800163e:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <SystemInit+0x68>)
 8001640:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001644:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001646:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <SystemInit+0x68>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a09      	ldr	r2, [pc, #36]	; (8001670 <SystemInit+0x68>)
 800164c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001650:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001652:	4b07      	ldr	r3, [pc, #28]	; (8001670 <SystemInit+0x68>)
 8001654:	2200      	movs	r2, #0
 8001656:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001658:	4b04      	ldr	r3, [pc, #16]	; (800166c <SystemInit+0x64>)
 800165a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800165e:	609a      	str	r2, [r3, #8]
#endif
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000ed00 	.word	0xe000ed00
 8001670:	40021000 	.word	0x40021000

08001674 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001674:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001678:	f7ff ffc6 	bl	8001608 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800167c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800167e:	e003      	b.n	8001688 <LoopCopyDataInit>

08001680 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001682:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001684:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001686:	3104      	adds	r1, #4

08001688 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001688:	480a      	ldr	r0, [pc, #40]	; (80016b4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800168c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800168e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001690:	d3f6      	bcc.n	8001680 <CopyDataInit>
	ldr	r2, =_sbss
 8001692:	4a0a      	ldr	r2, [pc, #40]	; (80016bc <LoopForever+0x12>)
	b	LoopFillZerobss
 8001694:	e002      	b.n	800169c <LoopFillZerobss>

08001696 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001696:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001698:	f842 3b04 	str.w	r3, [r2], #4

0800169c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800169c:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <LoopForever+0x16>)
	cmp	r2, r3
 800169e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80016a0:	d3f9      	bcc.n	8001696 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016a2:	f004 fe0d 	bl	80062c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016a6:	f7fe ff29 	bl	80004fc <main>

080016aa <LoopForever>:

LoopForever:
    b LoopForever
 80016aa:	e7fe      	b.n	80016aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016ac:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80016b0:	080063b0 	.word	0x080063b0
	ldr	r0, =_sdata
 80016b4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80016b8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80016bc:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80016c0:	200004d4 	.word	0x200004d4

080016c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016c4:	e7fe      	b.n	80016c4 <ADC1_IRQHandler>

080016c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d0:	2003      	movs	r0, #3
 80016d2:	f001 f9ad 	bl	8002a30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016d6:	2000      	movs	r0, #0
 80016d8:	f000 f80e 	bl	80016f8 <HAL_InitTick>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d002      	beq.n	80016e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	71fb      	strb	r3, [r7, #7]
 80016e6:	e001      	b.n	80016ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016e8:	f7ff fc76 	bl	8000fd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016ec:	79fb      	ldrb	r3, [r7, #7]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001700:	2300      	movs	r3, #0
 8001702:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001704:	4b17      	ldr	r3, [pc, #92]	; (8001764 <HAL_InitTick+0x6c>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d023      	beq.n	8001754 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800170c:	4b16      	ldr	r3, [pc, #88]	; (8001768 <HAL_InitTick+0x70>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4b14      	ldr	r3, [pc, #80]	; (8001764 <HAL_InitTick+0x6c>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	4619      	mov	r1, r3
 8001716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800171a:	fbb3 f3f1 	udiv	r3, r3, r1
 800171e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001722:	4618      	mov	r0, r3
 8001724:	f001 f9b9 	bl	8002a9a <HAL_SYSTICK_Config>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d10f      	bne.n	800174e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b0f      	cmp	r3, #15
 8001732:	d809      	bhi.n	8001748 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001734:	2200      	movs	r2, #0
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	f04f 30ff 	mov.w	r0, #4294967295
 800173c:	f001 f983 	bl	8002a46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001740:	4a0a      	ldr	r2, [pc, #40]	; (800176c <HAL_InitTick+0x74>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	e007      	b.n	8001758 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	73fb      	strb	r3, [r7, #15]
 800174c:	e004      	b.n	8001758 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	73fb      	strb	r3, [r7, #15]
 8001752:	e001      	b.n	8001758 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001758:	7bfb      	ldrb	r3, [r7, #15]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000008 	.word	0x20000008
 8001768:	20000000 	.word	0x20000000
 800176c:	20000004 	.word	0x20000004

08001770 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_IncTick+0x20>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	461a      	mov	r2, r3
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_IncTick+0x24>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4413      	add	r3, r2
 8001780:	4a04      	ldr	r2, [pc, #16]	; (8001794 <HAL_IncTick+0x24>)
 8001782:	6013      	str	r3, [r2, #0]
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	20000008 	.word	0x20000008
 8001794:	200004d0 	.word	0x200004d0

08001798 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return uwTick;
 800179c:	4b03      	ldr	r3, [pc, #12]	; (80017ac <HAL_GetTick+0x14>)
 800179e:	681b      	ldr	r3, [r3, #0]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	200004d0 	.word	0x200004d0

080017b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	431a      	orrs	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	609a      	str	r2, [r3, #8]
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
 80017de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	431a      	orrs	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	609a      	str	r2, [r3, #8]
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800180c:	4618      	mov	r0, r3
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001818:	b480      	push	{r7}
 800181a:	b087      	sub	sp, #28
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
 8001824:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	3360      	adds	r3, #96	; 0x60
 800182a:	461a      	mov	r2, r3
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <LL_ADC_SetOffset+0x44>)
 800183a:	4013      	ands	r3, r2
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	430a      	orrs	r2, r1
 8001846:	4313      	orrs	r3, r2
 8001848:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001850:	bf00      	nop
 8001852:	371c      	adds	r7, #28
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	03fff000 	.word	0x03fff000

08001860 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	3360      	adds	r3, #96	; 0x60
 800186e:	461a      	mov	r2, r3
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001880:	4618      	mov	r0, r3
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800188c:	b480      	push	{r7}
 800188e:	b087      	sub	sp, #28
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	3360      	adds	r3, #96	; 0x60
 800189c:	461a      	mov	r2, r3
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	431a      	orrs	r2, r3
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80018b6:	bf00      	nop
 80018b8:	371c      	adds	r7, #28
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
 80018ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	695b      	ldr	r3, [r3, #20]
 80018d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	431a      	orrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	615a      	str	r2, [r3, #20]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d101      	bne.n	8001900 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80018fc:	2301      	movs	r3, #1
 80018fe:	e000      	b.n	8001902 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800190e:	b480      	push	{r7}
 8001910:	b087      	sub	sp, #28
 8001912:	af00      	add	r7, sp, #0
 8001914:	60f8      	str	r0, [r7, #12]
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	3330      	adds	r3, #48	; 0x30
 800191e:	461a      	mov	r2, r3
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	0a1b      	lsrs	r3, r3, #8
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	f003 030c 	and.w	r3, r3, #12
 800192a:	4413      	add	r3, r2
 800192c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	f003 031f 	and.w	r3, r3, #31
 8001938:	211f      	movs	r1, #31
 800193a:	fa01 f303 	lsl.w	r3, r1, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	401a      	ands	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	0e9b      	lsrs	r3, r3, #26
 8001946:	f003 011f 	and.w	r1, r3, #31
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	f003 031f 	and.w	r3, r3, #31
 8001950:	fa01 f303 	lsl.w	r3, r1, r3
 8001954:	431a      	orrs	r2, r3
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800195a:	bf00      	nop
 800195c:	371c      	adds	r7, #28
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001966:	b480      	push	{r7}
 8001968:	b087      	sub	sp, #28
 800196a:	af00      	add	r7, sp, #0
 800196c:	60f8      	str	r0, [r7, #12]
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	3314      	adds	r3, #20
 8001976:	461a      	mov	r2, r3
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	0e5b      	lsrs	r3, r3, #25
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	f003 0304 	and.w	r3, r3, #4
 8001982:	4413      	add	r3, r2
 8001984:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	0d1b      	lsrs	r3, r3, #20
 800198e:	f003 031f 	and.w	r3, r3, #31
 8001992:	2107      	movs	r1, #7
 8001994:	fa01 f303 	lsl.w	r3, r1, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	401a      	ands	r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	0d1b      	lsrs	r3, r3, #20
 80019a0:	f003 031f 	and.w	r3, r3, #31
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	fa01 f303 	lsl.w	r3, r1, r3
 80019aa:	431a      	orrs	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80019b0:	bf00      	nop
 80019b2:	371c      	adds	r7, #28
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019d4:	43db      	mvns	r3, r3
 80019d6:	401a      	ands	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f003 0318 	and.w	r3, r3, #24
 80019de:	4908      	ldr	r1, [pc, #32]	; (8001a00 <LL_ADC_SetChannelSingleDiff+0x44>)
 80019e0:	40d9      	lsrs	r1, r3
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	400b      	ands	r3, r1
 80019e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ea:	431a      	orrs	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80019f2:	bf00      	nop
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	0007ffff 	.word	0x0007ffff

08001a04 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001a14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	6093      	str	r3, [r2, #8]
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a3c:	d101      	bne.n	8001a42 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a64:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a8c:	d101      	bne.n	8001a92 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e000      	b.n	8001a94 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ab0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ab4:	f043 0201 	orr.w	r2, r3, #1
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d101      	bne.n	8001ae0 <LL_ADC_IsEnabled+0x18>
 8001adc:	2301      	movs	r3, #1
 8001ade:	e000      	b.n	8001ae2 <LL_ADC_IsEnabled+0x1a>
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001afe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b02:	f043 0204 	orr.w	r2, r3, #4
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 0304 	and.w	r3, r3, #4
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	d101      	bne.n	8001b2e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e000      	b.n	8001b30 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 0308 	and.w	r3, r3, #8
 8001b4c:	2b08      	cmp	r3, #8
 8001b4e:	d101      	bne.n	8001b54 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b50:	2301      	movs	r3, #1
 8001b52:	e000      	b.n	8001b56 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
	...

08001b64 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b088      	sub	sp, #32
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e12d      	b.n	8001dda <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d109      	bne.n	8001ba0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff fa47 	bl	8001020 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ff3f 	bl	8001a28 <LL_ADC_IsDeepPowerDownEnabled>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d004      	beq.n	8001bba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff ff25 	bl	8001a04 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff ff5a 	bl	8001a78 <LL_ADC_IsInternalRegulatorEnabled>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d113      	bne.n	8001bf2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff ff3e 	bl	8001a50 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001bd4:	4b83      	ldr	r3, [pc, #524]	; (8001de4 <HAL_ADC_Init+0x280>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	099b      	lsrs	r3, r3, #6
 8001bda:	4a83      	ldr	r2, [pc, #524]	; (8001de8 <HAL_ADC_Init+0x284>)
 8001bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001be0:	099b      	lsrs	r3, r3, #6
 8001be2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001be4:	e002      	b.n	8001bec <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	3b01      	subs	r3, #1
 8001bea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f9      	bne.n	8001be6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff ff3e 	bl	8001a78 <LL_ADC_IsInternalRegulatorEnabled>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10d      	bne.n	8001c1e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c06:	f043 0210 	orr.w	r2, r3, #16
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c12:	f043 0201 	orr.w	r2, r3, #1
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff ff77 	bl	8001b16 <LL_ADC_REG_IsConversionOngoing>
 8001c28:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2e:	f003 0310 	and.w	r3, r3, #16
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f040 80c8 	bne.w	8001dc8 <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f040 80c4 	bne.w	8001dc8 <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c44:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c48:	f043 0202 	orr.w	r2, r3, #2
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff37 	bl	8001ac8 <LL_ADC_IsEnabled>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d10b      	bne.n	8001c78 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c60:	4862      	ldr	r0, [pc, #392]	; (8001dec <HAL_ADC_Init+0x288>)
 8001c62:	f7ff ff31 	bl	8001ac8 <LL_ADC_IsEnabled>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d105      	bne.n	8001c78 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	4619      	mov	r1, r3
 8001c72:	485f      	ldr	r0, [pc, #380]	; (8001df0 <HAL_ADC_Init+0x28c>)
 8001c74:	f7ff fd9c 	bl	80017b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	7e5b      	ldrb	r3, [r3, #25]
 8001c7c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c82:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001c88:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001c8e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c96:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d106      	bne.n	8001cb4 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	3b01      	subs	r3, #1
 8001cac:	045b      	lsls	r3, r3, #17
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d009      	beq.n	8001cd0 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	4b47      	ldr	r3, [pc, #284]	; (8001df4 <HAL_ADC_Init+0x290>)
 8001cd8:	4013      	ands	r3, r2
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6812      	ldr	r2, [r2, #0]
 8001cde:	69b9      	ldr	r1, [r7, #24]
 8001ce0:	430b      	orrs	r3, r1
 8001ce2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ff14 	bl	8001b16 <LL_ADC_REG_IsConversionOngoing>
 8001cee:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff21 	bl	8001b3c <LL_ADC_INJ_IsConversionOngoing>
 8001cfa:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d140      	bne.n	8001d84 <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d13d      	bne.n	8001d84 <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	7e1b      	ldrb	r3, [r3, #24]
 8001d10:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d12:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d1a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d2a:	f023 0306 	bic.w	r3, r3, #6
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6812      	ldr	r2, [r2, #0]
 8001d32:	69b9      	ldr	r1, [r7, #24]
 8001d34:	430b      	orrs	r3, r1
 8001d36:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d118      	bne.n	8001d74 <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d4c:	f023 0304 	bic.w	r3, r3, #4
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d58:	4311      	orrs	r1, r2
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d5e:	4311      	orrs	r1, r2
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d64:	430a      	orrs	r2, r1
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f042 0201 	orr.w	r2, r2, #1
 8001d70:	611a      	str	r2, [r3, #16]
 8001d72:	e007      	b.n	8001d84 <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	691a      	ldr	r2, [r3, #16]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0201 	bic.w	r2, r2, #1
 8001d82:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d10c      	bne.n	8001da6 <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	f023 010f 	bic.w	r1, r3, #15
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	1e5a      	subs	r2, r3, #1
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	631a      	str	r2, [r3, #48]	; 0x30
 8001da4:	e007      	b.n	8001db6 <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 020f 	bic.w	r2, r2, #15
 8001db4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dba:	f023 0303 	bic.w	r3, r3, #3
 8001dbe:	f043 0201 	orr.w	r2, r3, #1
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	659a      	str	r2, [r3, #88]	; 0x58
 8001dc6:	e007      	b.n	8001dd8 <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dcc:	f043 0210 	orr.w	r2, r3, #16
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001dd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3720      	adds	r7, #32
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000000 	.word	0x20000000
 8001de8:	053e2d63 	.word	0x053e2d63
 8001dec:	50040000 	.word	0x50040000
 8001df0:	50040300 	.word	0x50040300
 8001df4:	fff0c007 	.word	0xfff0c007

08001df8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff fe86 	bl	8001b16 <LL_ADC_REG_IsConversionOngoing>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d14f      	bne.n	8001eb0 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d101      	bne.n	8001e1e <HAL_ADC_Start+0x26>
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e04b      	b.n	8001eb6 <HAL_ADC_Start+0xbe>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 fcd8 	bl	80027dc <ADC_Enable>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d137      	bne.n	8001ea6 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e3e:	f023 0301 	bic.w	r3, r3, #1
 8001e42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e56:	d106      	bne.n	8001e66 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5c:	f023 0206 	bic.w	r2, r3, #6
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e64:	e002      	b.n	8001e6c <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	221c      	movs	r2, #28
 8001e72:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d007      	beq.n	8001e9a <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e92:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fe25 	bl	8001aee <LL_ADC_REG_StartConversion>
 8001ea4:	e006      	b.n	8001eb4 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001eae:	e001      	b.n	8001eb4 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b086      	sub	sp, #24
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
 8001ec6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d102      	bne.n	8001ed6 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001ed0:	2308      	movs	r3, #8
 8001ed2:	617b      	str	r3, [r7, #20]
 8001ed4:	e010      	b.n	8001ef8 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d007      	beq.n	8001ef4 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee8:	f043 0220 	orr.w	r2, r3, #32
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e068      	b.n	8001fc6 <HAL_ADC_PollForConversion+0x108>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001ef4:	2304      	movs	r3, #4
 8001ef6:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001ef8:	f7ff fc4e 	bl	8001798 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001efe:	e01a      	b.n	8001f36 <HAL_ADC_PollForConversion+0x78>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f06:	d016      	beq.n	8001f36 <HAL_ADC_PollForConversion+0x78>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001f08:	f7ff fc46 	bl	8001798 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d302      	bcc.n	8001f1e <HAL_ADC_PollForConversion+0x60>
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10b      	bne.n	8001f36 <HAL_ADC_PollForConversion+0x78>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f22:	f043 0204 	orr.w	r2, r3, #4
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	659a      	str	r2, [r3, #88]	; 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e047      	b.n	8001fc6 <HAL_ADC_PollForConversion+0x108>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0dd      	beq.n	8001f00 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f48:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff fcc7 	bl	80018e8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d01c      	beq.n	8001f9a <HAL_ADC_PollForConversion+0xdc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	7e5b      	ldrb	r3, [r3, #25]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d118      	bne.n	8001f9a <HAL_ADC_PollForConversion+0xdc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	2b08      	cmp	r3, #8
 8001f74:	d111      	bne.n	8001f9a <HAL_ADC_PollForConversion+0xdc>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d105      	bne.n	8001f9a <HAL_ADC_PollForConversion+0xdc>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f92:	f043 0201 	orr.w	r2, r3, #1
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d104      	bne.n	8001fb2 <HAL_ADC_PollForConversion+0xf4>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2208      	movs	r2, #8
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	e008      	b.n	8001fc4 <HAL_ADC_PollForConversion+0x106>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d103      	bne.n	8001fc4 <HAL_ADC_PollForConversion+0x106>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	220c      	movs	r2, #12
 8001fc2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b0b6      	sub	sp, #216	; 0xd8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002002:	2b01      	cmp	r3, #1
 8002004:	d101      	bne.n	800200a <HAL_ADC_ConfigChannel+0x22>
 8002006:	2302      	movs	r3, #2
 8002008:	e3d4      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x7cc>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff fd7d 	bl	8001b16 <LL_ADC_REG_IsConversionOngoing>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	f040 83b9 	bne.w	8002796 <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2b05      	cmp	r3, #5
 800202a:	d824      	bhi.n	8002076 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	3b02      	subs	r3, #2
 8002032:	2b03      	cmp	r3, #3
 8002034:	d81b      	bhi.n	800206e <HAL_ADC_ConfigChannel+0x86>
 8002036:	a201      	add	r2, pc, #4	; (adr r2, 800203c <HAL_ADC_ConfigChannel+0x54>)
 8002038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800203c:	0800204d 	.word	0x0800204d
 8002040:	08002055 	.word	0x08002055
 8002044:	0800205d 	.word	0x0800205d
 8002048:	08002065 	.word	0x08002065
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	220c      	movs	r2, #12
 8002050:	605a      	str	r2, [r3, #4]
          break;
 8002052:	e011      	b.n	8002078 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	2212      	movs	r2, #18
 8002058:	605a      	str	r2, [r3, #4]
          break;
 800205a:	e00d      	b.n	8002078 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	2218      	movs	r2, #24
 8002060:	605a      	str	r2, [r3, #4]
          break;
 8002062:	e009      	b.n	8002078 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	f44f 7280 	mov.w	r2, #256	; 0x100
 800206a:	605a      	str	r2, [r3, #4]
          break;
 800206c:	e004      	b.n	8002078 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	2206      	movs	r2, #6
 8002072:	605a      	str	r2, [r3, #4]
          break;
 8002074:	e000      	b.n	8002078 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002076:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6818      	ldr	r0, [r3, #0]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	6859      	ldr	r1, [r3, #4]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	461a      	mov	r2, r3
 8002086:	f7ff fc42 	bl	800190e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff fd41 	bl	8001b16 <LL_ADC_REG_IsConversionOngoing>
 8002094:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fd4d 	bl	8001b3c <LL_ADC_INJ_IsConversionOngoing>
 80020a2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f040 81c1 	bne.w	8002432 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f040 81bc 	bne.w	8002432 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020c2:	d10f      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2200      	movs	r2, #0
 80020ce:	4619      	mov	r1, r3
 80020d0:	f7ff fc49 	bl	8001966 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff fbf0 	bl	80018c2 <LL_ADC_SetSamplingTimeCommonConfig>
 80020e2:	e00e      	b.n	8002102 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6818      	ldr	r0, [r3, #0]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	6819      	ldr	r1, [r3, #0]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	461a      	mov	r2, r3
 80020f2:	f7ff fc38 	bl	8001966 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2100      	movs	r1, #0
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff fbe0 	bl	80018c2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	695a      	ldr	r2, [r3, #20]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	08db      	lsrs	r3, r3, #3
 800210e:	f003 0303 	and.w	r3, r3, #3
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	2b04      	cmp	r3, #4
 8002122:	d00a      	beq.n	800213a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6818      	ldr	r0, [r3, #0]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	6919      	ldr	r1, [r3, #16]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002134:	f7ff fb70 	bl	8001818 <LL_ADC_SetOffset>
 8002138:	e17b      	b.n	8002432 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2100      	movs	r1, #0
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff fb8d 	bl	8001860 <LL_ADC_GetOffsetChannel>
 8002146:	4603      	mov	r3, r0
 8002148:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10a      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x17e>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2100      	movs	r1, #0
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff fb82 	bl	8001860 <LL_ADC_GetOffsetChannel>
 800215c:	4603      	mov	r3, r0
 800215e:	0e9b      	lsrs	r3, r3, #26
 8002160:	f003 021f 	and.w	r2, r3, #31
 8002164:	e01e      	b.n	80021a4 <HAL_ADC_ConfigChannel+0x1bc>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2100      	movs	r1, #0
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff fb77 	bl	8001860 <LL_ADC_GetOffsetChannel>
 8002172:	4603      	mov	r3, r0
 8002174:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800217c:	fa93 f3a3 	rbit	r3, r3
 8002180:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002184:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002188:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800218c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002194:	2320      	movs	r3, #32
 8002196:	e004      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002198:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800219c:	fab3 f383 	clz	r3, r3
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d105      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x1d4>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	0e9b      	lsrs	r3, r3, #26
 80021b6:	f003 031f 	and.w	r3, r3, #31
 80021ba:	e018      	b.n	80021ee <HAL_ADC_ConfigChannel+0x206>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80021c8:	fa93 f3a3 	rbit	r3, r3
 80021cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80021d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80021d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80021e0:	2320      	movs	r3, #32
 80021e2:	e004      	b.n	80021ee <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80021e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021e8:	fab3 f383 	clz	r3, r3
 80021ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d106      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2200      	movs	r2, #0
 80021f8:	2100      	movs	r1, #0
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff fb46 	bl	800188c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2101      	movs	r1, #1
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff fb2a 	bl	8001860 <LL_ADC_GetOffsetChannel>
 800220c:	4603      	mov	r3, r0
 800220e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10a      	bne.n	800222c <HAL_ADC_ConfigChannel+0x244>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2101      	movs	r1, #1
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff fb1f 	bl	8001860 <LL_ADC_GetOffsetChannel>
 8002222:	4603      	mov	r3, r0
 8002224:	0e9b      	lsrs	r3, r3, #26
 8002226:	f003 021f 	and.w	r2, r3, #31
 800222a:	e01e      	b.n	800226a <HAL_ADC_ConfigChannel+0x282>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2101      	movs	r1, #1
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff fb14 	bl	8001860 <LL_ADC_GetOffsetChannel>
 8002238:	4603      	mov	r3, r0
 800223a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002242:	fa93 f3a3 	rbit	r3, r3
 8002246:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800224a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800224e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002252:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800225a:	2320      	movs	r3, #32
 800225c:	e004      	b.n	8002268 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800225e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002262:	fab3 f383 	clz	r3, r3
 8002266:	b2db      	uxtb	r3, r3
 8002268:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002272:	2b00      	cmp	r3, #0
 8002274:	d105      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x29a>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	0e9b      	lsrs	r3, r3, #26
 800227c:	f003 031f 	and.w	r3, r3, #31
 8002280:	e018      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x2cc>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800228e:	fa93 f3a3 	rbit	r3, r3
 8002292:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002296:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800229a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800229e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80022a6:	2320      	movs	r3, #32
 80022a8:	e004      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80022aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022ae:	fab3 f383 	clz	r3, r3
 80022b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d106      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2200      	movs	r2, #0
 80022be:	2101      	movs	r1, #1
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff fae3 	bl	800188c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2102      	movs	r1, #2
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff fac7 	bl	8001860 <LL_ADC_GetOffsetChannel>
 80022d2:	4603      	mov	r3, r0
 80022d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d10a      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x30a>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2102      	movs	r1, #2
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fabc 	bl	8001860 <LL_ADC_GetOffsetChannel>
 80022e8:	4603      	mov	r3, r0
 80022ea:	0e9b      	lsrs	r3, r3, #26
 80022ec:	f003 021f 	and.w	r2, r3, #31
 80022f0:	e01e      	b.n	8002330 <HAL_ADC_ConfigChannel+0x348>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2102      	movs	r1, #2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fab1 	bl	8001860 <LL_ADC_GetOffsetChannel>
 80022fe:	4603      	mov	r3, r0
 8002300:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002304:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002308:	fa93 f3a3 	rbit	r3, r3
 800230c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002310:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002314:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002318:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002320:	2320      	movs	r3, #32
 8002322:	e004      	b.n	800232e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002324:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002328:	fab3 f383 	clz	r3, r3
 800232c:	b2db      	uxtb	r3, r3
 800232e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002338:	2b00      	cmp	r3, #0
 800233a:	d105      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x360>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	0e9b      	lsrs	r3, r3, #26
 8002342:	f003 031f 	and.w	r3, r3, #31
 8002346:	e016      	b.n	8002376 <HAL_ADC_ConfigChannel+0x38e>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002350:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002354:	fa93 f3a3 	rbit	r3, r3
 8002358:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800235a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800235c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002360:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002368:	2320      	movs	r3, #32
 800236a:	e004      	b.n	8002376 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800236c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002370:	fab3 f383 	clz	r3, r3
 8002374:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002376:	429a      	cmp	r2, r3
 8002378:	d106      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2200      	movs	r2, #0
 8002380:	2102      	movs	r1, #2
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff fa82 	bl	800188c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2103      	movs	r1, #3
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff fa66 	bl	8001860 <LL_ADC_GetOffsetChannel>
 8002394:	4603      	mov	r3, r0
 8002396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10a      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x3cc>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2103      	movs	r1, #3
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff fa5b 	bl	8001860 <LL_ADC_GetOffsetChannel>
 80023aa:	4603      	mov	r3, r0
 80023ac:	0e9b      	lsrs	r3, r3, #26
 80023ae:	f003 021f 	and.w	r2, r3, #31
 80023b2:	e017      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x3fc>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2103      	movs	r1, #3
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff fa50 	bl	8001860 <LL_ADC_GetOffsetChannel>
 80023c0:	4603      	mov	r3, r0
 80023c2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023c6:	fa93 f3a3 	rbit	r3, r3
 80023ca:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80023cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023ce:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80023d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80023d6:	2320      	movs	r3, #32
 80023d8:	e003      	b.n	80023e2 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80023da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023dc:	fab3 f383 	clz	r3, r3
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d105      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x414>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	0e9b      	lsrs	r3, r3, #26
 80023f6:	f003 031f 	and.w	r3, r3, #31
 80023fa:	e011      	b.n	8002420 <HAL_ADC_ConfigChannel+0x438>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002402:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002404:	fa93 f3a3 	rbit	r3, r3
 8002408:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800240a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800240c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800240e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002414:	2320      	movs	r3, #32
 8002416:	e003      	b.n	8002420 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800241a:	fab3 f383 	clz	r3, r3
 800241e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002420:	429a      	cmp	r2, r3
 8002422:	d106      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2200      	movs	r2, #0
 800242a:	2103      	movs	r1, #3
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff fa2d 	bl	800188c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff fb46 	bl	8001ac8 <LL_ADC_IsEnabled>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	f040 8140 	bne.w	80026c4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6818      	ldr	r0, [r3, #0]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	6819      	ldr	r1, [r3, #0]
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	461a      	mov	r2, r3
 8002452:	f7ff fab3 	bl	80019bc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	4a8f      	ldr	r2, [pc, #572]	; (8002698 <HAL_ADC_ConfigChannel+0x6b0>)
 800245c:	4293      	cmp	r3, r2
 800245e:	f040 8131 	bne.w	80026c4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10b      	bne.n	800248a <HAL_ADC_ConfigChannel+0x4a2>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	0e9b      	lsrs	r3, r3, #26
 8002478:	3301      	adds	r3, #1
 800247a:	f003 031f 	and.w	r3, r3, #31
 800247e:	2b09      	cmp	r3, #9
 8002480:	bf94      	ite	ls
 8002482:	2301      	movls	r3, #1
 8002484:	2300      	movhi	r3, #0
 8002486:	b2db      	uxtb	r3, r3
 8002488:	e019      	b.n	80024be <HAL_ADC_ConfigChannel+0x4d6>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002490:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002492:	fa93 f3a3 	rbit	r3, r3
 8002496:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002498:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800249a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800249c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80024a2:	2320      	movs	r3, #32
 80024a4:	e003      	b.n	80024ae <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80024a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024a8:	fab3 f383 	clz	r3, r3
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	3301      	adds	r3, #1
 80024b0:	f003 031f 	and.w	r3, r3, #31
 80024b4:	2b09      	cmp	r3, #9
 80024b6:	bf94      	ite	ls
 80024b8:	2301      	movls	r3, #1
 80024ba:	2300      	movhi	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d079      	beq.n	80025b6 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d107      	bne.n	80024de <HAL_ADC_ConfigChannel+0x4f6>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	0e9b      	lsrs	r3, r3, #26
 80024d4:	3301      	adds	r3, #1
 80024d6:	069b      	lsls	r3, r3, #26
 80024d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024dc:	e015      	b.n	800250a <HAL_ADC_ConfigChannel+0x522>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024e6:	fa93 f3a3 	rbit	r3, r3
 80024ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80024ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ee:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80024f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80024f6:	2320      	movs	r3, #32
 80024f8:	e003      	b.n	8002502 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80024fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024fc:	fab3 f383 	clz	r3, r3
 8002500:	b2db      	uxtb	r3, r3
 8002502:	3301      	adds	r3, #1
 8002504:	069b      	lsls	r3, r3, #26
 8002506:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002512:	2b00      	cmp	r3, #0
 8002514:	d109      	bne.n	800252a <HAL_ADC_ConfigChannel+0x542>
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	0e9b      	lsrs	r3, r3, #26
 800251c:	3301      	adds	r3, #1
 800251e:	f003 031f 	and.w	r3, r3, #31
 8002522:	2101      	movs	r1, #1
 8002524:	fa01 f303 	lsl.w	r3, r1, r3
 8002528:	e017      	b.n	800255a <HAL_ADC_ConfigChannel+0x572>
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002532:	fa93 f3a3 	rbit	r3, r3
 8002536:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800253a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800253c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002542:	2320      	movs	r3, #32
 8002544:	e003      	b.n	800254e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002548:	fab3 f383 	clz	r3, r3
 800254c:	b2db      	uxtb	r3, r3
 800254e:	3301      	adds	r3, #1
 8002550:	f003 031f 	and.w	r3, r3, #31
 8002554:	2101      	movs	r1, #1
 8002556:	fa01 f303 	lsl.w	r3, r1, r3
 800255a:	ea42 0103 	orr.w	r1, r2, r3
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10a      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x598>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	0e9b      	lsrs	r3, r3, #26
 8002570:	3301      	adds	r3, #1
 8002572:	f003 021f 	and.w	r2, r3, #31
 8002576:	4613      	mov	r3, r2
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	4413      	add	r3, r2
 800257c:	051b      	lsls	r3, r3, #20
 800257e:	e018      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x5ca>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002588:	fa93 f3a3 	rbit	r3, r3
 800258c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800258e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002590:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002598:	2320      	movs	r3, #32
 800259a:	e003      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 800259c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800259e:	fab3 f383 	clz	r3, r3
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	3301      	adds	r3, #1
 80025a6:	f003 021f 	and.w	r2, r3, #31
 80025aa:	4613      	mov	r3, r2
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	4413      	add	r3, r2
 80025b0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025b2:	430b      	orrs	r3, r1
 80025b4:	e081      	b.n	80026ba <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d107      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x5ea>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	0e9b      	lsrs	r3, r3, #26
 80025c8:	3301      	adds	r3, #1
 80025ca:	069b      	lsls	r3, r3, #26
 80025cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025d0:	e015      	b.n	80025fe <HAL_ADC_ConfigChannel+0x616>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025da:	fa93 f3a3 	rbit	r3, r3
 80025de:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80025e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80025e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80025ea:	2320      	movs	r3, #32
 80025ec:	e003      	b.n	80025f6 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80025ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f0:	fab3 f383 	clz	r3, r3
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	3301      	adds	r3, #1
 80025f8:	069b      	lsls	r3, r3, #26
 80025fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002606:	2b00      	cmp	r3, #0
 8002608:	d109      	bne.n	800261e <HAL_ADC_ConfigChannel+0x636>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	0e9b      	lsrs	r3, r3, #26
 8002610:	3301      	adds	r3, #1
 8002612:	f003 031f 	and.w	r3, r3, #31
 8002616:	2101      	movs	r1, #1
 8002618:	fa01 f303 	lsl.w	r3, r1, r3
 800261c:	e017      	b.n	800264e <HAL_ADC_ConfigChannel+0x666>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002624:	6a3b      	ldr	r3, [r7, #32]
 8002626:	fa93 f3a3 	rbit	r3, r3
 800262a:	61fb      	str	r3, [r7, #28]
  return result;
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002636:	2320      	movs	r3, #32
 8002638:	e003      	b.n	8002642 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	fab3 f383 	clz	r3, r3
 8002640:	b2db      	uxtb	r3, r3
 8002642:	3301      	adds	r3, #1
 8002644:	f003 031f 	and.w	r3, r3, #31
 8002648:	2101      	movs	r1, #1
 800264a:	fa01 f303 	lsl.w	r3, r1, r3
 800264e:	ea42 0103 	orr.w	r1, r2, r3
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10d      	bne.n	800267a <HAL_ADC_ConfigChannel+0x692>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	0e9b      	lsrs	r3, r3, #26
 8002664:	3301      	adds	r3, #1
 8002666:	f003 021f 	and.w	r2, r3, #31
 800266a:	4613      	mov	r3, r2
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	4413      	add	r3, r2
 8002670:	3b1e      	subs	r3, #30
 8002672:	051b      	lsls	r3, r3, #20
 8002674:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002678:	e01e      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x6d0>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	fa93 f3a3 	rbit	r3, r3
 8002686:	613b      	str	r3, [r7, #16]
  return result;
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d104      	bne.n	800269c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002692:	2320      	movs	r3, #32
 8002694:	e006      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x6bc>
 8002696:	bf00      	nop
 8002698:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	fab3 f383 	clz	r3, r3
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	3301      	adds	r3, #1
 80026a6:	f003 021f 	and.w	r2, r3, #31
 80026aa:	4613      	mov	r3, r2
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	4413      	add	r3, r2
 80026b0:	3b1e      	subs	r3, #30
 80026b2:	051b      	lsls	r3, r3, #20
 80026b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026b8:	430b      	orrs	r3, r1
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	6892      	ldr	r2, [r2, #8]
 80026be:	4619      	mov	r1, r3
 80026c0:	f7ff f951 	bl	8001966 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4b3c      	ldr	r3, [pc, #240]	; (80027bc <HAL_ADC_ConfigChannel+0x7d4>)
 80026ca:	4013      	ands	r3, r2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d06b      	beq.n	80027a8 <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026d0:	483b      	ldr	r0, [pc, #236]	; (80027c0 <HAL_ADC_ConfigChannel+0x7d8>)
 80026d2:	f7ff f893 	bl	80017fc <LL_ADC_GetCommonPathInternalCh>
 80026d6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a39      	ldr	r2, [pc, #228]	; (80027c4 <HAL_ADC_ConfigChannel+0x7dc>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d126      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d120      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a34      	ldr	r2, [pc, #208]	; (80027c8 <HAL_ADC_ConfigChannel+0x7e0>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d156      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002702:	4619      	mov	r1, r3
 8002704:	482e      	ldr	r0, [pc, #184]	; (80027c0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002706:	f7ff f866 	bl	80017d6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800270a:	4b30      	ldr	r3, [pc, #192]	; (80027cc <HAL_ADC_ConfigChannel+0x7e4>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	099b      	lsrs	r3, r3, #6
 8002710:	4a2f      	ldr	r2, [pc, #188]	; (80027d0 <HAL_ADC_ConfigChannel+0x7e8>)
 8002712:	fba2 2303 	umull	r2, r3, r2, r3
 8002716:	099a      	lsrs	r2, r3, #6
 8002718:	4613      	mov	r3, r2
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	4413      	add	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002722:	e002      	b.n	800272a <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	3b01      	subs	r3, #1
 8002728:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1f9      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002730:	e03a      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a27      	ldr	r2, [pc, #156]	; (80027d4 <HAL_ADC_ConfigChannel+0x7ec>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d113      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x77c>
 800273c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002740:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10d      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a1e      	ldr	r2, [pc, #120]	; (80027c8 <HAL_ADC_ConfigChannel+0x7e0>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d12a      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002752:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800275a:	4619      	mov	r1, r3
 800275c:	4818      	ldr	r0, [pc, #96]	; (80027c0 <HAL_ADC_ConfigChannel+0x7d8>)
 800275e:	f7ff f83a 	bl	80017d6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002762:	e021      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a1b      	ldr	r2, [pc, #108]	; (80027d8 <HAL_ADC_ConfigChannel+0x7f0>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d11c      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800276e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d116      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a12      	ldr	r2, [pc, #72]	; (80027c8 <HAL_ADC_ConfigChannel+0x7e0>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d111      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002784:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002788:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800278c:	4619      	mov	r1, r3
 800278e:	480c      	ldr	r0, [pc, #48]	; (80027c0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002790:	f7ff f821 	bl	80017d6 <LL_ADC_SetCommonPathInternalCh>
 8002794:	e008      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279a:	f043 0220 	orr.w	r2, r3, #32
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80027b0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	37d8      	adds	r7, #216	; 0xd8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	80080000 	.word	0x80080000
 80027c0:	50040300 	.word	0x50040300
 80027c4:	c7520000 	.word	0xc7520000
 80027c8:	50040000 	.word	0x50040000
 80027cc:	20000000 	.word	0x20000000
 80027d0:	053e2d63 	.word	0x053e2d63
 80027d4:	cb840000 	.word	0xcb840000
 80027d8:	80000001 	.word	0x80000001

080027dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff f96d 	bl	8001ac8 <LL_ADC_IsEnabled>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d146      	bne.n	8002882 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	4b24      	ldr	r3, [pc, #144]	; (800288c <ADC_Enable+0xb0>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00d      	beq.n	800281e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002806:	f043 0210 	orr.w	r2, r3, #16
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002812:	f043 0201 	orr.w	r2, r3, #1
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e032      	b.n	8002884 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff f93c 	bl	8001aa0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002828:	f7fe ffb6 	bl	8001798 <HAL_GetTick>
 800282c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800282e:	e021      	b.n	8002874 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff f947 	bl	8001ac8 <LL_ADC_IsEnabled>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d104      	bne.n	800284a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff f92b 	bl	8001aa0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800284a:	f7fe ffa5 	bl	8001798 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d90d      	bls.n	8002874 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285c:	f043 0210 	orr.w	r2, r3, #16
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002868:	f043 0201 	orr.w	r2, r3, #1
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e007      	b.n	8002884 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b01      	cmp	r3, #1
 8002880:	d1d6      	bne.n	8002830 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	8000003f 	.word	0x8000003f

08002890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028a0:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <__NVIC_SetPriorityGrouping+0x44>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028ac:	4013      	ands	r3, r2
 80028ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028c2:	4a04      	ldr	r2, [pc, #16]	; (80028d4 <__NVIC_SetPriorityGrouping+0x44>)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	60d3      	str	r3, [r2, #12]
}
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	e000ed00 	.word	0xe000ed00

080028d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028dc:	4b04      	ldr	r3, [pc, #16]	; (80028f0 <__NVIC_GetPriorityGrouping+0x18>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	0a1b      	lsrs	r3, r3, #8
 80028e2:	f003 0307 	and.w	r3, r3, #7
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	e000ed00 	.word	0xe000ed00

080028f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002902:	2b00      	cmp	r3, #0
 8002904:	db0b      	blt.n	800291e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	f003 021f 	and.w	r2, r3, #31
 800290c:	4907      	ldr	r1, [pc, #28]	; (800292c <__NVIC_EnableIRQ+0x38>)
 800290e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002912:	095b      	lsrs	r3, r3, #5
 8002914:	2001      	movs	r0, #1
 8002916:	fa00 f202 	lsl.w	r2, r0, r2
 800291a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	e000e100 	.word	0xe000e100

08002930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	6039      	str	r1, [r7, #0]
 800293a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800293c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002940:	2b00      	cmp	r3, #0
 8002942:	db0a      	blt.n	800295a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	b2da      	uxtb	r2, r3
 8002948:	490c      	ldr	r1, [pc, #48]	; (800297c <__NVIC_SetPriority+0x4c>)
 800294a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294e:	0112      	lsls	r2, r2, #4
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	440b      	add	r3, r1
 8002954:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002958:	e00a      	b.n	8002970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	b2da      	uxtb	r2, r3
 800295e:	4908      	ldr	r1, [pc, #32]	; (8002980 <__NVIC_SetPriority+0x50>)
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	3b04      	subs	r3, #4
 8002968:	0112      	lsls	r2, r2, #4
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	440b      	add	r3, r1
 800296e:	761a      	strb	r2, [r3, #24]
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	e000e100 	.word	0xe000e100
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002984:	b480      	push	{r7}
 8002986:	b089      	sub	sp, #36	; 0x24
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f1c3 0307 	rsb	r3, r3, #7
 800299e:	2b04      	cmp	r3, #4
 80029a0:	bf28      	it	cs
 80029a2:	2304      	movcs	r3, #4
 80029a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	3304      	adds	r3, #4
 80029aa:	2b06      	cmp	r3, #6
 80029ac:	d902      	bls.n	80029b4 <NVIC_EncodePriority+0x30>
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	3b03      	subs	r3, #3
 80029b2:	e000      	b.n	80029b6 <NVIC_EncodePriority+0x32>
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b8:	f04f 32ff 	mov.w	r2, #4294967295
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43da      	mvns	r2, r3
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	401a      	ands	r2, r3
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029cc:	f04f 31ff 	mov.w	r1, #4294967295
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	fa01 f303 	lsl.w	r3, r1, r3
 80029d6:	43d9      	mvns	r1, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029dc:	4313      	orrs	r3, r2
         );
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3724      	adds	r7, #36	; 0x24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
	...

080029ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029fc:	d301      	bcc.n	8002a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029fe:	2301      	movs	r3, #1
 8002a00:	e00f      	b.n	8002a22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a02:	4a0a      	ldr	r2, [pc, #40]	; (8002a2c <SysTick_Config+0x40>)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a0a:	210f      	movs	r1, #15
 8002a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a10:	f7ff ff8e 	bl	8002930 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a14:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <SysTick_Config+0x40>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a1a:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <SysTick_Config+0x40>)
 8002a1c:	2207      	movs	r2, #7
 8002a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	e000e010 	.word	0xe000e010

08002a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7ff ff29 	bl	8002890 <__NVIC_SetPriorityGrouping>
}
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b086      	sub	sp, #24
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	60b9      	str	r1, [r7, #8]
 8002a50:	607a      	str	r2, [r7, #4]
 8002a52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a58:	f7ff ff3e 	bl	80028d8 <__NVIC_GetPriorityGrouping>
 8002a5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	68b9      	ldr	r1, [r7, #8]
 8002a62:	6978      	ldr	r0, [r7, #20]
 8002a64:	f7ff ff8e 	bl	8002984 <NVIC_EncodePriority>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a6e:	4611      	mov	r1, r2
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff ff5d 	bl	8002930 <__NVIC_SetPriority>
}
 8002a76:	bf00      	nop
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b082      	sub	sp, #8
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	4603      	mov	r3, r0
 8002a86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff ff31 	bl	80028f4 <__NVIC_EnableIRQ>
}
 8002a92:	bf00      	nop
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7ff ffa2 	bl	80029ec <SysTick_Config>
 8002aa8:	4603      	mov	r3, r0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e0ac      	b.n	8002c20 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 f8b2 	bl	8002c34 <DFSDM_GetChannelFromInstance>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	4b55      	ldr	r3, [pc, #340]	; (8002c28 <HAL_DFSDM_ChannelInit+0x174>)
 8002ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e09f      	b.n	8002c20 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7fe fadd 	bl	80010a0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002ae6:	4b51      	ldr	r3, [pc, #324]	; (8002c2c <HAL_DFSDM_ChannelInit+0x178>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	3301      	adds	r3, #1
 8002aec:	4a4f      	ldr	r2, [pc, #316]	; (8002c2c <HAL_DFSDM_ChannelInit+0x178>)
 8002aee:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002af0:	4b4e      	ldr	r3, [pc, #312]	; (8002c2c <HAL_DFSDM_ChannelInit+0x178>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d125      	bne.n	8002b44 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002af8:	4b4d      	ldr	r3, [pc, #308]	; (8002c30 <HAL_DFSDM_ChannelInit+0x17c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a4c      	ldr	r2, [pc, #304]	; (8002c30 <HAL_DFSDM_ChannelInit+0x17c>)
 8002afe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b02:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002b04:	4b4a      	ldr	r3, [pc, #296]	; (8002c30 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	4948      	ldr	r1, [pc, #288]	; (8002c30 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002b12:	4b47      	ldr	r3, [pc, #284]	; (8002c30 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a46      	ldr	r2, [pc, #280]	; (8002c30 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b18:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002b1c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	791b      	ldrb	r3, [r3, #4]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d108      	bne.n	8002b38 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002b26:	4b42      	ldr	r3, [pc, #264]	; (8002c30 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	041b      	lsls	r3, r3, #16
 8002b32:	493f      	ldr	r1, [pc, #252]	; (8002c30 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002b38:	4b3d      	ldr	r3, [pc, #244]	; (8002c30 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a3c      	ldr	r2, [pc, #240]	; (8002c30 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b42:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002b52:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6819      	ldr	r1, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002b62:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002b68:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 020f 	bic.w	r2, r2, #15
 8002b80:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6819      	ldr	r1, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002b90:	431a      	orrs	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002ba8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6899      	ldr	r1, [r3, #8]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f002 0207 	and.w	r2, r2, #7
 8002bd4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6859      	ldr	r1, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002be8:	431a      	orrs	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c00:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 f810 	bl	8002c34 <DFSDM_GetChannelFromInstance>
 8002c14:	4601      	mov	r1, r0
 8002c16:	4a04      	ldr	r2, [pc, #16]	; (8002c28 <HAL_DFSDM_ChannelInit+0x174>)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	20000030 	.word	0x20000030
 8002c2c:	2000002c 	.word	0x2000002c
 8002c30:	40016000 	.word	0x40016000

08002c34 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a1c      	ldr	r2, [pc, #112]	; (8002cb0 <DFSDM_GetChannelFromInstance+0x7c>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d102      	bne.n	8002c4a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002c44:	2300      	movs	r3, #0
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	e02b      	b.n	8002ca2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a19      	ldr	r2, [pc, #100]	; (8002cb4 <DFSDM_GetChannelFromInstance+0x80>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d102      	bne.n	8002c58 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002c52:	2301      	movs	r3, #1
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	e024      	b.n	8002ca2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a17      	ldr	r2, [pc, #92]	; (8002cb8 <DFSDM_GetChannelFromInstance+0x84>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d102      	bne.n	8002c66 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002c60:	2302      	movs	r3, #2
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	e01d      	b.n	8002ca2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a14      	ldr	r2, [pc, #80]	; (8002cbc <DFSDM_GetChannelFromInstance+0x88>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d102      	bne.n	8002c74 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002c6e:	2304      	movs	r3, #4
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	e016      	b.n	8002ca2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a12      	ldr	r2, [pc, #72]	; (8002cc0 <DFSDM_GetChannelFromInstance+0x8c>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d102      	bne.n	8002c82 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002c7c:	2305      	movs	r3, #5
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	e00f      	b.n	8002ca2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a0f      	ldr	r2, [pc, #60]	; (8002cc4 <DFSDM_GetChannelFromInstance+0x90>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d102      	bne.n	8002c90 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002c8a:	2306      	movs	r3, #6
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	e008      	b.n	8002ca2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a0d      	ldr	r2, [pc, #52]	; (8002cc8 <DFSDM_GetChannelFromInstance+0x94>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d102      	bne.n	8002c9e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002c98:	2307      	movs	r3, #7
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	e001      	b.n	8002ca2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	40016000 	.word	0x40016000
 8002cb4:	40016020 	.word	0x40016020
 8002cb8:	40016040 	.word	0x40016040
 8002cbc:	40016080 	.word	0x40016080
 8002cc0:	400160a0 	.word	0x400160a0
 8002cc4:	400160c0 	.word	0x400160c0
 8002cc8:	400160e0 	.word	0x400160e0

08002ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b087      	sub	sp, #28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cda:	e166      	b.n	8002faa <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce8:	4013      	ands	r3, r2
 8002cea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 8158 	beq.w	8002fa4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d00b      	beq.n	8002d14 <HAL_GPIO_Init+0x48>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d007      	beq.n	8002d14 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d08:	2b11      	cmp	r3, #17
 8002d0a:	d003      	beq.n	8002d14 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b12      	cmp	r3, #18
 8002d12:	d130      	bne.n	8002d76 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	2203      	movs	r2, #3
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	43db      	mvns	r3, r3
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	68da      	ldr	r2, [r3, #12]
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	43db      	mvns	r3, r3
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	4013      	ands	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	091b      	lsrs	r3, r3, #4
 8002d60:	f003 0201 	and.w	r2, r3, #1
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	2203      	movs	r2, #3
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d003      	beq.n	8002db6 <HAL_GPIO_Init+0xea>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b12      	cmp	r3, #18
 8002db4:	d123      	bne.n	8002dfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	08da      	lsrs	r2, r3, #3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	3208      	adds	r2, #8
 8002dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	220f      	movs	r2, #15
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	691a      	ldr	r2, [r3, #16]
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	08da      	lsrs	r2, r3, #3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3208      	adds	r2, #8
 8002df8:	6939      	ldr	r1, [r7, #16]
 8002dfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	2203      	movs	r2, #3
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	4013      	ands	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f003 0203 	and.w	r2, r3, #3
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 80b2 	beq.w	8002fa4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e40:	4b61      	ldr	r3, [pc, #388]	; (8002fc8 <HAL_GPIO_Init+0x2fc>)
 8002e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e44:	4a60      	ldr	r2, [pc, #384]	; (8002fc8 <HAL_GPIO_Init+0x2fc>)
 8002e46:	f043 0301 	orr.w	r3, r3, #1
 8002e4a:	6613      	str	r3, [r2, #96]	; 0x60
 8002e4c:	4b5e      	ldr	r3, [pc, #376]	; (8002fc8 <HAL_GPIO_Init+0x2fc>)
 8002e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	60bb      	str	r3, [r7, #8]
 8002e56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e58:	4a5c      	ldr	r2, [pc, #368]	; (8002fcc <HAL_GPIO_Init+0x300>)
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	089b      	lsrs	r3, r3, #2
 8002e5e:	3302      	adds	r3, #2
 8002e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f003 0303 	and.w	r3, r3, #3
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	220f      	movs	r2, #15
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	43db      	mvns	r3, r3
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e82:	d02b      	beq.n	8002edc <HAL_GPIO_Init+0x210>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a52      	ldr	r2, [pc, #328]	; (8002fd0 <HAL_GPIO_Init+0x304>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d025      	beq.n	8002ed8 <HAL_GPIO_Init+0x20c>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a51      	ldr	r2, [pc, #324]	; (8002fd4 <HAL_GPIO_Init+0x308>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d01f      	beq.n	8002ed4 <HAL_GPIO_Init+0x208>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a50      	ldr	r2, [pc, #320]	; (8002fd8 <HAL_GPIO_Init+0x30c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d019      	beq.n	8002ed0 <HAL_GPIO_Init+0x204>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a4f      	ldr	r2, [pc, #316]	; (8002fdc <HAL_GPIO_Init+0x310>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d013      	beq.n	8002ecc <HAL_GPIO_Init+0x200>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a4e      	ldr	r2, [pc, #312]	; (8002fe0 <HAL_GPIO_Init+0x314>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d00d      	beq.n	8002ec8 <HAL_GPIO_Init+0x1fc>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a4d      	ldr	r2, [pc, #308]	; (8002fe4 <HAL_GPIO_Init+0x318>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d007      	beq.n	8002ec4 <HAL_GPIO_Init+0x1f8>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a4c      	ldr	r2, [pc, #304]	; (8002fe8 <HAL_GPIO_Init+0x31c>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d101      	bne.n	8002ec0 <HAL_GPIO_Init+0x1f4>
 8002ebc:	2307      	movs	r3, #7
 8002ebe:	e00e      	b.n	8002ede <HAL_GPIO_Init+0x212>
 8002ec0:	2308      	movs	r3, #8
 8002ec2:	e00c      	b.n	8002ede <HAL_GPIO_Init+0x212>
 8002ec4:	2306      	movs	r3, #6
 8002ec6:	e00a      	b.n	8002ede <HAL_GPIO_Init+0x212>
 8002ec8:	2305      	movs	r3, #5
 8002eca:	e008      	b.n	8002ede <HAL_GPIO_Init+0x212>
 8002ecc:	2304      	movs	r3, #4
 8002ece:	e006      	b.n	8002ede <HAL_GPIO_Init+0x212>
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e004      	b.n	8002ede <HAL_GPIO_Init+0x212>
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	e002      	b.n	8002ede <HAL_GPIO_Init+0x212>
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e000      	b.n	8002ede <HAL_GPIO_Init+0x212>
 8002edc:	2300      	movs	r3, #0
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	f002 0203 	and.w	r2, r2, #3
 8002ee4:	0092      	lsls	r2, r2, #2
 8002ee6:	4093      	lsls	r3, r2
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002eee:	4937      	ldr	r1, [pc, #220]	; (8002fcc <HAL_GPIO_Init+0x300>)
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	089b      	lsrs	r3, r3, #2
 8002ef4:	3302      	adds	r3, #2
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002efc:	4b3b      	ldr	r3, [pc, #236]	; (8002fec <HAL_GPIO_Init+0x320>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	43db      	mvns	r3, r3
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f20:	4a32      	ldr	r2, [pc, #200]	; (8002fec <HAL_GPIO_Init+0x320>)
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002f26:	4b31      	ldr	r3, [pc, #196]	; (8002fec <HAL_GPIO_Init+0x320>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	4013      	ands	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f4a:	4a28      	ldr	r2, [pc, #160]	; (8002fec <HAL_GPIO_Init+0x320>)
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f50:	4b26      	ldr	r3, [pc, #152]	; (8002fec <HAL_GPIO_Init+0x320>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f74:	4a1d      	ldr	r2, [pc, #116]	; (8002fec <HAL_GPIO_Init+0x320>)
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f7a:	4b1c      	ldr	r3, [pc, #112]	; (8002fec <HAL_GPIO_Init+0x320>)
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	43db      	mvns	r3, r3
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	4013      	ands	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f9e:	4a13      	ldr	r2, [pc, #76]	; (8002fec <HAL_GPIO_Init+0x320>)
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f47f ae91 	bne.w	8002cdc <HAL_GPIO_Init+0x10>
  }
}
 8002fba:	bf00      	nop
 8002fbc:	371c      	adds	r7, #28
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	40010000 	.word	0x40010000
 8002fd0:	48000400 	.word	0x48000400
 8002fd4:	48000800 	.word	0x48000800
 8002fd8:	48000c00 	.word	0x48000c00
 8002fdc:	48001000 	.word	0x48001000
 8002fe0:	48001400 	.word	0x48001400
 8002fe4:	48001800 	.word	0x48001800
 8002fe8:	48001c00 	.word	0x48001c00
 8002fec:	40010400 	.word	0x40010400

08002ff0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	807b      	strh	r3, [r7, #2]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003000:	787b      	ldrb	r3, [r7, #1]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003006:	887a      	ldrh	r2, [r7, #2]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800300c:	e002      	b.n	8003014 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800300e:	887a      	ldrh	r2, [r7, #2]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800302a:	4b08      	ldr	r3, [pc, #32]	; (800304c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800302c:	695a      	ldr	r2, [r3, #20]
 800302e:	88fb      	ldrh	r3, [r7, #6]
 8003030:	4013      	ands	r3, r2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d006      	beq.n	8003044 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003036:	4a05      	ldr	r2, [pc, #20]	; (800304c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003038:	88fb      	ldrh	r3, [r7, #6]
 800303a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800303c:	88fb      	ldrh	r3, [r7, #6]
 800303e:	4618      	mov	r0, r3
 8003040:	f000 f806 	bl	8003050 <HAL_GPIO_EXTI_Callback>
  }
}
 8003044:	bf00      	nop
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40010400 	.word	0x40010400

08003050 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b082      	sub	sp, #8
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e081      	b.n	800317c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	d106      	bne.n	8003092 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7fe f84f 	bl	8001130 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2224      	movs	r2, #36	; 0x24
 8003096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 0201 	bic.w	r2, r2, #1
 80030a8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030b6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030c6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d107      	bne.n	80030e0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030dc:	609a      	str	r2, [r3, #8]
 80030de:	e006      	b.n	80030ee <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80030ec:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d104      	bne.n	8003100 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030fe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6812      	ldr	r2, [r2, #0]
 800310a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800310e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003112:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003122:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691a      	ldr	r2, [r3, #16]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	ea42 0103 	orr.w	r1, r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	021a      	lsls	r2, r3, #8
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69d9      	ldr	r1, [r3, #28]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1a      	ldr	r2, [r3, #32]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f042 0201 	orr.w	r2, r2, #1
 800315c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2220      	movs	r2, #32
 8003168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b20      	cmp	r3, #32
 8003198:	d138      	bne.n	800320c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d101      	bne.n	80031a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031a4:	2302      	movs	r3, #2
 80031a6:	e032      	b.n	800320e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2224      	movs	r2, #36	; 0x24
 80031b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0201 	bic.w	r2, r2, #1
 80031c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6819      	ldr	r1, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0201 	orr.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003208:	2300      	movs	r3, #0
 800320a:	e000      	b.n	800320e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800320c:	2302      	movs	r3, #2
  }
}
 800320e:	4618      	mov	r0, r3
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800321a:	b480      	push	{r7}
 800321c:	b085      	sub	sp, #20
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
 8003222:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b20      	cmp	r3, #32
 800322e:	d139      	bne.n	80032a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003236:	2b01      	cmp	r3, #1
 8003238:	d101      	bne.n	800323e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800323a:	2302      	movs	r3, #2
 800323c:	e033      	b.n	80032a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2224      	movs	r2, #36	; 0x24
 800324a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0201 	bic.w	r2, r2, #1
 800325c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800326c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	021b      	lsls	r3, r3, #8
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	4313      	orrs	r3, r2
 8003276:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0201 	orr.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2220      	movs	r2, #32
 8003294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032a0:	2300      	movs	r3, #0
 80032a2:	e000      	b.n	80032a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032a4:	2302      	movs	r3, #2
  }
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3714      	adds	r7, #20
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
	...

080032b4 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af02      	add	r7, sp, #8
 80032ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032bc:	2300      	movs	r3, #0
 80032be:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80032c0:	f7fe fa6a 	bl	8001798 <HAL_GetTick>
 80032c4:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d102      	bne.n	80032d2 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	73fb      	strb	r3, [r7, #15]
 80032d0:	e092      	b.n	80033f8 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f040 808b 	bne.w	80033f8 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7fd ff9a 	bl	800121c <HAL_OSPI_MspInit>
#endif

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80032e8:	f241 3188 	movw	r1, #5000	; 0x1388
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f88b 	bl	8003408 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	4b42      	ldr	r3, [pc, #264]	; (8003404 <HAL_OSPI_Init+0x150>)
 80032fa:	4013      	ands	r3, r2
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	68d1      	ldr	r1, [r2, #12]
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6912      	ldr	r2, [r2, #16]
 8003304:	3a01      	subs	r2, #1
 8003306:	0412      	lsls	r2, r2, #16
 8003308:	4311      	orrs	r1, r2
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6952      	ldr	r2, [r2, #20]
 800330e:	3a01      	subs	r2, #1
 8003310:	0212      	lsls	r2, r2, #8
 8003312:	4311      	orrs	r1, r2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003318:	4311      	orrs	r1, r2
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	69d2      	ldr	r2, [r2, #28]
 800331e:	4311      	orrs	r1, r2
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6812      	ldr	r2, [r2, #0]
 8003324:	430b      	orrs	r3, r1
 8003326:	6093      	str	r3, [r2, #8]
#if   defined (OCTOSPI_DCR3_MAXTRAN)
      /* Configure chip select boundary and maximun transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) | (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	0412      	lsls	r2, r2, #16
 8003332:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	3b01      	subs	r3, #1
 8003344:	021a      	lsls	r2, r3, #8
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2200      	movs	r2, #0
 8003358:	2120      	movs	r1, #32
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 fbb8 	bl	8003ad0 <OSPI_WaitFlagStateUntilTimeout>
 8003360:	4603      	mov	r3, r0
 8003362:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003364:	7bfb      	ldrb	r3, [r7, #15]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d146      	bne.n	80033f8 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER, ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	1e5a      	subs	r2, r3, #1
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	60da      	str	r2, [r3, #12]

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC), (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80033a0:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ac:	431a      	orrs	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0201 	orr.w	r2, r2, #1
 80033c6:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d107      	bne.n	80033e0 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0202 	orr.w	r2, r2, #2
 80033de:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033e8:	d103      	bne.n	80033f2 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	645a      	str	r2, [r3, #68]	; 0x44
 80033f0:	e002      	b.n	80033f8 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2202      	movs	r2, #2
 80033f6:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	f8e0f8f4 	.word	0xf8e0f8f4

08003408 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
	...

08003428 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b092      	sub	sp, #72	; 0x48
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003434:	2300      	movs	r3, #0
 8003436:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index, ospi_enabled = 0U, other_instance;
 800343a:	2300      	movs	r3, #0
 800343c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a08      	ldr	r2, [pc, #32]	; (8003468 <HAL_OSPIM_Config+0x40>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d105      	bne.n	8003456 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800344a:	2300      	movs	r3, #0
 800344c:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 800344e:	2301      	movs	r3, #1
 8003450:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8003454:	e004      	b.n	8003460 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8003456:	2301      	movs	r3, #1
 8003458:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 800345a:	2300      	movs	r3, #0
 800345c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003460:	2300      	movs	r3, #0
 8003462:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003466:	e01f      	b.n	80034a8 <HAL_OSPIM_Config+0x80>
 8003468:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 800346c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003470:	3301      	adds	r3, #1
 8003472:	b2d8      	uxtb	r0, r3
 8003474:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003478:	f107 0114 	add.w	r1, r7, #20
 800347c:	4613      	mov	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	4619      	mov	r1, r3
 8003488:	f000 fb5a 	bl	8003b40 <OSPIM_GetConfig>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d005      	beq.n	800349e <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2208      	movs	r2, #8
 800349c:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800349e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80034a2:	3301      	adds	r3, #1
 80034a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80034a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d9dd      	bls.n	800346c <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 80034b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f040 82fe 	bne.w	8003ab6 <HAL_OSPIM_Config+0x68e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80034ba:	4bcd      	ldr	r3, [pc, #820]	; (80037f0 <HAL_OSPIM_Config+0x3c8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00b      	beq.n	80034de <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80034c6:	4bca      	ldr	r3, [pc, #808]	; (80037f0 <HAL_OSPIM_Config+0x3c8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4ac9      	ldr	r2, [pc, #804]	; (80037f0 <HAL_OSPIM_Config+0x3c8>)
 80034cc:	f023 0301 	bic.w	r3, r3, #1
 80034d0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80034d2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80034d6:	f043 0301 	orr.w	r3, r3, #1
 80034da:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80034de:	4bc5      	ldr	r3, [pc, #788]	; (80037f4 <HAL_OSPIM_Config+0x3cc>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00b      	beq.n	8003502 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80034ea:	4bc2      	ldr	r3, [pc, #776]	; (80037f4 <HAL_OSPIM_Config+0x3cc>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4ac1      	ldr	r2, [pc, #772]	; (80037f4 <HAL_OSPIM_Config+0x3cc>)
 80034f0:	f023 0301 	bic.w	r3, r3, #1
 80034f4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80034f6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80034fa:	f043 0302 	orr.w	r3, r3, #2
 80034fe:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8003502:	49bd      	ldr	r1, [pc, #756]	; (80037f8 <HAL_OSPIM_Config+0x3d0>)
 8003504:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003512:	4413      	add	r3, r2
 8003514:	3b2c      	subs	r3, #44	; 0x2c
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	3b01      	subs	r3, #1
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	6859      	ldr	r1, [r3, #4]
 8003520:	48b5      	ldr	r0, [pc, #724]	; (80037f8 <HAL_OSPIM_Config+0x3d0>)
 8003522:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003524:	4613      	mov	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003530:	4413      	add	r3, r2
 8003532:	3b2c      	subs	r3, #44	; 0x2c
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	3b01      	subs	r3, #1
 8003538:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4403      	add	r3, r0
 8003540:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8003542:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003544:	4613      	mov	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003550:	4413      	add	r3, r2
 8003552:	3b34      	subs	r3, #52	; 0x34
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 80ac 	beq.w	80036b4 <HAL_OSPIM_Config+0x28c>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800355c:	49a6      	ldr	r1, [pc, #664]	; (80037f8 <HAL_OSPIM_Config+0x3d0>)
 800355e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003560:	4613      	mov	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800356c:	4413      	add	r3, r2
 800356e:	3b34      	subs	r3, #52	; 0x34
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	3b01      	subs	r3, #1
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	6859      	ldr	r1, [r3, #4]
 800357a:	489f      	ldr	r0, [pc, #636]	; (80037f8 <HAL_OSPIM_Config+0x3d0>)
 800357c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800357e:	4613      	mov	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800358a:	4413      	add	r3, r2
 800358c:	3b34      	subs	r3, #52	; 0x34
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	3b01      	subs	r3, #1
 8003592:	f021 0201 	bic.w	r2, r1, #1
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4403      	add	r3, r0
 800359a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800359c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800359e:	4613      	mov	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4413      	add	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80035aa:	4413      	add	r3, r2
 80035ac:	3b30      	subs	r3, #48	; 0x30
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d01f      	beq.n	80035f4 <HAL_OSPIM_Config+0x1cc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80035b4:	4990      	ldr	r1, [pc, #576]	; (80037f8 <HAL_OSPIM_Config+0x3d0>)
 80035b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035b8:	4613      	mov	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80035c4:	4413      	add	r3, r2
 80035c6:	3b30      	subs	r3, #48	; 0x30
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	6859      	ldr	r1, [r3, #4]
 80035d2:	4889      	ldr	r0, [pc, #548]	; (80037f8 <HAL_OSPIM_Config+0x3d0>)
 80035d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035d6:	4613      	mov	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80035e2:	4413      	add	r3, r2
 80035e4:	3b30      	subs	r3, #48	; 0x30
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	3b01      	subs	r3, #1
 80035ea:	f021 0210 	bic.w	r2, r1, #16
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4403      	add	r3, r0
 80035f2:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80035f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035f6:	4613      	mov	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003602:	4413      	add	r3, r2
 8003604:	3b28      	subs	r3, #40	; 0x28
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d023      	beq.n	8003654 <HAL_OSPIM_Config+0x22c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800360c:	497a      	ldr	r1, [pc, #488]	; (80037f8 <HAL_OSPIM_Config+0x3d0>)
 800360e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003610:	4613      	mov	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800361c:	4413      	add	r3, r2
 800361e:	3b28      	subs	r3, #40	; 0x28
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	3b01      	subs	r3, #1
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	440b      	add	r3, r1
 800362c:	6859      	ldr	r1, [r3, #4]
 800362e:	4872      	ldr	r0, [pc, #456]	; (80037f8 <HAL_OSPIM_Config+0x3d0>)
 8003630:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003632:	4613      	mov	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800363e:	4413      	add	r3, r2
 8003640:	3b28      	subs	r3, #40	; 0x28
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	3b01      	subs	r3, #1
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4403      	add	r3, r0
 8003652:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003654:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003656:	4613      	mov	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	4413      	add	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003662:	4413      	add	r3, r2
 8003664:	3b24      	subs	r3, #36	; 0x24
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d023      	beq.n	80036b4 <HAL_OSPIM_Config+0x28c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800366c:	4962      	ldr	r1, [pc, #392]	; (80037f8 <HAL_OSPIM_Config+0x3d0>)
 800366e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003670:	4613      	mov	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800367c:	4413      	add	r3, r2
 800367e:	3b24      	subs	r3, #36	; 0x24
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	3b01      	subs	r3, #1
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	6859      	ldr	r1, [r3, #4]
 800368e:	485a      	ldr	r0, [pc, #360]	; (80037f8 <HAL_OSPIM_Config+0x3d0>)
 8003690:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003692:	4613      	mov	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4413      	add	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800369e:	4413      	add	r3, r2
 80036a0:	3b24      	subs	r3, #36	; 0x24
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	3b01      	subs	r3, #1
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4403      	add	r3, r0
 80036b2:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	6819      	ldr	r1, [r3, #0]
 80036b8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80036bc:	4613      	mov	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80036c8:	4413      	add	r3, r2
 80036ca:	3b34      	subs	r3, #52	; 0x34
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4299      	cmp	r1, r3
 80036d0:	d03c      	beq.n	800374c <HAL_OSPIM_Config+0x324>
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	6859      	ldr	r1, [r3, #4]
 80036d6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80036da:	4613      	mov	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80036e6:	4413      	add	r3, r2
 80036e8:	3b30      	subs	r3, #48	; 0x30
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4299      	cmp	r1, r3
 80036ee:	d02d      	beq.n	800374c <HAL_OSPIM_Config+0x324>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	6899      	ldr	r1, [r3, #8]
 80036f4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80036f8:	4613      	mov	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003704:	4413      	add	r3, r2
 8003706:	3b2c      	subs	r3, #44	; 0x2c
 8003708:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800370a:	4299      	cmp	r1, r3
 800370c:	d01e      	beq.n	800374c <HAL_OSPIM_Config+0x324>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	68d9      	ldr	r1, [r3, #12]
 8003712:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003716:	4613      	mov	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003722:	4413      	add	r3, r2
 8003724:	3b28      	subs	r3, #40	; 0x28
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4299      	cmp	r1, r3
 800372a:	d00f      	beq.n	800374c <HAL_OSPIM_Config+0x324>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	6919      	ldr	r1, [r3, #16]
 8003730:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003734:	4613      	mov	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003740:	4413      	add	r3, r2
 8003742:	3b24      	subs	r3, #36	; 0x24
 8003744:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003746:	4299      	cmp	r1, r3
 8003748:	f040 80e0 	bne.w	800390c <HAL_OSPIM_Config+0x4e4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800374c:	492a      	ldr	r1, [pc, #168]	; (80037f8 <HAL_OSPIM_Config+0x3d0>)
 800374e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003752:	4613      	mov	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800375e:	4413      	add	r3, r2
 8003760:	3b34      	subs	r3, #52	; 0x34
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	3b01      	subs	r3, #1
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	6859      	ldr	r1, [r3, #4]
 800376c:	4822      	ldr	r0, [pc, #136]	; (80037f8 <HAL_OSPIM_Config+0x3d0>)
 800376e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003772:	4613      	mov	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800377e:	4413      	add	r3, r2
 8003780:	3b34      	subs	r3, #52	; 0x34
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	3b01      	subs	r3, #1
 8003786:	f021 0201 	bic.w	r2, r1, #1
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4403      	add	r3, r0
 800378e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8003790:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003794:	4613      	mov	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4413      	add	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80037a0:	4413      	add	r3, r2
 80037a2:	3b30      	subs	r3, #48	; 0x30
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d028      	beq.n	80037fc <HAL_OSPIM_Config+0x3d4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80037aa:	4913      	ldr	r1, [pc, #76]	; (80037f8 <HAL_OSPIM_Config+0x3d0>)
 80037ac:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80037b0:	4613      	mov	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80037bc:	4413      	add	r3, r2
 80037be:	3b30      	subs	r3, #48	; 0x30
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	3b01      	subs	r3, #1
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	440b      	add	r3, r1
 80037c8:	6859      	ldr	r1, [r3, #4]
 80037ca:	480b      	ldr	r0, [pc, #44]	; (80037f8 <HAL_OSPIM_Config+0x3d0>)
 80037cc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80037d0:	4613      	mov	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80037dc:	4413      	add	r3, r2
 80037de:	3b30      	subs	r3, #48	; 0x30
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	f021 0210 	bic.w	r2, r1, #16
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4403      	add	r3, r0
 80037ec:	605a      	str	r2, [r3, #4]
 80037ee:	e005      	b.n	80037fc <HAL_OSPIM_Config+0x3d4>
 80037f0:	a0001000 	.word	0xa0001000
 80037f4:	a0001400 	.word	0xa0001400
 80037f8:	50061c00 	.word	0x50061c00
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 80037fc:	49b1      	ldr	r1, [pc, #708]	; (8003ac4 <HAL_OSPIM_Config+0x69c>)
 80037fe:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003802:	4613      	mov	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4413      	add	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800380e:	4413      	add	r3, r2
 8003810:	3b2c      	subs	r3, #44	; 0x2c
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	3b01      	subs	r3, #1
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	6859      	ldr	r1, [r3, #4]
 800381c:	48a9      	ldr	r0, [pc, #676]	; (8003ac4 <HAL_OSPIM_Config+0x69c>)
 800381e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003822:	4613      	mov	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800382e:	4413      	add	r3, r2
 8003830:	3b2c      	subs	r3, #44	; 0x2c
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	3b01      	subs	r3, #1
 8003836:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4403      	add	r3, r0
 800383e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003840:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003844:	4613      	mov	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4413      	add	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003850:	4413      	add	r3, r2
 8003852:	3b28      	subs	r3, #40	; 0x28
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d025      	beq.n	80038a6 <HAL_OSPIM_Config+0x47e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800385a:	499a      	ldr	r1, [pc, #616]	; (8003ac4 <HAL_OSPIM_Config+0x69c>)
 800385c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003860:	4613      	mov	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4413      	add	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800386c:	4413      	add	r3, r2
 800386e:	3b28      	subs	r3, #40	; 0x28
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	3b01      	subs	r3, #1
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	440b      	add	r3, r1
 800387c:	6859      	ldr	r1, [r3, #4]
 800387e:	4891      	ldr	r0, [pc, #580]	; (8003ac4 <HAL_OSPIM_Config+0x69c>)
 8003880:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003884:	4613      	mov	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4413      	add	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003890:	4413      	add	r3, r2
 8003892:	3b28      	subs	r3, #40	; 0x28
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	3b01      	subs	r3, #1
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4403      	add	r3, r0
 80038a4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80038a6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80038aa:	4613      	mov	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80038b6:	4413      	add	r3, r2
 80038b8:	3b24      	subs	r3, #36	; 0x24
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d025      	beq.n	800390c <HAL_OSPIM_Config+0x4e4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80038c0:	4980      	ldr	r1, [pc, #512]	; (8003ac4 <HAL_OSPIM_Config+0x69c>)
 80038c2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80038c6:	4613      	mov	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4413      	add	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80038d2:	4413      	add	r3, r2
 80038d4:	3b24      	subs	r3, #36	; 0x24
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	3b01      	subs	r3, #1
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	6859      	ldr	r1, [r3, #4]
 80038e4:	4877      	ldr	r0, [pc, #476]	; (8003ac4 <HAL_OSPIM_Config+0x69c>)
 80038e6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80038ea:	4613      	mov	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80038f6:	4413      	add	r3, r2
 80038f8:	3b24      	subs	r3, #36	; 0x24
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	3b01      	subs	r3, #1
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4403      	add	r3, r0
 800390a:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort-1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC), (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));
 800390c:	4a6d      	ldr	r2, [pc, #436]	; (8003ac4 <HAL_OSPIM_Config+0x69c>)
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	3b01      	subs	r3, #1
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4413      	add	r3, r2
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800391e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003920:	025b      	lsls	r3, r3, #9
 8003922:	431a      	orrs	r2, r3
 8003924:	4967      	ldr	r1, [pc, #412]	; (8003ac4 <HAL_OSPIM_Config+0x69c>)
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	3b01      	subs	r3, #1
 800392c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	440b      	add	r3, r1
 8003934:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
 8003936:	4a63      	ldr	r2, [pc, #396]	; (8003ac4 <HAL_OSPIM_Config+0x69c>)
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	3b01      	subs	r3, #1
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f023 0203 	bic.w	r2, r3, #3
 8003948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	431a      	orrs	r2, r3
 800394e:	495d      	ldr	r1, [pc, #372]	; (8003ac4 <HAL_OSPIM_Config+0x69c>)
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	3b01      	subs	r3, #1
 8003956:	f042 0201 	orr.w	r2, r2, #1
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d014      	beq.n	8003992 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
 8003968:	4a56      	ldr	r2, [pc, #344]	; (8003ac4 <HAL_OSPIM_Config+0x69c>)
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	3b01      	subs	r3, #1
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	4413      	add	r3, r2
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800397a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800397c:	015b      	lsls	r3, r3, #5
 800397e:	431a      	orrs	r2, r3
 8003980:	4950      	ldr	r1, [pc, #320]	; (8003ac4 <HAL_OSPIM_Config+0x69c>)
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	3b01      	subs	r3, #1
 8003988:	f042 0210 	orr.w	r2, r2, #16
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	440b      	add	r3, r1
 8003990:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d019      	beq.n	80039d2 <HAL_OSPIM_Config+0x5aa>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
 800399e:	4a49      	ldr	r2, [pc, #292]	; (8003ac4 <HAL_OSPIM_Config+0x69c>)
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	3b01      	subs	r3, #1
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80039b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039b6:	049b      	lsls	r3, r3, #18
 80039b8:	431a      	orrs	r2, r3
 80039ba:	4942      	ldr	r1, [pc, #264]	; (8003ac4 <HAL_OSPIM_Config+0x69c>)
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	3b01      	subs	r3, #1
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	440b      	add	r3, r1
 80039ce:	605a      	str	r2, [r3, #4]
 80039d0:	e01c      	b.n	8003a0c <HAL_OSPIM_Config+0x5e4>
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d018      	beq.n	8003a0c <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOHEN | OCTOSPIM_PCR_IOHSRC),
 80039da:	4a3a      	ldr	r2, [pc, #232]	; (8003ac4 <HAL_OSPIM_Config+0x69c>)
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	3b01      	subs	r3, #1
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80039f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039f2:	069b      	lsls	r3, r3, #26
 80039f4:	431a      	orrs	r2, r3
 80039f6:	4933      	ldr	r1, [pc, #204]	; (8003ac4 <HAL_OSPIM_Config+0x69c>)
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	3b01      	subs	r3, #1
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d019      	beq.n	8003a4c <HAL_OSPIM_Config+0x624>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
 8003a18:	4a2a      	ldr	r2, [pc, #168]	; (8003ac4 <HAL_OSPIM_Config+0x69c>)
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4413      	add	r3, r2
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a30:	049b      	lsls	r3, r3, #18
 8003a32:	431a      	orrs	r2, r3
 8003a34:	4923      	ldr	r1, [pc, #140]	; (8003ac4 <HAL_OSPIM_Config+0x69c>)
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	440b      	add	r3, r1
 8003a48:	605a      	str	r2, [r3, #4]
 8003a4a:	e01c      	b.n	8003a86 <HAL_OSPIM_Config+0x65e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d018      	beq.n	8003a86 <HAL_OSPIM_Config+0x65e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOHEN | OCTOSPIM_PCR_IOHSRC),
 8003a54:	4a1b      	ldr	r2, [pc, #108]	; (8003ac4 <HAL_OSPIM_Config+0x69c>)
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4413      	add	r3, r2
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003a6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a6c:	069b      	lsls	r3, r3, #26
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	4914      	ldr	r1, [pc, #80]	; (8003ac4 <HAL_OSPIM_Config+0x69c>)
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	3b01      	subs	r3, #1
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	440b      	add	r3, r1
 8003a84:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8003a86:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d005      	beq.n	8003a9e <HAL_OSPIM_Config+0x676>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003a92:	4b0d      	ldr	r3, [pc, #52]	; (8003ac8 <HAL_OSPIM_Config+0x6a0>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a0c      	ldr	r2, [pc, #48]	; (8003ac8 <HAL_OSPIM_Config+0x6a0>)
 8003a98:	f043 0301 	orr.w	r3, r3, #1
 8003a9c:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8003a9e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d005      	beq.n	8003ab6 <HAL_OSPIM_Config+0x68e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003aaa:	4b08      	ldr	r3, [pc, #32]	; (8003acc <HAL_OSPIM_Config+0x6a4>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a07      	ldr	r2, [pc, #28]	; (8003acc <HAL_OSPIM_Config+0x6a4>)
 8003ab0:	f043 0301 	orr.w	r3, r3, #1
 8003ab4:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8003ab6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3748      	adds	r7, #72	; 0x48
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	50061c00 	.word	0x50061c00
 8003ac8:	a0001000 	.word	0xa0001000
 8003acc:	a0001400 	.word	0xa0001400

08003ad0 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	603b      	str	r3, [r7, #0]
 8003adc:	4613      	mov	r3, r2
 8003ade:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003ae0:	e01a      	b.n	8003b18 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae8:	d016      	beq.n	8003b18 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aea:	f7fd fe55 	bl	8001798 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d302      	bcc.n	8003b00 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10b      	bne.n	8003b18 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b06:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b0c:	f043 0201 	orr.w	r2, r3, #1
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e00e      	b.n	8003b36 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6a1a      	ldr	r2, [r3, #32]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	4013      	ands	r3, r2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	bf14      	ite	ne
 8003b26:	2301      	movne	r3, #1
 8003b28:	2300      	moveq	r3, #0
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	79fb      	ldrb	r3, [r7, #7]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d1d6      	bne.n	8003ae2 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
	...

08003b40 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	4603      	mov	r3, r0
 8003b48:	6039      	str	r1, [r7, #0]
 8003b4a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	75fb      	strb	r3, [r7, #23]
  uint32_t reg, value = 0U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8003b54:	79fb      	ldrb	r3, [r7, #7]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d005      	beq.n	8003b66 <OSPIM_GetConfig+0x26>
 8003b5a:	79fb      	ldrb	r3, [r7, #7]
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d802      	bhi.n	8003b66 <OSPIM_GetConfig+0x26>
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d102      	bne.n	8003b6c <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	75fb      	strb	r3, [r7, #23]
 8003b6a:	e08e      	b.n	8003c8a <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2200      	movs	r2, #0
 8003b76:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	2200      	movs	r2, #0
 8003b82:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	2200      	movs	r2, #0
 8003b88:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8003b8a:	79fb      	ldrb	r3, [r7, #7]
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d101      	bne.n	8003b94 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
 8003b90:	4b41      	ldr	r3, [pc, #260]	; (8003c98 <OSPIM_GetConfig+0x158>)
 8003b92:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003b94:	2300      	movs	r3, #0
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	e074      	b.n	8003c84 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8003b9a:	4a40      	ldr	r2, [pc, #256]	; (8003c9c <OSPIM_GetConfig+0x15c>)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	4053      	eors	r3, r2
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d103      	bne.n	8003bc6 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	1c5a      	adds	r2, r3, #1
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	f003 0310 	and.w	r3, r3, #16
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00a      	beq.n	8003be6 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	4053      	eors	r3, r2
 8003bd6:	f003 0320 	and.w	r3, r3, #32
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d103      	bne.n	8003be6 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00a      	beq.n	8003c06 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	4053      	eors	r3, r2
 8003bf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d103      	bne.n	8003c06 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	1c5a      	adds	r2, r3, #1
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d018      	beq.n	8003c42 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8003c10:	68ba      	ldr	r2, [r7, #8]
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	4053      	eors	r3, r2
 8003c16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d111      	bne.n	8003c42 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d106      	bne.n	8003c36 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	60da      	str	r2, [r3, #12]
 8003c34:	e005      	b.n	8003c42 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d018      	beq.n	8003c7e <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	4053      	eors	r3, r2
 8003c52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d111      	bne.n	8003c7e <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d106      	bne.n	8003c72 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	3301      	adds	r3, #1
 8003c68:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	611a      	str	r2, [r3, #16]
 8003c70:	e005      	b.n	8003c7e <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	3301      	adds	r3, #1
 8003c76:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	3301      	adds	r3, #1
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d987      	bls.n	8003b9a <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8003c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	371c      	adds	r7, #28
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	04040222 	.word	0x04040222
 8003c9c:	50061c00 	.word	0x50061c00

08003ca0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ca4:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a04      	ldr	r2, [pc, #16]	; (8003cbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cae:	6013      	str	r3, [r2, #0]
}
 8003cb0:	bf00      	nop
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	40007000 	.word	0x40007000

08003cc0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cc4:	4b0d      	ldr	r3, [pc, #52]	; (8003cfc <HAL_PWREx_GetVoltageRange+0x3c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd0:	d102      	bne.n	8003cd8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003cd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cd6:	e00b      	b.n	8003cf0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003cd8:	4b08      	ldr	r3, [pc, #32]	; (8003cfc <HAL_PWREx_GetVoltageRange+0x3c>)
 8003cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ce6:	d102      	bne.n	8003cee <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003ce8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cec:	e000      	b.n	8003cf0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003cee:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	40007000 	.word	0x40007000

08003d00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d141      	bne.n	8003d92 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d0e:	4b4b      	ldr	r3, [pc, #300]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d1a:	d131      	bne.n	8003d80 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d1c:	4b47      	ldr	r3, [pc, #284]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d22:	4a46      	ldr	r2, [pc, #280]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d2c:	4b43      	ldr	r3, [pc, #268]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d34:	4a41      	ldr	r2, [pc, #260]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003d3c:	4b40      	ldr	r3, [pc, #256]	; (8003e40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2232      	movs	r2, #50	; 0x32
 8003d42:	fb02 f303 	mul.w	r3, r2, r3
 8003d46:	4a3f      	ldr	r2, [pc, #252]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d48:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4c:	0c9b      	lsrs	r3, r3, #18
 8003d4e:	3301      	adds	r3, #1
 8003d50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d52:	e002      	b.n	8003d5a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d5a:	4b38      	ldr	r3, [pc, #224]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d66:	d102      	bne.n	8003d6e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1f2      	bne.n	8003d54 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d6e:	4b33      	ldr	r3, [pc, #204]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d7a:	d158      	bne.n	8003e2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e057      	b.n	8003e30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d80:	4b2e      	ldr	r3, [pc, #184]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d86:	4a2d      	ldr	r2, [pc, #180]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003d90:	e04d      	b.n	8003e2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d98:	d141      	bne.n	8003e1e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d9a:	4b28      	ldr	r3, [pc, #160]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003da6:	d131      	bne.n	8003e0c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003da8:	4b24      	ldr	r3, [pc, #144]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dae:	4a23      	ldr	r2, [pc, #140]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003db4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003db8:	4b20      	ldr	r3, [pc, #128]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003dc0:	4a1e      	ldr	r2, [pc, #120]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dc6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003dc8:	4b1d      	ldr	r3, [pc, #116]	; (8003e40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2232      	movs	r2, #50	; 0x32
 8003dce:	fb02 f303 	mul.w	r3, r2, r3
 8003dd2:	4a1c      	ldr	r2, [pc, #112]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd8:	0c9b      	lsrs	r3, r3, #18
 8003dda:	3301      	adds	r3, #1
 8003ddc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dde:	e002      	b.n	8003de6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	3b01      	subs	r3, #1
 8003de4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003de6:	4b15      	ldr	r3, [pc, #84]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df2:	d102      	bne.n	8003dfa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1f2      	bne.n	8003de0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dfa:	4b10      	ldr	r3, [pc, #64]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e06:	d112      	bne.n	8003e2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e011      	b.n	8003e30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e0c:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e12:	4a0a      	ldr	r2, [pc, #40]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e1c:	e007      	b.n	8003e2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e1e:	4b07      	ldr	r3, [pc, #28]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e26:	4a05      	ldr	r2, [pc, #20]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e2c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	40007000 	.word	0x40007000
 8003e40:	20000000 	.word	0x20000000
 8003e44:	431bde83 	.word	0x431bde83

08003e48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b088      	sub	sp, #32
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d102      	bne.n	8003e5c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	f000 bc16 	b.w	8004688 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e5c:	4ba0      	ldr	r3, [pc, #640]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 030c 	and.w	r3, r3, #12
 8003e64:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e66:	4b9e      	ldr	r3, [pc, #632]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	f003 0303 	and.w	r3, r3, #3
 8003e6e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0310 	and.w	r3, r3, #16
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 80e4 	beq.w	8004046 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d007      	beq.n	8003e94 <HAL_RCC_OscConfig+0x4c>
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	2b0c      	cmp	r3, #12
 8003e88:	f040 808b 	bne.w	8003fa2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	f040 8087 	bne.w	8003fa2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e94:	4b92      	ldr	r3, [pc, #584]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d005      	beq.n	8003eac <HAL_RCC_OscConfig+0x64>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e3ed      	b.n	8004688 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a1a      	ldr	r2, [r3, #32]
 8003eb0:	4b8b      	ldr	r3, [pc, #556]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0308 	and.w	r3, r3, #8
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d004      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x7e>
 8003ebc:	4b88      	ldr	r3, [pc, #544]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ec4:	e005      	b.n	8003ed2 <HAL_RCC_OscConfig+0x8a>
 8003ec6:	4b86      	ldr	r3, [pc, #536]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 8003ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ecc:	091b      	lsrs	r3, r3, #4
 8003ece:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d223      	bcs.n	8003f1e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 fdc8 	bl	8004a70 <RCC_SetFlashLatencyFromMSIRange>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e3ce      	b.n	8004688 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003eea:	4b7d      	ldr	r3, [pc, #500]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a7c      	ldr	r2, [pc, #496]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 8003ef0:	f043 0308 	orr.w	r3, r3, #8
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	4b7a      	ldr	r3, [pc, #488]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	4977      	ldr	r1, [pc, #476]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f08:	4b75      	ldr	r3, [pc, #468]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	021b      	lsls	r3, r3, #8
 8003f16:	4972      	ldr	r1, [pc, #456]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	604b      	str	r3, [r1, #4]
 8003f1c:	e025      	b.n	8003f6a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f1e:	4b70      	ldr	r3, [pc, #448]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a6f      	ldr	r2, [pc, #444]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 8003f24:	f043 0308 	orr.w	r3, r3, #8
 8003f28:	6013      	str	r3, [r2, #0]
 8003f2a:	4b6d      	ldr	r3, [pc, #436]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	496a      	ldr	r1, [pc, #424]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f3c:	4b68      	ldr	r3, [pc, #416]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	021b      	lsls	r3, r3, #8
 8003f4a:	4965      	ldr	r1, [pc, #404]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d109      	bne.n	8003f6a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fd88 	bl	8004a70 <RCC_SetFlashLatencyFromMSIRange>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e38e      	b.n	8004688 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f6a:	f000 fcbf 	bl	80048ec <HAL_RCC_GetSysClockFreq>
 8003f6e:	4601      	mov	r1, r0
 8003f70:	4b5b      	ldr	r3, [pc, #364]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	091b      	lsrs	r3, r3, #4
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	4a5a      	ldr	r2, [pc, #360]	; (80040e4 <HAL_RCC_OscConfig+0x29c>)
 8003f7c:	5cd3      	ldrb	r3, [r2, r3]
 8003f7e:	f003 031f 	and.w	r3, r3, #31
 8003f82:	fa21 f303 	lsr.w	r3, r1, r3
 8003f86:	4a58      	ldr	r2, [pc, #352]	; (80040e8 <HAL_RCC_OscConfig+0x2a0>)
 8003f88:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f8a:	4b58      	ldr	r3, [pc, #352]	; (80040ec <HAL_RCC_OscConfig+0x2a4>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fd fbb2 	bl	80016f8 <HAL_InitTick>
 8003f94:	4603      	mov	r3, r0
 8003f96:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d052      	beq.n	8004044 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003f9e:	7bfb      	ldrb	r3, [r7, #15]
 8003fa0:	e372      	b.n	8004688 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d032      	beq.n	8004010 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003faa:	4b4d      	ldr	r3, [pc, #308]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a4c      	ldr	r2, [pc, #304]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 8003fb0:	f043 0301 	orr.w	r3, r3, #1
 8003fb4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fb6:	f7fd fbef 	bl	8001798 <HAL_GetTick>
 8003fba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fbc:	e008      	b.n	8003fd0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fbe:	f7fd fbeb 	bl	8001798 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e35b      	b.n	8004688 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fd0:	4b43      	ldr	r3, [pc, #268]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d0f0      	beq.n	8003fbe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fdc:	4b40      	ldr	r3, [pc, #256]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a3f      	ldr	r2, [pc, #252]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 8003fe2:	f043 0308 	orr.w	r3, r3, #8
 8003fe6:	6013      	str	r3, [r2, #0]
 8003fe8:	4b3d      	ldr	r3, [pc, #244]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	493a      	ldr	r1, [pc, #232]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ffa:	4b39      	ldr	r3, [pc, #228]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	021b      	lsls	r3, r3, #8
 8004008:	4935      	ldr	r1, [pc, #212]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 800400a:	4313      	orrs	r3, r2
 800400c:	604b      	str	r3, [r1, #4]
 800400e:	e01a      	b.n	8004046 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004010:	4b33      	ldr	r3, [pc, #204]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a32      	ldr	r2, [pc, #200]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 8004016:	f023 0301 	bic.w	r3, r3, #1
 800401a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800401c:	f7fd fbbc 	bl	8001798 <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004024:	f7fd fbb8 	bl	8001798 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e328      	b.n	8004688 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004036:	4b2a      	ldr	r3, [pc, #168]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1f0      	bne.n	8004024 <HAL_RCC_OscConfig+0x1dc>
 8004042:	e000      	b.n	8004046 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004044:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d073      	beq.n	800413a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	2b08      	cmp	r3, #8
 8004056:	d005      	beq.n	8004064 <HAL_RCC_OscConfig+0x21c>
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	2b0c      	cmp	r3, #12
 800405c:	d10e      	bne.n	800407c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2b03      	cmp	r3, #3
 8004062:	d10b      	bne.n	800407c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004064:	4b1e      	ldr	r3, [pc, #120]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d063      	beq.n	8004138 <HAL_RCC_OscConfig+0x2f0>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d15f      	bne.n	8004138 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e305      	b.n	8004688 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004084:	d106      	bne.n	8004094 <HAL_RCC_OscConfig+0x24c>
 8004086:	4b16      	ldr	r3, [pc, #88]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a15      	ldr	r2, [pc, #84]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 800408c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004090:	6013      	str	r3, [r2, #0]
 8004092:	e01d      	b.n	80040d0 <HAL_RCC_OscConfig+0x288>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800409c:	d10c      	bne.n	80040b8 <HAL_RCC_OscConfig+0x270>
 800409e:	4b10      	ldr	r3, [pc, #64]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a0f      	ldr	r2, [pc, #60]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 80040a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	4b0d      	ldr	r3, [pc, #52]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a0c      	ldr	r2, [pc, #48]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 80040b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	e00b      	b.n	80040d0 <HAL_RCC_OscConfig+0x288>
 80040b8:	4b09      	ldr	r3, [pc, #36]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a08      	ldr	r2, [pc, #32]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 80040be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c2:	6013      	str	r3, [r2, #0]
 80040c4:	4b06      	ldr	r3, [pc, #24]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a05      	ldr	r2, [pc, #20]	; (80040e0 <HAL_RCC_OscConfig+0x298>)
 80040ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d01b      	beq.n	8004110 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d8:	f7fd fb5e 	bl	8001798 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040de:	e010      	b.n	8004102 <HAL_RCC_OscConfig+0x2ba>
 80040e0:	40021000 	.word	0x40021000
 80040e4:	08006340 	.word	0x08006340
 80040e8:	20000000 	.word	0x20000000
 80040ec:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040f0:	f7fd fb52 	bl	8001798 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b64      	cmp	r3, #100	; 0x64
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e2c2      	b.n	8004688 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004102:	4baf      	ldr	r3, [pc, #700]	; (80043c0 <HAL_RCC_OscConfig+0x578>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0f0      	beq.n	80040f0 <HAL_RCC_OscConfig+0x2a8>
 800410e:	e014      	b.n	800413a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004110:	f7fd fb42 	bl	8001798 <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004118:	f7fd fb3e 	bl	8001798 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b64      	cmp	r3, #100	; 0x64
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e2ae      	b.n	8004688 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800412a:	4ba5      	ldr	r3, [pc, #660]	; (80043c0 <HAL_RCC_OscConfig+0x578>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1f0      	bne.n	8004118 <HAL_RCC_OscConfig+0x2d0>
 8004136:	e000      	b.n	800413a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d060      	beq.n	8004208 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	2b04      	cmp	r3, #4
 800414a:	d005      	beq.n	8004158 <HAL_RCC_OscConfig+0x310>
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	2b0c      	cmp	r3, #12
 8004150:	d119      	bne.n	8004186 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	2b02      	cmp	r3, #2
 8004156:	d116      	bne.n	8004186 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004158:	4b99      	ldr	r3, [pc, #612]	; (80043c0 <HAL_RCC_OscConfig+0x578>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004160:	2b00      	cmp	r3, #0
 8004162:	d005      	beq.n	8004170 <HAL_RCC_OscConfig+0x328>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d101      	bne.n	8004170 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e28b      	b.n	8004688 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004170:	4b93      	ldr	r3, [pc, #588]	; (80043c0 <HAL_RCC_OscConfig+0x578>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	061b      	lsls	r3, r3, #24
 800417e:	4990      	ldr	r1, [pc, #576]	; (80043c0 <HAL_RCC_OscConfig+0x578>)
 8004180:	4313      	orrs	r3, r2
 8004182:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004184:	e040      	b.n	8004208 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d023      	beq.n	80041d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800418e:	4b8c      	ldr	r3, [pc, #560]	; (80043c0 <HAL_RCC_OscConfig+0x578>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a8b      	ldr	r2, [pc, #556]	; (80043c0 <HAL_RCC_OscConfig+0x578>)
 8004194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419a:	f7fd fafd 	bl	8001798 <HAL_GetTick>
 800419e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041a0:	e008      	b.n	80041b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041a2:	f7fd faf9 	bl	8001798 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d901      	bls.n	80041b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e269      	b.n	8004688 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041b4:	4b82      	ldr	r3, [pc, #520]	; (80043c0 <HAL_RCC_OscConfig+0x578>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d0f0      	beq.n	80041a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041c0:	4b7f      	ldr	r3, [pc, #508]	; (80043c0 <HAL_RCC_OscConfig+0x578>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	061b      	lsls	r3, r3, #24
 80041ce:	497c      	ldr	r1, [pc, #496]	; (80043c0 <HAL_RCC_OscConfig+0x578>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	604b      	str	r3, [r1, #4]
 80041d4:	e018      	b.n	8004208 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041d6:	4b7a      	ldr	r3, [pc, #488]	; (80043c0 <HAL_RCC_OscConfig+0x578>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a79      	ldr	r2, [pc, #484]	; (80043c0 <HAL_RCC_OscConfig+0x578>)
 80041dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e2:	f7fd fad9 	bl	8001798 <HAL_GetTick>
 80041e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041e8:	e008      	b.n	80041fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ea:	f7fd fad5 	bl	8001798 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d901      	bls.n	80041fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e245      	b.n	8004688 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041fc:	4b70      	ldr	r3, [pc, #448]	; (80043c0 <HAL_RCC_OscConfig+0x578>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1f0      	bne.n	80041ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0308 	and.w	r3, r3, #8
 8004210:	2b00      	cmp	r3, #0
 8004212:	d03c      	beq.n	800428e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d01c      	beq.n	8004256 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800421c:	4b68      	ldr	r3, [pc, #416]	; (80043c0 <HAL_RCC_OscConfig+0x578>)
 800421e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004222:	4a67      	ldr	r2, [pc, #412]	; (80043c0 <HAL_RCC_OscConfig+0x578>)
 8004224:	f043 0301 	orr.w	r3, r3, #1
 8004228:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800422c:	f7fd fab4 	bl	8001798 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004234:	f7fd fab0 	bl	8001798 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e220      	b.n	8004688 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004246:	4b5e      	ldr	r3, [pc, #376]	; (80043c0 <HAL_RCC_OscConfig+0x578>)
 8004248:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0ef      	beq.n	8004234 <HAL_RCC_OscConfig+0x3ec>
 8004254:	e01b      	b.n	800428e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004256:	4b5a      	ldr	r3, [pc, #360]	; (80043c0 <HAL_RCC_OscConfig+0x578>)
 8004258:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800425c:	4a58      	ldr	r2, [pc, #352]	; (80043c0 <HAL_RCC_OscConfig+0x578>)
 800425e:	f023 0301 	bic.w	r3, r3, #1
 8004262:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004266:	f7fd fa97 	bl	8001798 <HAL_GetTick>
 800426a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800426c:	e008      	b.n	8004280 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800426e:	f7fd fa93 	bl	8001798 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d901      	bls.n	8004280 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e203      	b.n	8004688 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004280:	4b4f      	ldr	r3, [pc, #316]	; (80043c0 <HAL_RCC_OscConfig+0x578>)
 8004282:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1ef      	bne.n	800426e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0304 	and.w	r3, r3, #4
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 80a6 	beq.w	80043e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800429c:	2300      	movs	r3, #0
 800429e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80042a0:	4b47      	ldr	r3, [pc, #284]	; (80043c0 <HAL_RCC_OscConfig+0x578>)
 80042a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10d      	bne.n	80042c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ac:	4b44      	ldr	r3, [pc, #272]	; (80043c0 <HAL_RCC_OscConfig+0x578>)
 80042ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b0:	4a43      	ldr	r2, [pc, #268]	; (80043c0 <HAL_RCC_OscConfig+0x578>)
 80042b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042b6:	6593      	str	r3, [r2, #88]	; 0x58
 80042b8:	4b41      	ldr	r3, [pc, #260]	; (80043c0 <HAL_RCC_OscConfig+0x578>)
 80042ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c0:	60bb      	str	r3, [r7, #8]
 80042c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042c4:	2301      	movs	r3, #1
 80042c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042c8:	4b3e      	ldr	r3, [pc, #248]	; (80043c4 <HAL_RCC_OscConfig+0x57c>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d118      	bne.n	8004306 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042d4:	4b3b      	ldr	r3, [pc, #236]	; (80043c4 <HAL_RCC_OscConfig+0x57c>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a3a      	ldr	r2, [pc, #232]	; (80043c4 <HAL_RCC_OscConfig+0x57c>)
 80042da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042e0:	f7fd fa5a 	bl	8001798 <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042e8:	f7fd fa56 	bl	8001798 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e1c6      	b.n	8004688 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042fa:	4b32      	ldr	r3, [pc, #200]	; (80043c4 <HAL_RCC_OscConfig+0x57c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004302:	2b00      	cmp	r3, #0
 8004304:	d0f0      	beq.n	80042e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d108      	bne.n	8004320 <HAL_RCC_OscConfig+0x4d8>
 800430e:	4b2c      	ldr	r3, [pc, #176]	; (80043c0 <HAL_RCC_OscConfig+0x578>)
 8004310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004314:	4a2a      	ldr	r2, [pc, #168]	; (80043c0 <HAL_RCC_OscConfig+0x578>)
 8004316:	f043 0301 	orr.w	r3, r3, #1
 800431a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800431e:	e024      	b.n	800436a <HAL_RCC_OscConfig+0x522>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	2b05      	cmp	r3, #5
 8004326:	d110      	bne.n	800434a <HAL_RCC_OscConfig+0x502>
 8004328:	4b25      	ldr	r3, [pc, #148]	; (80043c0 <HAL_RCC_OscConfig+0x578>)
 800432a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432e:	4a24      	ldr	r2, [pc, #144]	; (80043c0 <HAL_RCC_OscConfig+0x578>)
 8004330:	f043 0304 	orr.w	r3, r3, #4
 8004334:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004338:	4b21      	ldr	r3, [pc, #132]	; (80043c0 <HAL_RCC_OscConfig+0x578>)
 800433a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800433e:	4a20      	ldr	r2, [pc, #128]	; (80043c0 <HAL_RCC_OscConfig+0x578>)
 8004340:	f043 0301 	orr.w	r3, r3, #1
 8004344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004348:	e00f      	b.n	800436a <HAL_RCC_OscConfig+0x522>
 800434a:	4b1d      	ldr	r3, [pc, #116]	; (80043c0 <HAL_RCC_OscConfig+0x578>)
 800434c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004350:	4a1b      	ldr	r2, [pc, #108]	; (80043c0 <HAL_RCC_OscConfig+0x578>)
 8004352:	f023 0301 	bic.w	r3, r3, #1
 8004356:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800435a:	4b19      	ldr	r3, [pc, #100]	; (80043c0 <HAL_RCC_OscConfig+0x578>)
 800435c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004360:	4a17      	ldr	r2, [pc, #92]	; (80043c0 <HAL_RCC_OscConfig+0x578>)
 8004362:	f023 0304 	bic.w	r3, r3, #4
 8004366:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d016      	beq.n	80043a0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004372:	f7fd fa11 	bl	8001798 <HAL_GetTick>
 8004376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004378:	e00a      	b.n	8004390 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800437a:	f7fd fa0d 	bl	8001798 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	f241 3288 	movw	r2, #5000	; 0x1388
 8004388:	4293      	cmp	r3, r2
 800438a:	d901      	bls.n	8004390 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e17b      	b.n	8004688 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004390:	4b0b      	ldr	r3, [pc, #44]	; (80043c0 <HAL_RCC_OscConfig+0x578>)
 8004392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d0ed      	beq.n	800437a <HAL_RCC_OscConfig+0x532>
 800439e:	e01a      	b.n	80043d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a0:	f7fd f9fa 	bl	8001798 <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043a6:	e00f      	b.n	80043c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043a8:	f7fd f9f6 	bl	8001798 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d906      	bls.n	80043c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e164      	b.n	8004688 <HAL_RCC_OscConfig+0x840>
 80043be:	bf00      	nop
 80043c0:	40021000 	.word	0x40021000
 80043c4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043c8:	4ba8      	ldr	r3, [pc, #672]	; (800466c <HAL_RCC_OscConfig+0x824>)
 80043ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1e8      	bne.n	80043a8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043d6:	7ffb      	ldrb	r3, [r7, #31]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d105      	bne.n	80043e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043dc:	4ba3      	ldr	r3, [pc, #652]	; (800466c <HAL_RCC_OscConfig+0x824>)
 80043de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e0:	4aa2      	ldr	r2, [pc, #648]	; (800466c <HAL_RCC_OscConfig+0x824>)
 80043e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043e6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0320 	and.w	r3, r3, #32
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d03c      	beq.n	800446e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d01c      	beq.n	8004436 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80043fc:	4b9b      	ldr	r3, [pc, #620]	; (800466c <HAL_RCC_OscConfig+0x824>)
 80043fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004402:	4a9a      	ldr	r2, [pc, #616]	; (800466c <HAL_RCC_OscConfig+0x824>)
 8004404:	f043 0301 	orr.w	r3, r3, #1
 8004408:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800440c:	f7fd f9c4 	bl	8001798 <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004414:	f7fd f9c0 	bl	8001798 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e130      	b.n	8004688 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004426:	4b91      	ldr	r3, [pc, #580]	; (800466c <HAL_RCC_OscConfig+0x824>)
 8004428:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d0ef      	beq.n	8004414 <HAL_RCC_OscConfig+0x5cc>
 8004434:	e01b      	b.n	800446e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004436:	4b8d      	ldr	r3, [pc, #564]	; (800466c <HAL_RCC_OscConfig+0x824>)
 8004438:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800443c:	4a8b      	ldr	r2, [pc, #556]	; (800466c <HAL_RCC_OscConfig+0x824>)
 800443e:	f023 0301 	bic.w	r3, r3, #1
 8004442:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004446:	f7fd f9a7 	bl	8001798 <HAL_GetTick>
 800444a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800444c:	e008      	b.n	8004460 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800444e:	f7fd f9a3 	bl	8001798 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d901      	bls.n	8004460 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e113      	b.n	8004688 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004460:	4b82      	ldr	r3, [pc, #520]	; (800466c <HAL_RCC_OscConfig+0x824>)
 8004462:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1ef      	bne.n	800444e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 8107 	beq.w	8004686 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447c:	2b02      	cmp	r3, #2
 800447e:	f040 80cb 	bne.w	8004618 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004482:	4b7a      	ldr	r3, [pc, #488]	; (800466c <HAL_RCC_OscConfig+0x824>)
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f003 0203 	and.w	r2, r3, #3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004492:	429a      	cmp	r2, r3
 8004494:	d12c      	bne.n	80044f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a0:	3b01      	subs	r3, #1
 80044a2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d123      	bne.n	80044f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d11b      	bne.n	80044f0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d113      	bne.n	80044f0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d2:	085b      	lsrs	r3, r3, #1
 80044d4:	3b01      	subs	r3, #1
 80044d6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044d8:	429a      	cmp	r2, r3
 80044da:	d109      	bne.n	80044f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	085b      	lsrs	r3, r3, #1
 80044e8:	3b01      	subs	r3, #1
 80044ea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d06d      	beq.n	80045cc <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	2b0c      	cmp	r3, #12
 80044f4:	d068      	beq.n	80045c8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80044f6:	4b5d      	ldr	r3, [pc, #372]	; (800466c <HAL_RCC_OscConfig+0x824>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d105      	bne.n	800450e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004502:	4b5a      	ldr	r3, [pc, #360]	; (800466c <HAL_RCC_OscConfig+0x824>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e0ba      	b.n	8004688 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004512:	4b56      	ldr	r3, [pc, #344]	; (800466c <HAL_RCC_OscConfig+0x824>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a55      	ldr	r2, [pc, #340]	; (800466c <HAL_RCC_OscConfig+0x824>)
 8004518:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800451c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800451e:	f7fd f93b 	bl	8001798 <HAL_GetTick>
 8004522:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004524:	e008      	b.n	8004538 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004526:	f7fd f937 	bl	8001798 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e0a7      	b.n	8004688 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004538:	4b4c      	ldr	r3, [pc, #304]	; (800466c <HAL_RCC_OscConfig+0x824>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1f0      	bne.n	8004526 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004544:	4b49      	ldr	r3, [pc, #292]	; (800466c <HAL_RCC_OscConfig+0x824>)
 8004546:	68da      	ldr	r2, [r3, #12]
 8004548:	4b49      	ldr	r3, [pc, #292]	; (8004670 <HAL_RCC_OscConfig+0x828>)
 800454a:	4013      	ands	r3, r2
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004554:	3a01      	subs	r2, #1
 8004556:	0112      	lsls	r2, r2, #4
 8004558:	4311      	orrs	r1, r2
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800455e:	0212      	lsls	r2, r2, #8
 8004560:	4311      	orrs	r1, r2
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004566:	0852      	lsrs	r2, r2, #1
 8004568:	3a01      	subs	r2, #1
 800456a:	0552      	lsls	r2, r2, #21
 800456c:	4311      	orrs	r1, r2
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004572:	0852      	lsrs	r2, r2, #1
 8004574:	3a01      	subs	r2, #1
 8004576:	0652      	lsls	r2, r2, #25
 8004578:	4311      	orrs	r1, r2
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800457e:	06d2      	lsls	r2, r2, #27
 8004580:	430a      	orrs	r2, r1
 8004582:	493a      	ldr	r1, [pc, #232]	; (800466c <HAL_RCC_OscConfig+0x824>)
 8004584:	4313      	orrs	r3, r2
 8004586:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004588:	4b38      	ldr	r3, [pc, #224]	; (800466c <HAL_RCC_OscConfig+0x824>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a37      	ldr	r2, [pc, #220]	; (800466c <HAL_RCC_OscConfig+0x824>)
 800458e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004592:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004594:	4b35      	ldr	r3, [pc, #212]	; (800466c <HAL_RCC_OscConfig+0x824>)
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	4a34      	ldr	r2, [pc, #208]	; (800466c <HAL_RCC_OscConfig+0x824>)
 800459a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800459e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045a0:	f7fd f8fa 	bl	8001798 <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a8:	f7fd f8f6 	bl	8001798 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e066      	b.n	8004688 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ba:	4b2c      	ldr	r3, [pc, #176]	; (800466c <HAL_RCC_OscConfig+0x824>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d0f0      	beq.n	80045a8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045c6:	e05e      	b.n	8004686 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e05d      	b.n	8004688 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045cc:	4b27      	ldr	r3, [pc, #156]	; (800466c <HAL_RCC_OscConfig+0x824>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d156      	bne.n	8004686 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80045d8:	4b24      	ldr	r3, [pc, #144]	; (800466c <HAL_RCC_OscConfig+0x824>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a23      	ldr	r2, [pc, #140]	; (800466c <HAL_RCC_OscConfig+0x824>)
 80045de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045e4:	4b21      	ldr	r3, [pc, #132]	; (800466c <HAL_RCC_OscConfig+0x824>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	4a20      	ldr	r2, [pc, #128]	; (800466c <HAL_RCC_OscConfig+0x824>)
 80045ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80045f0:	f7fd f8d2 	bl	8001798 <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045f6:	e008      	b.n	800460a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f8:	f7fd f8ce 	bl	8001798 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e03e      	b.n	8004688 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800460a:	4b18      	ldr	r3, [pc, #96]	; (800466c <HAL_RCC_OscConfig+0x824>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0f0      	beq.n	80045f8 <HAL_RCC_OscConfig+0x7b0>
 8004616:	e036      	b.n	8004686 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	2b0c      	cmp	r3, #12
 800461c:	d031      	beq.n	8004682 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800461e:	4b13      	ldr	r3, [pc, #76]	; (800466c <HAL_RCC_OscConfig+0x824>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a12      	ldr	r2, [pc, #72]	; (800466c <HAL_RCC_OscConfig+0x824>)
 8004624:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004628:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800462a:	4b10      	ldr	r3, [pc, #64]	; (800466c <HAL_RCC_OscConfig+0x824>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d105      	bne.n	8004642 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004636:	4b0d      	ldr	r3, [pc, #52]	; (800466c <HAL_RCC_OscConfig+0x824>)
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	4a0c      	ldr	r2, [pc, #48]	; (800466c <HAL_RCC_OscConfig+0x824>)
 800463c:	f023 0303 	bic.w	r3, r3, #3
 8004640:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004642:	4b0a      	ldr	r3, [pc, #40]	; (800466c <HAL_RCC_OscConfig+0x824>)
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	4a09      	ldr	r2, [pc, #36]	; (800466c <HAL_RCC_OscConfig+0x824>)
 8004648:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800464c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004650:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004652:	f7fd f8a1 	bl	8001798 <HAL_GetTick>
 8004656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004658:	e00c      	b.n	8004674 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800465a:	f7fd f89d 	bl	8001798 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d905      	bls.n	8004674 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e00d      	b.n	8004688 <HAL_RCC_OscConfig+0x840>
 800466c:	40021000 	.word	0x40021000
 8004670:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004674:	4b06      	ldr	r3, [pc, #24]	; (8004690 <HAL_RCC_OscConfig+0x848>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1ec      	bne.n	800465a <HAL_RCC_OscConfig+0x812>
 8004680:	e001      	b.n	8004686 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e000      	b.n	8004688 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3720      	adds	r7, #32
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	40021000 	.word	0x40021000

08004694 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800469e:	2300      	movs	r3, #0
 80046a0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e10f      	b.n	80048cc <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046ac:	4b89      	ldr	r3, [pc, #548]	; (80048d4 <HAL_RCC_ClockConfig+0x240>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 030f 	and.w	r3, r3, #15
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d910      	bls.n	80046dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ba:	4b86      	ldr	r3, [pc, #536]	; (80048d4 <HAL_RCC_ClockConfig+0x240>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f023 020f 	bic.w	r2, r3, #15
 80046c2:	4984      	ldr	r1, [pc, #528]	; (80048d4 <HAL_RCC_ClockConfig+0x240>)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ca:	4b82      	ldr	r3, [pc, #520]	; (80048d4 <HAL_RCC_ClockConfig+0x240>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 030f 	and.w	r3, r3, #15
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d001      	beq.n	80046dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e0f7      	b.n	80048cc <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 8089 	beq.w	80047fc <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2b03      	cmp	r3, #3
 80046f0:	d133      	bne.n	800475a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046f2:	4b79      	ldr	r3, [pc, #484]	; (80048d8 <HAL_RCC_ClockConfig+0x244>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e0e4      	b.n	80048cc <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004702:	f000 fa0f 	bl	8004b24 <RCC_GetSysClockFreqFromPLLSource>
 8004706:	4602      	mov	r2, r0
 8004708:	4b74      	ldr	r3, [pc, #464]	; (80048dc <HAL_RCC_ClockConfig+0x248>)
 800470a:	429a      	cmp	r2, r3
 800470c:	d955      	bls.n	80047ba <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800470e:	4b72      	ldr	r3, [pc, #456]	; (80048d8 <HAL_RCC_ClockConfig+0x244>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10a      	bne.n	8004730 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800471a:	4b6f      	ldr	r3, [pc, #444]	; (80048d8 <HAL_RCC_ClockConfig+0x244>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004722:	4a6d      	ldr	r2, [pc, #436]	; (80048d8 <HAL_RCC_ClockConfig+0x244>)
 8004724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004728:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800472a:	2380      	movs	r3, #128	; 0x80
 800472c:	617b      	str	r3, [r7, #20]
 800472e:	e044      	b.n	80047ba <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d03e      	beq.n	80047ba <HAL_RCC_ClockConfig+0x126>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d13a      	bne.n	80047ba <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004744:	4b64      	ldr	r3, [pc, #400]	; (80048d8 <HAL_RCC_ClockConfig+0x244>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800474c:	4a62      	ldr	r2, [pc, #392]	; (80048d8 <HAL_RCC_ClockConfig+0x244>)
 800474e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004752:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004754:	2380      	movs	r3, #128	; 0x80
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	e02f      	b.n	80047ba <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2b02      	cmp	r3, #2
 8004760:	d107      	bne.n	8004772 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004762:	4b5d      	ldr	r3, [pc, #372]	; (80048d8 <HAL_RCC_ClockConfig+0x244>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d115      	bne.n	800479a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e0ac      	b.n	80048cc <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d107      	bne.n	800478a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800477a:	4b57      	ldr	r3, [pc, #348]	; (80048d8 <HAL_RCC_ClockConfig+0x244>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d109      	bne.n	800479a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e0a0      	b.n	80048cc <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800478a:	4b53      	ldr	r3, [pc, #332]	; (80048d8 <HAL_RCC_ClockConfig+0x244>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e098      	b.n	80048cc <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800479a:	f000 f8a7 	bl	80048ec <HAL_RCC_GetSysClockFreq>
 800479e:	4602      	mov	r2, r0
 80047a0:	4b4e      	ldr	r3, [pc, #312]	; (80048dc <HAL_RCC_ClockConfig+0x248>)
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d909      	bls.n	80047ba <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047a6:	4b4c      	ldr	r3, [pc, #304]	; (80048d8 <HAL_RCC_ClockConfig+0x244>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047ae:	4a4a      	ldr	r2, [pc, #296]	; (80048d8 <HAL_RCC_ClockConfig+0x244>)
 80047b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80047b6:	2380      	movs	r3, #128	; 0x80
 80047b8:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047ba:	4b47      	ldr	r3, [pc, #284]	; (80048d8 <HAL_RCC_ClockConfig+0x244>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f023 0203 	bic.w	r2, r3, #3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	4944      	ldr	r1, [pc, #272]	; (80048d8 <HAL_RCC_ClockConfig+0x244>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047cc:	f7fc ffe4 	bl	8001798 <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047d2:	e00a      	b.n	80047ea <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047d4:	f7fc ffe0 	bl	8001798 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e070      	b.n	80048cc <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ea:	4b3b      	ldr	r3, [pc, #236]	; (80048d8 <HAL_RCC_ClockConfig+0x244>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f003 020c 	and.w	r2, r3, #12
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d1eb      	bne.n	80047d4 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d009      	beq.n	800481c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004808:	4b33      	ldr	r3, [pc, #204]	; (80048d8 <HAL_RCC_ClockConfig+0x244>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	4930      	ldr	r1, [pc, #192]	; (80048d8 <HAL_RCC_ClockConfig+0x244>)
 8004816:	4313      	orrs	r3, r2
 8004818:	608b      	str	r3, [r1, #8]
 800481a:	e008      	b.n	800482e <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	2b80      	cmp	r3, #128	; 0x80
 8004820:	d105      	bne.n	800482e <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004822:	4b2d      	ldr	r3, [pc, #180]	; (80048d8 <HAL_RCC_ClockConfig+0x244>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	4a2c      	ldr	r2, [pc, #176]	; (80048d8 <HAL_RCC_ClockConfig+0x244>)
 8004828:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800482c:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800482e:	4b29      	ldr	r3, [pc, #164]	; (80048d4 <HAL_RCC_ClockConfig+0x240>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 030f 	and.w	r3, r3, #15
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	429a      	cmp	r2, r3
 800483a:	d210      	bcs.n	800485e <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800483c:	4b25      	ldr	r3, [pc, #148]	; (80048d4 <HAL_RCC_ClockConfig+0x240>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f023 020f 	bic.w	r2, r3, #15
 8004844:	4923      	ldr	r1, [pc, #140]	; (80048d4 <HAL_RCC_ClockConfig+0x240>)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	4313      	orrs	r3, r2
 800484a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800484c:	4b21      	ldr	r3, [pc, #132]	; (80048d4 <HAL_RCC_ClockConfig+0x240>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 030f 	and.w	r3, r3, #15
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	429a      	cmp	r2, r3
 8004858:	d001      	beq.n	800485e <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e036      	b.n	80048cc <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0304 	and.w	r3, r3, #4
 8004866:	2b00      	cmp	r3, #0
 8004868:	d008      	beq.n	800487c <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800486a:	4b1b      	ldr	r3, [pc, #108]	; (80048d8 <HAL_RCC_ClockConfig+0x244>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	4918      	ldr	r1, [pc, #96]	; (80048d8 <HAL_RCC_ClockConfig+0x244>)
 8004878:	4313      	orrs	r3, r2
 800487a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0308 	and.w	r3, r3, #8
 8004884:	2b00      	cmp	r3, #0
 8004886:	d009      	beq.n	800489c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004888:	4b13      	ldr	r3, [pc, #76]	; (80048d8 <HAL_RCC_ClockConfig+0x244>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	00db      	lsls	r3, r3, #3
 8004896:	4910      	ldr	r1, [pc, #64]	; (80048d8 <HAL_RCC_ClockConfig+0x244>)
 8004898:	4313      	orrs	r3, r2
 800489a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800489c:	f000 f826 	bl	80048ec <HAL_RCC_GetSysClockFreq>
 80048a0:	4601      	mov	r1, r0
 80048a2:	4b0d      	ldr	r3, [pc, #52]	; (80048d8 <HAL_RCC_ClockConfig+0x244>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	091b      	lsrs	r3, r3, #4
 80048a8:	f003 030f 	and.w	r3, r3, #15
 80048ac:	4a0c      	ldr	r2, [pc, #48]	; (80048e0 <HAL_RCC_ClockConfig+0x24c>)
 80048ae:	5cd3      	ldrb	r3, [r2, r3]
 80048b0:	f003 031f 	and.w	r3, r3, #31
 80048b4:	fa21 f303 	lsr.w	r3, r1, r3
 80048b8:	4a0a      	ldr	r2, [pc, #40]	; (80048e4 <HAL_RCC_ClockConfig+0x250>)
 80048ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80048bc:	4b0a      	ldr	r3, [pc, #40]	; (80048e8 <HAL_RCC_ClockConfig+0x254>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7fc ff19 	bl	80016f8 <HAL_InitTick>
 80048c6:	4603      	mov	r3, r0
 80048c8:	73fb      	strb	r3, [r7, #15]

  return status;
 80048ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3718      	adds	r7, #24
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	40022000 	.word	0x40022000
 80048d8:	40021000 	.word	0x40021000
 80048dc:	04c4b400 	.word	0x04c4b400
 80048e0:	08006340 	.word	0x08006340
 80048e4:	20000000 	.word	0x20000000
 80048e8:	20000004 	.word	0x20000004

080048ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b089      	sub	sp, #36	; 0x24
 80048f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80048f2:	2300      	movs	r3, #0
 80048f4:	61fb      	str	r3, [r7, #28]
 80048f6:	2300      	movs	r3, #0
 80048f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048fa:	4b3d      	ldr	r3, [pc, #244]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 030c 	and.w	r3, r3, #12
 8004902:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004904:	4b3a      	ldr	r3, [pc, #232]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x104>)
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f003 0303 	and.w	r3, r3, #3
 800490c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d005      	beq.n	8004920 <HAL_RCC_GetSysClockFreq+0x34>
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	2b0c      	cmp	r3, #12
 8004918:	d121      	bne.n	800495e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d11e      	bne.n	800495e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004920:	4b33      	ldr	r3, [pc, #204]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x104>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0308 	and.w	r3, r3, #8
 8004928:	2b00      	cmp	r3, #0
 800492a:	d107      	bne.n	800493c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800492c:	4b30      	ldr	r3, [pc, #192]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x104>)
 800492e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004932:	0a1b      	lsrs	r3, r3, #8
 8004934:	f003 030f 	and.w	r3, r3, #15
 8004938:	61fb      	str	r3, [r7, #28]
 800493a:	e005      	b.n	8004948 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800493c:	4b2c      	ldr	r3, [pc, #176]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x104>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	091b      	lsrs	r3, r3, #4
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004948:	4a2a      	ldr	r2, [pc, #168]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004950:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10d      	bne.n	8004974 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800495c:	e00a      	b.n	8004974 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	2b04      	cmp	r3, #4
 8004962:	d102      	bne.n	800496a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004964:	4b24      	ldr	r3, [pc, #144]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004966:	61bb      	str	r3, [r7, #24]
 8004968:	e004      	b.n	8004974 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	2b08      	cmp	r3, #8
 800496e:	d101      	bne.n	8004974 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004970:	4b22      	ldr	r3, [pc, #136]	; (80049fc <HAL_RCC_GetSysClockFreq+0x110>)
 8004972:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	2b0c      	cmp	r3, #12
 8004978:	d133      	bne.n	80049e2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800497a:	4b1d      	ldr	r3, [pc, #116]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x104>)
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	f003 0303 	and.w	r3, r3, #3
 8004982:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2b02      	cmp	r3, #2
 8004988:	d002      	beq.n	8004990 <HAL_RCC_GetSysClockFreq+0xa4>
 800498a:	2b03      	cmp	r3, #3
 800498c:	d003      	beq.n	8004996 <HAL_RCC_GetSysClockFreq+0xaa>
 800498e:	e005      	b.n	800499c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004990:	4b19      	ldr	r3, [pc, #100]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004992:	617b      	str	r3, [r7, #20]
      break;
 8004994:	e005      	b.n	80049a2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004996:	4b19      	ldr	r3, [pc, #100]	; (80049fc <HAL_RCC_GetSysClockFreq+0x110>)
 8004998:	617b      	str	r3, [r7, #20]
      break;
 800499a:	e002      	b.n	80049a2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	617b      	str	r3, [r7, #20]
      break;
 80049a0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049a2:	4b13      	ldr	r3, [pc, #76]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	091b      	lsrs	r3, r3, #4
 80049a8:	f003 030f 	and.w	r3, r3, #15
 80049ac:	3301      	adds	r3, #1
 80049ae:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80049b0:	4b0f      	ldr	r3, [pc, #60]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	0a1b      	lsrs	r3, r3, #8
 80049b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	fb02 f203 	mul.w	r2, r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049c8:	4b09      	ldr	r3, [pc, #36]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	0e5b      	lsrs	r3, r3, #25
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	3301      	adds	r3, #1
 80049d4:	005b      	lsls	r3, r3, #1
 80049d6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80049e2:	69bb      	ldr	r3, [r7, #24]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3724      	adds	r7, #36	; 0x24
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	40021000 	.word	0x40021000
 80049f4:	08006358 	.word	0x08006358
 80049f8:	00f42400 	.word	0x00f42400
 80049fc:	007a1200 	.word	0x007a1200

08004a00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a00:	b480      	push	{r7}
 8004a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a04:	4b03      	ldr	r3, [pc, #12]	; (8004a14 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a06:	681b      	ldr	r3, [r3, #0]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	20000000 	.word	0x20000000

08004a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a1c:	f7ff fff0 	bl	8004a00 <HAL_RCC_GetHCLKFreq>
 8004a20:	4601      	mov	r1, r0
 8004a22:	4b06      	ldr	r3, [pc, #24]	; (8004a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	0a1b      	lsrs	r3, r3, #8
 8004a28:	f003 0307 	and.w	r3, r3, #7
 8004a2c:	4a04      	ldr	r2, [pc, #16]	; (8004a40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a2e:	5cd3      	ldrb	r3, [r2, r3]
 8004a30:	f003 031f 	and.w	r3, r3, #31
 8004a34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	40021000 	.word	0x40021000
 8004a40:	08006350 	.word	0x08006350

08004a44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a48:	f7ff ffda 	bl	8004a00 <HAL_RCC_GetHCLKFreq>
 8004a4c:	4601      	mov	r1, r0
 8004a4e:	4b06      	ldr	r3, [pc, #24]	; (8004a68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	0adb      	lsrs	r3, r3, #11
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	4a04      	ldr	r2, [pc, #16]	; (8004a6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a5a:	5cd3      	ldrb	r3, [r2, r3]
 8004a5c:	f003 031f 	and.w	r3, r3, #31
 8004a60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	08006350 	.word	0x08006350

08004a70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004a78:	2300      	movs	r3, #0
 8004a7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004a7c:	4b27      	ldr	r3, [pc, #156]	; (8004b1c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d003      	beq.n	8004a90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004a88:	f7ff f91a 	bl	8003cc0 <HAL_PWREx_GetVoltageRange>
 8004a8c:	6178      	str	r0, [r7, #20]
 8004a8e:	e014      	b.n	8004aba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a90:	4b22      	ldr	r3, [pc, #136]	; (8004b1c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a94:	4a21      	ldr	r2, [pc, #132]	; (8004b1c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a9a:	6593      	str	r3, [r2, #88]	; 0x58
 8004a9c:	4b1f      	ldr	r3, [pc, #124]	; (8004b1c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aa4:	60fb      	str	r3, [r7, #12]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004aa8:	f7ff f90a 	bl	8003cc0 <HAL_PWREx_GetVoltageRange>
 8004aac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004aae:	4b1b      	ldr	r3, [pc, #108]	; (8004b1c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab2:	4a1a      	ldr	r2, [pc, #104]	; (8004b1c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ab8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ac0:	d10b      	bne.n	8004ada <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b80      	cmp	r3, #128	; 0x80
 8004ac6:	d913      	bls.n	8004af0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2ba0      	cmp	r3, #160	; 0xa0
 8004acc:	d902      	bls.n	8004ad4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ace:	2302      	movs	r3, #2
 8004ad0:	613b      	str	r3, [r7, #16]
 8004ad2:	e00d      	b.n	8004af0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	613b      	str	r3, [r7, #16]
 8004ad8:	e00a      	b.n	8004af0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b7f      	cmp	r3, #127	; 0x7f
 8004ade:	d902      	bls.n	8004ae6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	613b      	str	r3, [r7, #16]
 8004ae4:	e004      	b.n	8004af0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2b70      	cmp	r3, #112	; 0x70
 8004aea:	d101      	bne.n	8004af0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004aec:	2301      	movs	r3, #1
 8004aee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004af0:	4b0b      	ldr	r3, [pc, #44]	; (8004b20 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f023 020f 	bic.w	r2, r3, #15
 8004af8:	4909      	ldr	r1, [pc, #36]	; (8004b20 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004b00:	4b07      	ldr	r3, [pc, #28]	; (8004b20 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 030f 	and.w	r3, r3, #15
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d001      	beq.n	8004b12 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e000      	b.n	8004b14 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3718      	adds	r7, #24
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	40022000 	.word	0x40022000

08004b24 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b087      	sub	sp, #28
 8004b28:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8004b2e:	4b2d      	ldr	r3, [pc, #180]	; (8004be4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	f003 0303 	and.w	r3, r3, #3
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d118      	bne.n	8004b6c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b3a:	4b2a      	ldr	r3, [pc, #168]	; (8004be4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0308 	and.w	r3, r3, #8
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d107      	bne.n	8004b56 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b46:	4b27      	ldr	r3, [pc, #156]	; (8004be4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b4c:	0a1b      	lsrs	r3, r3, #8
 8004b4e:	f003 030f 	and.w	r3, r3, #15
 8004b52:	617b      	str	r3, [r7, #20]
 8004b54:	e005      	b.n	8004b62 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b56:	4b23      	ldr	r3, [pc, #140]	; (8004be4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	091b      	lsrs	r3, r3, #4
 8004b5c:	f003 030f 	and.w	r3, r3, #15
 8004b60:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b62:	4a21      	ldr	r2, [pc, #132]	; (8004be8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b6a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b6c:	4b1d      	ldr	r3, [pc, #116]	; (8004be4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f003 0303 	and.w	r3, r3, #3
 8004b74:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d002      	beq.n	8004b82 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8004b7c:	2b03      	cmp	r3, #3
 8004b7e:	d003      	beq.n	8004b88 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8004b80:	e005      	b.n	8004b8e <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004b82:	4b1a      	ldr	r3, [pc, #104]	; (8004bec <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004b84:	613b      	str	r3, [r7, #16]
    break;
 8004b86:	e005      	b.n	8004b94 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004b88:	4b19      	ldr	r3, [pc, #100]	; (8004bf0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004b8a:	613b      	str	r3, [r7, #16]
    break;
 8004b8c:	e002      	b.n	8004b94 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	613b      	str	r3, [r7, #16]
    break;
 8004b92:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b94:	4b13      	ldr	r3, [pc, #76]	; (8004be4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	091b      	lsrs	r3, r3, #4
 8004b9a:	f003 030f 	and.w	r3, r3, #15
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ba2:	4b10      	ldr	r3, [pc, #64]	; (8004be4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	0a1b      	lsrs	r3, r3, #8
 8004ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	fb02 f203 	mul.w	r2, r2, r3
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb8:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004bba:	4b0a      	ldr	r3, [pc, #40]	; (8004be4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	0e5b      	lsrs	r3, r3, #25
 8004bc0:	f003 0303 	and.w	r3, r3, #3
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd2:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004bd4:	683b      	ldr	r3, [r7, #0]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	371c      	adds	r7, #28
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	40021000 	.word	0x40021000
 8004be8:	08006358 	.word	0x08006358
 8004bec:	00f42400 	.word	0x00f42400
 8004bf0:	007a1200 	.word	0x007a1200

08004bf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c00:	2300      	movs	r3, #0
 8004c02:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d03d      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c14:	2b40      	cmp	r3, #64	; 0x40
 8004c16:	d00b      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8004c18:	2b40      	cmp	r3, #64	; 0x40
 8004c1a:	d804      	bhi.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00e      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8004c20:	2b20      	cmp	r3, #32
 8004c22:	d015      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004c24:	e01d      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004c26:	2b60      	cmp	r3, #96	; 0x60
 8004c28:	d01e      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004c2a:	2b80      	cmp	r3, #128	; 0x80
 8004c2c:	d01c      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004c2e:	e018      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c30:	4b86      	ldr	r3, [pc, #536]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	4a85      	ldr	r2, [pc, #532]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c3a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c3c:	e015      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	3304      	adds	r3, #4
 8004c42:	2100      	movs	r1, #0
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 fb0d 	bl	8005264 <RCCEx_PLLSAI1_Config>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c4e:	e00c      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	3320      	adds	r3, #32
 8004c54:	2100      	movs	r1, #0
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 fbf4 	bl	8005444 <RCCEx_PLLSAI2_Config>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c60:	e003      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	74fb      	strb	r3, [r7, #19]
      break;
 8004c66:	e000      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8004c68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c6a:	7cfb      	ldrb	r3, [r7, #19]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10b      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c70:	4b76      	ldr	r3, [pc, #472]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c76:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c7e:	4973      	ldr	r1, [pc, #460]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004c86:	e001      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c88:	7cfb      	ldrb	r3, [r7, #19]
 8004c8a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d042      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ca0:	d00f      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8004ca2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ca6:	d805      	bhi.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d011      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8004cac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cb0:	d017      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8004cb2:	e01f      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8004cb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cb8:	d01f      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cbe:	d01c      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004cc0:	e018      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004cc2:	4b62      	ldr	r3, [pc, #392]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	4a61      	ldr	r2, [pc, #388]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ccc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004cce:	e015      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	3304      	adds	r3, #4
 8004cd4:	2100      	movs	r1, #0
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 fac4 	bl	8005264 <RCCEx_PLLSAI1_Config>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ce0:	e00c      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	3320      	adds	r3, #32
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f000 fbab 	bl	8005444 <RCCEx_PLLSAI2_Config>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004cf2:	e003      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	74fb      	strb	r3, [r7, #19]
      break;
 8004cf8:	e000      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8004cfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cfc:	7cfb      	ldrb	r3, [r7, #19]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10b      	bne.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d02:	4b52      	ldr	r3, [pc, #328]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d10:	494e      	ldr	r1, [pc, #312]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004d18:	e001      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d1a:	7cfb      	ldrb	r3, [r7, #19]
 8004d1c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f000 809f 	beq.w	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d30:	4b46      	ldr	r3, [pc, #280]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e000      	b.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004d40:	2300      	movs	r3, #0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00d      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d46:	4b41      	ldr	r3, [pc, #260]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d4a:	4a40      	ldr	r2, [pc, #256]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d50:	6593      	str	r3, [r2, #88]	; 0x58
 8004d52:	4b3e      	ldr	r3, [pc, #248]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d5a:	60bb      	str	r3, [r7, #8]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d62:	4b3b      	ldr	r3, [pc, #236]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a3a      	ldr	r2, [pc, #232]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d6e:	f7fc fd13 	bl	8001798 <HAL_GetTick>
 8004d72:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d74:	e009      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d76:	f7fc fd0f 	bl	8001798 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d902      	bls.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	74fb      	strb	r3, [r7, #19]
        break;
 8004d88:	e005      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d8a:	4b31      	ldr	r3, [pc, #196]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d0ef      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8004d96:	7cfb      	ldrb	r3, [r7, #19]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d15b      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d9c:	4b2b      	ldr	r3, [pc, #172]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004da6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d01f      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d019      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004dba:	4b24      	ldr	r3, [pc, #144]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dc4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004dc6:	4b21      	ldr	r3, [pc, #132]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dcc:	4a1f      	ldr	r2, [pc, #124]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004dce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004dd6:	4b1d      	ldr	r3, [pc, #116]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ddc:	4a1b      	ldr	r2, [pc, #108]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004de2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004de6:	4a19      	ldr	r2, [pc, #100]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d016      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df8:	f7fc fcce 	bl	8001798 <HAL_GetTick>
 8004dfc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dfe:	e00b      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e00:	f7fc fcca 	bl	8001798 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d902      	bls.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	74fb      	strb	r3, [r7, #19]
            break;
 8004e16:	e006      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e18:	4b0c      	ldr	r3, [pc, #48]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d0ec      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8004e26:	7cfb      	ldrb	r3, [r7, #19]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10c      	bne.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e2c:	4b07      	ldr	r3, [pc, #28]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e3c:	4903      	ldr	r1, [pc, #12]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e44:	e008      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e46:	7cfb      	ldrb	r3, [r7, #19]
 8004e48:	74bb      	strb	r3, [r7, #18]
 8004e4a:	e005      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004e4c:	40021000 	.word	0x40021000
 8004e50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e54:	7cfb      	ldrb	r3, [r7, #19]
 8004e56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e58:	7c7b      	ldrb	r3, [r7, #17]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d105      	bne.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e5e:	4ba0      	ldr	r3, [pc, #640]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e62:	4a9f      	ldr	r2, [pc, #636]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e68:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00a      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e76:	4b9a      	ldr	r3, [pc, #616]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7c:	f023 0203 	bic.w	r2, r3, #3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e84:	4996      	ldr	r1, [pc, #600]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00a      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e98:	4b91      	ldr	r3, [pc, #580]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9e:	f023 020c 	bic.w	r2, r3, #12
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea6:	498e      	ldr	r1, [pc, #568]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0304 	and.w	r3, r3, #4
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00a      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004eba:	4b89      	ldr	r3, [pc, #548]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec8:	4985      	ldr	r1, [pc, #532]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0308 	and.w	r3, r3, #8
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00a      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004edc:	4b80      	ldr	r3, [pc, #512]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eea:	497d      	ldr	r1, [pc, #500]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0310 	and.w	r3, r3, #16
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00a      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004efe:	4b78      	ldr	r3, [pc, #480]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f0c:	4974      	ldr	r1, [pc, #464]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0320 	and.w	r3, r3, #32
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00a      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f20:	4b6f      	ldr	r3, [pc, #444]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f26:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f2e:	496c      	ldr	r1, [pc, #432]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00a      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f42:	4b67      	ldr	r3, [pc, #412]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f50:	4963      	ldr	r1, [pc, #396]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00a      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f64:	4b5e      	ldr	r3, [pc, #376]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f72:	495b      	ldr	r1, [pc, #364]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00a      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f86:	4b56      	ldr	r3, [pc, #344]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f94:	4952      	ldr	r1, [pc, #328]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00a      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004fa8:	4b4d      	ldr	r3, [pc, #308]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb6:	494a      	ldr	r1, [pc, #296]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00a      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004fca:	4b45      	ldr	r3, [pc, #276]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd8:	4941      	ldr	r1, [pc, #260]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00a      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004fec:	4b3c      	ldr	r3, [pc, #240]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ff2:	f023 0203 	bic.w	r2, r3, #3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ffa:	4939      	ldr	r1, [pc, #228]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d028      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800500e:	4b34      	ldr	r3, [pc, #208]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005014:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800501c:	4930      	ldr	r1, [pc, #192]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800501e:	4313      	orrs	r3, r2
 8005020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005028:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800502c:	d106      	bne.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800502e:	4b2c      	ldr	r3, [pc, #176]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	4a2b      	ldr	r2, [pc, #172]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005034:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005038:	60d3      	str	r3, [r2, #12]
 800503a:	e011      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005040:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005044:	d10c      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	3304      	adds	r3, #4
 800504a:	2101      	movs	r1, #1
 800504c:	4618      	mov	r0, r3
 800504e:	f000 f909 	bl	8005264 <RCCEx_PLLSAI1_Config>
 8005052:	4603      	mov	r3, r0
 8005054:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005056:	7cfb      	ldrb	r3, [r7, #19]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d001      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 800505c:	7cfb      	ldrb	r3, [r7, #19]
 800505e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d04d      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005070:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005074:	d108      	bne.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005076:	4b1a      	ldr	r3, [pc, #104]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005078:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800507c:	4a18      	ldr	r2, [pc, #96]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800507e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005082:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005086:	e012      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8005088:	4b15      	ldr	r3, [pc, #84]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800508a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800508e:	4a14      	ldr	r2, [pc, #80]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005090:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005094:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005098:	4b11      	ldr	r3, [pc, #68]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800509a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800509e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050a6:	490e      	ldr	r1, [pc, #56]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050b6:	d106      	bne.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050b8:	4b09      	ldr	r3, [pc, #36]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	4a08      	ldr	r2, [pc, #32]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050c2:	60d3      	str	r3, [r2, #12]
 80050c4:	e020      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050ce:	d109      	bne.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050d0:	4b03      	ldr	r3, [pc, #12]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	4a02      	ldr	r2, [pc, #8]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050da:	60d3      	str	r3, [r2, #12]
 80050dc:	e014      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80050de:	bf00      	nop
 80050e0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050ec:	d10c      	bne.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	3304      	adds	r3, #4
 80050f2:	2101      	movs	r1, #1
 80050f4:	4618      	mov	r0, r3
 80050f6:	f000 f8b5 	bl	8005264 <RCCEx_PLLSAI1_Config>
 80050fa:	4603      	mov	r3, r0
 80050fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050fe:	7cfb      	ldrb	r3, [r7, #19]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005104:	7cfb      	ldrb	r3, [r7, #19]
 8005106:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d028      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005114:	4b4a      	ldr	r3, [pc, #296]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005122:	4947      	ldr	r1, [pc, #284]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005124:	4313      	orrs	r3, r2
 8005126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800512e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005132:	d106      	bne.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005134:	4b42      	ldr	r3, [pc, #264]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	4a41      	ldr	r2, [pc, #260]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800513a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800513e:	60d3      	str	r3, [r2, #12]
 8005140:	e011      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005146:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800514a:	d10c      	bne.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	3304      	adds	r3, #4
 8005150:	2101      	movs	r1, #1
 8005152:	4618      	mov	r0, r3
 8005154:	f000 f886 	bl	8005264 <RCCEx_PLLSAI1_Config>
 8005158:	4603      	mov	r3, r0
 800515a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800515c:	7cfb      	ldrb	r3, [r7, #19]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d001      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8005162:	7cfb      	ldrb	r3, [r7, #19]
 8005164:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d01e      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005172:	4b33      	ldr	r3, [pc, #204]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005178:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005182:	492f      	ldr	r1, [pc, #188]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005184:	4313      	orrs	r3, r2
 8005186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005190:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005194:	d10c      	bne.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	3304      	adds	r3, #4
 800519a:	2102      	movs	r1, #2
 800519c:	4618      	mov	r0, r3
 800519e:	f000 f861 	bl	8005264 <RCCEx_PLLSAI1_Config>
 80051a2:	4603      	mov	r3, r0
 80051a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051a6:	7cfb      	ldrb	r3, [r7, #19]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d001      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 80051ac:	7cfb      	ldrb	r3, [r7, #19]
 80051ae:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00b      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80051bc:	4b20      	ldr	r3, [pc, #128]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80051be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051c2:	f023 0204 	bic.w	r2, r3, #4
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051cc:	491c      	ldr	r1, [pc, #112]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00b      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80051e0:	4b17      	ldr	r3, [pc, #92]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80051e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051e6:	f023 0218 	bic.w	r2, r3, #24
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f0:	4913      	ldr	r1, [pc, #76]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d017      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005204:	4b0e      	ldr	r3, [pc, #56]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005206:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800520a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005214:	490a      	ldr	r1, [pc, #40]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005216:	4313      	orrs	r3, r2
 8005218:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005222:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005226:	d105      	bne.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005228:	4b05      	ldr	r3, [pc, #20]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	4a04      	ldr	r2, [pc, #16]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800522e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005232:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005234:	7cbb      	ldrb	r3, [r7, #18]
}
 8005236:	4618      	mov	r0, r3
 8005238:	3718      	adds	r7, #24
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	40021000 	.word	0x40021000

08005244 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005244:	b480      	push	{r7}
 8005246:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005248:	4b05      	ldr	r3, [pc, #20]	; (8005260 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a04      	ldr	r2, [pc, #16]	; (8005260 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800524e:	f043 0304 	orr.w	r3, r3, #4
 8005252:	6013      	str	r3, [r2, #0]
}
 8005254:	bf00      	nop
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	40021000 	.word	0x40021000

08005264 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800526e:	2300      	movs	r3, #0
 8005270:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005272:	4b70      	ldr	r3, [pc, #448]	; (8005434 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00e      	beq.n	800529c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800527e:	4b6d      	ldr	r3, [pc, #436]	; (8005434 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	f003 0203 	and.w	r2, r3, #3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	429a      	cmp	r2, r3
 800528c:	d103      	bne.n	8005296 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
       ||
 8005292:	2b00      	cmp	r3, #0
 8005294:	d13f      	bne.n	8005316 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	73fb      	strb	r3, [r7, #15]
 800529a:	e03c      	b.n	8005316 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d00c      	beq.n	80052be <RCCEx_PLLSAI1_Config+0x5a>
 80052a4:	2b03      	cmp	r3, #3
 80052a6:	d013      	beq.n	80052d0 <RCCEx_PLLSAI1_Config+0x6c>
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d120      	bne.n	80052ee <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80052ac:	4b61      	ldr	r3, [pc, #388]	; (8005434 <RCCEx_PLLSAI1_Config+0x1d0>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d11d      	bne.n	80052f4 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052bc:	e01a      	b.n	80052f4 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80052be:	4b5d      	ldr	r3, [pc, #372]	; (8005434 <RCCEx_PLLSAI1_Config+0x1d0>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d116      	bne.n	80052f8 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052ce:	e013      	b.n	80052f8 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80052d0:	4b58      	ldr	r3, [pc, #352]	; (8005434 <RCCEx_PLLSAI1_Config+0x1d0>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10f      	bne.n	80052fc <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80052dc:	4b55      	ldr	r3, [pc, #340]	; (8005434 <RCCEx_PLLSAI1_Config+0x1d0>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d109      	bne.n	80052fc <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80052ec:	e006      	b.n	80052fc <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	73fb      	strb	r3, [r7, #15]
      break;
 80052f2:	e004      	b.n	80052fe <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80052f4:	bf00      	nop
 80052f6:	e002      	b.n	80052fe <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80052f8:	bf00      	nop
 80052fa:	e000      	b.n	80052fe <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80052fc:	bf00      	nop
    }

    if(status == HAL_OK)
 80052fe:	7bfb      	ldrb	r3, [r7, #15]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d108      	bne.n	8005316 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005304:	4b4b      	ldr	r3, [pc, #300]	; (8005434 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f023 0203 	bic.w	r2, r3, #3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4948      	ldr	r1, [pc, #288]	; (8005434 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005312:	4313      	orrs	r3, r2
 8005314:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005316:	7bfb      	ldrb	r3, [r7, #15]
 8005318:	2b00      	cmp	r3, #0
 800531a:	f040 8086 	bne.w	800542a <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800531e:	4b45      	ldr	r3, [pc, #276]	; (8005434 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a44      	ldr	r2, [pc, #272]	; (8005434 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005324:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005328:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800532a:	f7fc fa35 	bl	8001798 <HAL_GetTick>
 800532e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005330:	e009      	b.n	8005346 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005332:	f7fc fa31 	bl	8001798 <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	2b02      	cmp	r3, #2
 800533e:	d902      	bls.n	8005346 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	73fb      	strb	r3, [r7, #15]
        break;
 8005344:	e005      	b.n	8005352 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005346:	4b3b      	ldr	r3, [pc, #236]	; (8005434 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1ef      	bne.n	8005332 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8005352:	7bfb      	ldrb	r3, [r7, #15]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d168      	bne.n	800542a <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d113      	bne.n	8005386 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800535e:	4b35      	ldr	r3, [pc, #212]	; (8005434 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005360:	691a      	ldr	r2, [r3, #16]
 8005362:	4b35      	ldr	r3, [pc, #212]	; (8005438 <RCCEx_PLLSAI1_Config+0x1d4>)
 8005364:	4013      	ands	r3, r2
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	6892      	ldr	r2, [r2, #8]
 800536a:	0211      	lsls	r1, r2, #8
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	68d2      	ldr	r2, [r2, #12]
 8005370:	06d2      	lsls	r2, r2, #27
 8005372:	4311      	orrs	r1, r2
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	6852      	ldr	r2, [r2, #4]
 8005378:	3a01      	subs	r2, #1
 800537a:	0112      	lsls	r2, r2, #4
 800537c:	430a      	orrs	r2, r1
 800537e:	492d      	ldr	r1, [pc, #180]	; (8005434 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005380:	4313      	orrs	r3, r2
 8005382:	610b      	str	r3, [r1, #16]
 8005384:	e02d      	b.n	80053e2 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d115      	bne.n	80053b8 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800538c:	4b29      	ldr	r3, [pc, #164]	; (8005434 <RCCEx_PLLSAI1_Config+0x1d0>)
 800538e:	691a      	ldr	r2, [r3, #16]
 8005390:	4b2a      	ldr	r3, [pc, #168]	; (800543c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005392:	4013      	ands	r3, r2
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	6892      	ldr	r2, [r2, #8]
 8005398:	0211      	lsls	r1, r2, #8
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	6912      	ldr	r2, [r2, #16]
 800539e:	0852      	lsrs	r2, r2, #1
 80053a0:	3a01      	subs	r2, #1
 80053a2:	0552      	lsls	r2, r2, #21
 80053a4:	4311      	orrs	r1, r2
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	6852      	ldr	r2, [r2, #4]
 80053aa:	3a01      	subs	r2, #1
 80053ac:	0112      	lsls	r2, r2, #4
 80053ae:	430a      	orrs	r2, r1
 80053b0:	4920      	ldr	r1, [pc, #128]	; (8005434 <RCCEx_PLLSAI1_Config+0x1d0>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	610b      	str	r3, [r1, #16]
 80053b6:	e014      	b.n	80053e2 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053b8:	4b1e      	ldr	r3, [pc, #120]	; (8005434 <RCCEx_PLLSAI1_Config+0x1d0>)
 80053ba:	691a      	ldr	r2, [r3, #16]
 80053bc:	4b20      	ldr	r3, [pc, #128]	; (8005440 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053be:	4013      	ands	r3, r2
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	6892      	ldr	r2, [r2, #8]
 80053c4:	0211      	lsls	r1, r2, #8
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	6952      	ldr	r2, [r2, #20]
 80053ca:	0852      	lsrs	r2, r2, #1
 80053cc:	3a01      	subs	r2, #1
 80053ce:	0652      	lsls	r2, r2, #25
 80053d0:	4311      	orrs	r1, r2
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	6852      	ldr	r2, [r2, #4]
 80053d6:	3a01      	subs	r2, #1
 80053d8:	0112      	lsls	r2, r2, #4
 80053da:	430a      	orrs	r2, r1
 80053dc:	4915      	ldr	r1, [pc, #84]	; (8005434 <RCCEx_PLLSAI1_Config+0x1d0>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80053e2:	4b14      	ldr	r3, [pc, #80]	; (8005434 <RCCEx_PLLSAI1_Config+0x1d0>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a13      	ldr	r2, [pc, #76]	; (8005434 <RCCEx_PLLSAI1_Config+0x1d0>)
 80053e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053ec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ee:	f7fc f9d3 	bl	8001798 <HAL_GetTick>
 80053f2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053f4:	e009      	b.n	800540a <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053f6:	f7fc f9cf 	bl	8001798 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d902      	bls.n	800540a <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	73fb      	strb	r3, [r7, #15]
          break;
 8005408:	e005      	b.n	8005416 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800540a:	4b0a      	ldr	r3, [pc, #40]	; (8005434 <RCCEx_PLLSAI1_Config+0x1d0>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d0ef      	beq.n	80053f6 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8005416:	7bfb      	ldrb	r3, [r7, #15]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d106      	bne.n	800542a <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800541c:	4b05      	ldr	r3, [pc, #20]	; (8005434 <RCCEx_PLLSAI1_Config+0x1d0>)
 800541e:	691a      	ldr	r2, [r3, #16]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	4903      	ldr	r1, [pc, #12]	; (8005434 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005426:	4313      	orrs	r3, r2
 8005428:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800542a:	7bfb      	ldrb	r3, [r7, #15]
}
 800542c:	4618      	mov	r0, r3
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	40021000 	.word	0x40021000
 8005438:	07ff800f 	.word	0x07ff800f
 800543c:	ff9f800f 	.word	0xff9f800f
 8005440:	f9ff800f 	.word	0xf9ff800f

08005444 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800544e:	2300      	movs	r3, #0
 8005450:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005452:	4b70      	ldr	r3, [pc, #448]	; (8005614 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	f003 0303 	and.w	r3, r3, #3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00e      	beq.n	800547c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800545e:	4b6d      	ldr	r3, [pc, #436]	; (8005614 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	f003 0203 	and.w	r2, r3, #3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	429a      	cmp	r2, r3
 800546c:	d103      	bne.n	8005476 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
       ||
 8005472:	2b00      	cmp	r3, #0
 8005474:	d13f      	bne.n	80054f6 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	73fb      	strb	r3, [r7, #15]
 800547a:	e03c      	b.n	80054f6 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2b02      	cmp	r3, #2
 8005482:	d00c      	beq.n	800549e <RCCEx_PLLSAI2_Config+0x5a>
 8005484:	2b03      	cmp	r3, #3
 8005486:	d013      	beq.n	80054b0 <RCCEx_PLLSAI2_Config+0x6c>
 8005488:	2b01      	cmp	r3, #1
 800548a:	d120      	bne.n	80054ce <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800548c:	4b61      	ldr	r3, [pc, #388]	; (8005614 <RCCEx_PLLSAI2_Config+0x1d0>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d11d      	bne.n	80054d4 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800549c:	e01a      	b.n	80054d4 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800549e:	4b5d      	ldr	r3, [pc, #372]	; (8005614 <RCCEx_PLLSAI2_Config+0x1d0>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d116      	bne.n	80054d8 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054ae:	e013      	b.n	80054d8 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80054b0:	4b58      	ldr	r3, [pc, #352]	; (8005614 <RCCEx_PLLSAI2_Config+0x1d0>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10f      	bne.n	80054dc <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80054bc:	4b55      	ldr	r3, [pc, #340]	; (8005614 <RCCEx_PLLSAI2_Config+0x1d0>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d109      	bne.n	80054dc <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80054cc:	e006      	b.n	80054dc <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	73fb      	strb	r3, [r7, #15]
      break;
 80054d2:	e004      	b.n	80054de <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80054d4:	bf00      	nop
 80054d6:	e002      	b.n	80054de <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80054d8:	bf00      	nop
 80054da:	e000      	b.n	80054de <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80054dc:	bf00      	nop
    }

    if(status == HAL_OK)
 80054de:	7bfb      	ldrb	r3, [r7, #15]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d108      	bne.n	80054f6 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80054e4:	4b4b      	ldr	r3, [pc, #300]	; (8005614 <RCCEx_PLLSAI2_Config+0x1d0>)
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f023 0203 	bic.w	r2, r3, #3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4948      	ldr	r1, [pc, #288]	; (8005614 <RCCEx_PLLSAI2_Config+0x1d0>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80054f6:	7bfb      	ldrb	r3, [r7, #15]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f040 8086 	bne.w	800560a <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80054fe:	4b45      	ldr	r3, [pc, #276]	; (8005614 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a44      	ldr	r2, [pc, #272]	; (8005614 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005508:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800550a:	f7fc f945 	bl	8001798 <HAL_GetTick>
 800550e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005510:	e009      	b.n	8005526 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005512:	f7fc f941 	bl	8001798 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d902      	bls.n	8005526 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	73fb      	strb	r3, [r7, #15]
        break;
 8005524:	e005      	b.n	8005532 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005526:	4b3b      	ldr	r3, [pc, #236]	; (8005614 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1ef      	bne.n	8005512 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8005532:	7bfb      	ldrb	r3, [r7, #15]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d168      	bne.n	800560a <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d113      	bne.n	8005566 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800553e:	4b35      	ldr	r3, [pc, #212]	; (8005614 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005540:	695a      	ldr	r2, [r3, #20]
 8005542:	4b35      	ldr	r3, [pc, #212]	; (8005618 <RCCEx_PLLSAI2_Config+0x1d4>)
 8005544:	4013      	ands	r3, r2
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	6892      	ldr	r2, [r2, #8]
 800554a:	0211      	lsls	r1, r2, #8
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	68d2      	ldr	r2, [r2, #12]
 8005550:	06d2      	lsls	r2, r2, #27
 8005552:	4311      	orrs	r1, r2
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	6852      	ldr	r2, [r2, #4]
 8005558:	3a01      	subs	r2, #1
 800555a:	0112      	lsls	r2, r2, #4
 800555c:	430a      	orrs	r2, r1
 800555e:	492d      	ldr	r1, [pc, #180]	; (8005614 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005560:	4313      	orrs	r3, r2
 8005562:	614b      	str	r3, [r1, #20]
 8005564:	e02d      	b.n	80055c2 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d115      	bne.n	8005598 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800556c:	4b29      	ldr	r3, [pc, #164]	; (8005614 <RCCEx_PLLSAI2_Config+0x1d0>)
 800556e:	695a      	ldr	r2, [r3, #20]
 8005570:	4b2a      	ldr	r3, [pc, #168]	; (800561c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005572:	4013      	ands	r3, r2
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	6892      	ldr	r2, [r2, #8]
 8005578:	0211      	lsls	r1, r2, #8
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	6912      	ldr	r2, [r2, #16]
 800557e:	0852      	lsrs	r2, r2, #1
 8005580:	3a01      	subs	r2, #1
 8005582:	0552      	lsls	r2, r2, #21
 8005584:	4311      	orrs	r1, r2
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	6852      	ldr	r2, [r2, #4]
 800558a:	3a01      	subs	r2, #1
 800558c:	0112      	lsls	r2, r2, #4
 800558e:	430a      	orrs	r2, r1
 8005590:	4920      	ldr	r1, [pc, #128]	; (8005614 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005592:	4313      	orrs	r3, r2
 8005594:	614b      	str	r3, [r1, #20]
 8005596:	e014      	b.n	80055c2 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005598:	4b1e      	ldr	r3, [pc, #120]	; (8005614 <RCCEx_PLLSAI2_Config+0x1d0>)
 800559a:	695a      	ldr	r2, [r3, #20]
 800559c:	4b20      	ldr	r3, [pc, #128]	; (8005620 <RCCEx_PLLSAI2_Config+0x1dc>)
 800559e:	4013      	ands	r3, r2
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	6892      	ldr	r2, [r2, #8]
 80055a4:	0211      	lsls	r1, r2, #8
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	6952      	ldr	r2, [r2, #20]
 80055aa:	0852      	lsrs	r2, r2, #1
 80055ac:	3a01      	subs	r2, #1
 80055ae:	0652      	lsls	r2, r2, #25
 80055b0:	4311      	orrs	r1, r2
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	6852      	ldr	r2, [r2, #4]
 80055b6:	3a01      	subs	r2, #1
 80055b8:	0112      	lsls	r2, r2, #4
 80055ba:	430a      	orrs	r2, r1
 80055bc:	4915      	ldr	r1, [pc, #84]	; (8005614 <RCCEx_PLLSAI2_Config+0x1d0>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80055c2:	4b14      	ldr	r3, [pc, #80]	; (8005614 <RCCEx_PLLSAI2_Config+0x1d0>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a13      	ldr	r2, [pc, #76]	; (8005614 <RCCEx_PLLSAI2_Config+0x1d0>)
 80055c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055cc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ce:	f7fc f8e3 	bl	8001798 <HAL_GetTick>
 80055d2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80055d4:	e009      	b.n	80055ea <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80055d6:	f7fc f8df 	bl	8001798 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d902      	bls.n	80055ea <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	73fb      	strb	r3, [r7, #15]
          break;
 80055e8:	e005      	b.n	80055f6 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80055ea:	4b0a      	ldr	r3, [pc, #40]	; (8005614 <RCCEx_PLLSAI2_Config+0x1d0>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d0ef      	beq.n	80055d6 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 80055f6:	7bfb      	ldrb	r3, [r7, #15]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d106      	bne.n	800560a <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80055fc:	4b05      	ldr	r3, [pc, #20]	; (8005614 <RCCEx_PLLSAI2_Config+0x1d0>)
 80055fe:	695a      	ldr	r2, [r3, #20]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	4903      	ldr	r1, [pc, #12]	; (8005614 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005606:	4313      	orrs	r3, r2
 8005608:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800560a:	7bfb      	ldrb	r3, [r7, #15]
}
 800560c:	4618      	mov	r0, r3
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	40021000 	.word	0x40021000
 8005618:	07ff800f 	.word	0x07ff800f
 800561c:	ff9f800f 	.word	0xff9f800f
 8005620:	f9ff800f 	.word	0xf9ff800f

08005624 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e095      	b.n	8005762 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563a:	2b00      	cmp	r3, #0
 800563c:	d108      	bne.n	8005650 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005646:	d009      	beq.n	800565c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	61da      	str	r2, [r3, #28]
 800564e:	e005      	b.n	800565c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d106      	bne.n	800567c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7fb fe20 	bl	80012bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005692:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800569c:	d902      	bls.n	80056a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800569e:	2300      	movs	r3, #0
 80056a0:	60fb      	str	r3, [r7, #12]
 80056a2:	e002      	b.n	80056aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80056a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80056b2:	d007      	beq.n	80056c4 <HAL_SPI_Init+0xa0>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056bc:	d002      	beq.n	80056c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80056d4:	431a      	orrs	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	431a      	orrs	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	431a      	orrs	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056f2:	431a      	orrs	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	69db      	ldr	r3, [r3, #28]
 80056f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056fc:	431a      	orrs	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005706:	ea42 0103 	orr.w	r1, r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	430a      	orrs	r2, r1
 8005718:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	0c1b      	lsrs	r3, r3, #16
 8005720:	f003 0204 	and.w	r2, r3, #4
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005728:	f003 0310 	and.w	r3, r3, #16
 800572c:	431a      	orrs	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005732:	f003 0308 	and.w	r3, r3, #8
 8005736:	431a      	orrs	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005740:	ea42 0103 	orr.w	r1, r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b082      	sub	sp, #8
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d101      	bne.n	800577c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e042      	b.n	8005802 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005782:	2b00      	cmp	r3, #0
 8005784:	d106      	bne.n	8005794 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7fb fe0a 	bl	80013a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2224      	movs	r2, #36	; 0x24
 8005798:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f022 0201 	bic.w	r2, r2, #1
 80057aa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 f82d 	bl	800580c <UART_SetConfig>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d101      	bne.n	80057bc <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e022      	b.n	8005802 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d002      	beq.n	80057ca <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 faf3 	bl	8005db0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057e8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f042 0201 	orr.w	r2, r2, #1
 80057f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 fb7a 	bl	8005ef4 <UART_CheckIdleState>
 8005800:	4603      	mov	r3, r0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3708      	adds	r7, #8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
	...

0800580c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800580c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005810:	b088      	sub	sp, #32
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005816:	2300      	movs	r3, #0
 8005818:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689a      	ldr	r2, [r3, #8]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	431a      	orrs	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	431a      	orrs	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	4313      	orrs	r3, r2
 8005830:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005836:	69fa      	ldr	r2, [r7, #28]
 8005838:	4313      	orrs	r3, r2
 800583a:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	4bb1      	ldr	r3, [pc, #708]	; (8005b08 <UART_SetConfig+0x2fc>)
 8005844:	4013      	ands	r3, r2
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	6812      	ldr	r2, [r2, #0]
 800584a:	69f9      	ldr	r1, [r7, #28]
 800584c:	430b      	orrs	r3, r1
 800584e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	68da      	ldr	r2, [r3, #12]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	430a      	orrs	r2, r1
 8005864:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4aa6      	ldr	r2, [pc, #664]	; (8005b0c <UART_SetConfig+0x300>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d004      	beq.n	8005880 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	69fa      	ldr	r2, [r7, #28]
 800587c:	4313      	orrs	r3, r2
 800587e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800588a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	6812      	ldr	r2, [r2, #0]
 8005892:	69f9      	ldr	r1, [r7, #28]
 8005894:	430b      	orrs	r3, r1
 8005896:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589e:	f023 010f 	bic.w	r1, r3, #15
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a97      	ldr	r2, [pc, #604]	; (8005b10 <UART_SetConfig+0x304>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d121      	bne.n	80058fc <UART_SetConfig+0xf0>
 80058b8:	4b96      	ldr	r3, [pc, #600]	; (8005b14 <UART_SetConfig+0x308>)
 80058ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058be:	f003 0303 	and.w	r3, r3, #3
 80058c2:	2b03      	cmp	r3, #3
 80058c4:	d816      	bhi.n	80058f4 <UART_SetConfig+0xe8>
 80058c6:	a201      	add	r2, pc, #4	; (adr r2, 80058cc <UART_SetConfig+0xc0>)
 80058c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058cc:	080058dd 	.word	0x080058dd
 80058d0:	080058e9 	.word	0x080058e9
 80058d4:	080058e3 	.word	0x080058e3
 80058d8:	080058ef 	.word	0x080058ef
 80058dc:	2301      	movs	r3, #1
 80058de:	76fb      	strb	r3, [r7, #27]
 80058e0:	e0e8      	b.n	8005ab4 <UART_SetConfig+0x2a8>
 80058e2:	2302      	movs	r3, #2
 80058e4:	76fb      	strb	r3, [r7, #27]
 80058e6:	e0e5      	b.n	8005ab4 <UART_SetConfig+0x2a8>
 80058e8:	2304      	movs	r3, #4
 80058ea:	76fb      	strb	r3, [r7, #27]
 80058ec:	e0e2      	b.n	8005ab4 <UART_SetConfig+0x2a8>
 80058ee:	2308      	movs	r3, #8
 80058f0:	76fb      	strb	r3, [r7, #27]
 80058f2:	e0df      	b.n	8005ab4 <UART_SetConfig+0x2a8>
 80058f4:	2310      	movs	r3, #16
 80058f6:	76fb      	strb	r3, [r7, #27]
 80058f8:	bf00      	nop
 80058fa:	e0db      	b.n	8005ab4 <UART_SetConfig+0x2a8>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a85      	ldr	r2, [pc, #532]	; (8005b18 <UART_SetConfig+0x30c>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d134      	bne.n	8005970 <UART_SetConfig+0x164>
 8005906:	4b83      	ldr	r3, [pc, #524]	; (8005b14 <UART_SetConfig+0x308>)
 8005908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800590c:	f003 030c 	and.w	r3, r3, #12
 8005910:	2b0c      	cmp	r3, #12
 8005912:	d829      	bhi.n	8005968 <UART_SetConfig+0x15c>
 8005914:	a201      	add	r2, pc, #4	; (adr r2, 800591c <UART_SetConfig+0x110>)
 8005916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591a:	bf00      	nop
 800591c:	08005951 	.word	0x08005951
 8005920:	08005969 	.word	0x08005969
 8005924:	08005969 	.word	0x08005969
 8005928:	08005969 	.word	0x08005969
 800592c:	0800595d 	.word	0x0800595d
 8005930:	08005969 	.word	0x08005969
 8005934:	08005969 	.word	0x08005969
 8005938:	08005969 	.word	0x08005969
 800593c:	08005957 	.word	0x08005957
 8005940:	08005969 	.word	0x08005969
 8005944:	08005969 	.word	0x08005969
 8005948:	08005969 	.word	0x08005969
 800594c:	08005963 	.word	0x08005963
 8005950:	2300      	movs	r3, #0
 8005952:	76fb      	strb	r3, [r7, #27]
 8005954:	e0ae      	b.n	8005ab4 <UART_SetConfig+0x2a8>
 8005956:	2302      	movs	r3, #2
 8005958:	76fb      	strb	r3, [r7, #27]
 800595a:	e0ab      	b.n	8005ab4 <UART_SetConfig+0x2a8>
 800595c:	2304      	movs	r3, #4
 800595e:	76fb      	strb	r3, [r7, #27]
 8005960:	e0a8      	b.n	8005ab4 <UART_SetConfig+0x2a8>
 8005962:	2308      	movs	r3, #8
 8005964:	76fb      	strb	r3, [r7, #27]
 8005966:	e0a5      	b.n	8005ab4 <UART_SetConfig+0x2a8>
 8005968:	2310      	movs	r3, #16
 800596a:	76fb      	strb	r3, [r7, #27]
 800596c:	bf00      	nop
 800596e:	e0a1      	b.n	8005ab4 <UART_SetConfig+0x2a8>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a69      	ldr	r2, [pc, #420]	; (8005b1c <UART_SetConfig+0x310>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d120      	bne.n	80059bc <UART_SetConfig+0x1b0>
 800597a:	4b66      	ldr	r3, [pc, #408]	; (8005b14 <UART_SetConfig+0x308>)
 800597c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005980:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005984:	2b10      	cmp	r3, #16
 8005986:	d00f      	beq.n	80059a8 <UART_SetConfig+0x19c>
 8005988:	2b10      	cmp	r3, #16
 800598a:	d802      	bhi.n	8005992 <UART_SetConfig+0x186>
 800598c:	2b00      	cmp	r3, #0
 800598e:	d005      	beq.n	800599c <UART_SetConfig+0x190>
 8005990:	e010      	b.n	80059b4 <UART_SetConfig+0x1a8>
 8005992:	2b20      	cmp	r3, #32
 8005994:	d005      	beq.n	80059a2 <UART_SetConfig+0x196>
 8005996:	2b30      	cmp	r3, #48	; 0x30
 8005998:	d009      	beq.n	80059ae <UART_SetConfig+0x1a2>
 800599a:	e00b      	b.n	80059b4 <UART_SetConfig+0x1a8>
 800599c:	2300      	movs	r3, #0
 800599e:	76fb      	strb	r3, [r7, #27]
 80059a0:	e088      	b.n	8005ab4 <UART_SetConfig+0x2a8>
 80059a2:	2302      	movs	r3, #2
 80059a4:	76fb      	strb	r3, [r7, #27]
 80059a6:	e085      	b.n	8005ab4 <UART_SetConfig+0x2a8>
 80059a8:	2304      	movs	r3, #4
 80059aa:	76fb      	strb	r3, [r7, #27]
 80059ac:	e082      	b.n	8005ab4 <UART_SetConfig+0x2a8>
 80059ae:	2308      	movs	r3, #8
 80059b0:	76fb      	strb	r3, [r7, #27]
 80059b2:	e07f      	b.n	8005ab4 <UART_SetConfig+0x2a8>
 80059b4:	2310      	movs	r3, #16
 80059b6:	76fb      	strb	r3, [r7, #27]
 80059b8:	bf00      	nop
 80059ba:	e07b      	b.n	8005ab4 <UART_SetConfig+0x2a8>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a57      	ldr	r2, [pc, #348]	; (8005b20 <UART_SetConfig+0x314>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d120      	bne.n	8005a08 <UART_SetConfig+0x1fc>
 80059c6:	4b53      	ldr	r3, [pc, #332]	; (8005b14 <UART_SetConfig+0x308>)
 80059c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80059d0:	2b40      	cmp	r3, #64	; 0x40
 80059d2:	d00f      	beq.n	80059f4 <UART_SetConfig+0x1e8>
 80059d4:	2b40      	cmp	r3, #64	; 0x40
 80059d6:	d802      	bhi.n	80059de <UART_SetConfig+0x1d2>
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d005      	beq.n	80059e8 <UART_SetConfig+0x1dc>
 80059dc:	e010      	b.n	8005a00 <UART_SetConfig+0x1f4>
 80059de:	2b80      	cmp	r3, #128	; 0x80
 80059e0:	d005      	beq.n	80059ee <UART_SetConfig+0x1e2>
 80059e2:	2bc0      	cmp	r3, #192	; 0xc0
 80059e4:	d009      	beq.n	80059fa <UART_SetConfig+0x1ee>
 80059e6:	e00b      	b.n	8005a00 <UART_SetConfig+0x1f4>
 80059e8:	2300      	movs	r3, #0
 80059ea:	76fb      	strb	r3, [r7, #27]
 80059ec:	e062      	b.n	8005ab4 <UART_SetConfig+0x2a8>
 80059ee:	2302      	movs	r3, #2
 80059f0:	76fb      	strb	r3, [r7, #27]
 80059f2:	e05f      	b.n	8005ab4 <UART_SetConfig+0x2a8>
 80059f4:	2304      	movs	r3, #4
 80059f6:	76fb      	strb	r3, [r7, #27]
 80059f8:	e05c      	b.n	8005ab4 <UART_SetConfig+0x2a8>
 80059fa:	2308      	movs	r3, #8
 80059fc:	76fb      	strb	r3, [r7, #27]
 80059fe:	e059      	b.n	8005ab4 <UART_SetConfig+0x2a8>
 8005a00:	2310      	movs	r3, #16
 8005a02:	76fb      	strb	r3, [r7, #27]
 8005a04:	bf00      	nop
 8005a06:	e055      	b.n	8005ab4 <UART_SetConfig+0x2a8>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a45      	ldr	r2, [pc, #276]	; (8005b24 <UART_SetConfig+0x318>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d124      	bne.n	8005a5c <UART_SetConfig+0x250>
 8005a12:	4b40      	ldr	r3, [pc, #256]	; (8005b14 <UART_SetConfig+0x308>)
 8005a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a20:	d012      	beq.n	8005a48 <UART_SetConfig+0x23c>
 8005a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a26:	d802      	bhi.n	8005a2e <UART_SetConfig+0x222>
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d007      	beq.n	8005a3c <UART_SetConfig+0x230>
 8005a2c:	e012      	b.n	8005a54 <UART_SetConfig+0x248>
 8005a2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a32:	d006      	beq.n	8005a42 <UART_SetConfig+0x236>
 8005a34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a38:	d009      	beq.n	8005a4e <UART_SetConfig+0x242>
 8005a3a:	e00b      	b.n	8005a54 <UART_SetConfig+0x248>
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	76fb      	strb	r3, [r7, #27]
 8005a40:	e038      	b.n	8005ab4 <UART_SetConfig+0x2a8>
 8005a42:	2302      	movs	r3, #2
 8005a44:	76fb      	strb	r3, [r7, #27]
 8005a46:	e035      	b.n	8005ab4 <UART_SetConfig+0x2a8>
 8005a48:	2304      	movs	r3, #4
 8005a4a:	76fb      	strb	r3, [r7, #27]
 8005a4c:	e032      	b.n	8005ab4 <UART_SetConfig+0x2a8>
 8005a4e:	2308      	movs	r3, #8
 8005a50:	76fb      	strb	r3, [r7, #27]
 8005a52:	e02f      	b.n	8005ab4 <UART_SetConfig+0x2a8>
 8005a54:	2310      	movs	r3, #16
 8005a56:	76fb      	strb	r3, [r7, #27]
 8005a58:	bf00      	nop
 8005a5a:	e02b      	b.n	8005ab4 <UART_SetConfig+0x2a8>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a2a      	ldr	r2, [pc, #168]	; (8005b0c <UART_SetConfig+0x300>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d124      	bne.n	8005ab0 <UART_SetConfig+0x2a4>
 8005a66:	4b2b      	ldr	r3, [pc, #172]	; (8005b14 <UART_SetConfig+0x308>)
 8005a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a74:	d012      	beq.n	8005a9c <UART_SetConfig+0x290>
 8005a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a7a:	d802      	bhi.n	8005a82 <UART_SetConfig+0x276>
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d007      	beq.n	8005a90 <UART_SetConfig+0x284>
 8005a80:	e012      	b.n	8005aa8 <UART_SetConfig+0x29c>
 8005a82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a86:	d006      	beq.n	8005a96 <UART_SetConfig+0x28a>
 8005a88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a8c:	d009      	beq.n	8005aa2 <UART_SetConfig+0x296>
 8005a8e:	e00b      	b.n	8005aa8 <UART_SetConfig+0x29c>
 8005a90:	2300      	movs	r3, #0
 8005a92:	76fb      	strb	r3, [r7, #27]
 8005a94:	e00e      	b.n	8005ab4 <UART_SetConfig+0x2a8>
 8005a96:	2302      	movs	r3, #2
 8005a98:	76fb      	strb	r3, [r7, #27]
 8005a9a:	e00b      	b.n	8005ab4 <UART_SetConfig+0x2a8>
 8005a9c:	2304      	movs	r3, #4
 8005a9e:	76fb      	strb	r3, [r7, #27]
 8005aa0:	e008      	b.n	8005ab4 <UART_SetConfig+0x2a8>
 8005aa2:	2308      	movs	r3, #8
 8005aa4:	76fb      	strb	r3, [r7, #27]
 8005aa6:	e005      	b.n	8005ab4 <UART_SetConfig+0x2a8>
 8005aa8:	2310      	movs	r3, #16
 8005aaa:	76fb      	strb	r3, [r7, #27]
 8005aac:	bf00      	nop
 8005aae:	e001      	b.n	8005ab4 <UART_SetConfig+0x2a8>
 8005ab0:	2310      	movs	r3, #16
 8005ab2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a14      	ldr	r2, [pc, #80]	; (8005b0c <UART_SetConfig+0x300>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	f040 80a1 	bne.w	8005c02 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ac0:	7efb      	ldrb	r3, [r7, #27]
 8005ac2:	2b08      	cmp	r3, #8
 8005ac4:	d836      	bhi.n	8005b34 <UART_SetConfig+0x328>
 8005ac6:	a201      	add	r2, pc, #4	; (adr r2, 8005acc <UART_SetConfig+0x2c0>)
 8005ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005acc:	08005af1 	.word	0x08005af1
 8005ad0:	08005b35 	.word	0x08005b35
 8005ad4:	08005af9 	.word	0x08005af9
 8005ad8:	08005b35 	.word	0x08005b35
 8005adc:	08005aff 	.word	0x08005aff
 8005ae0:	08005b35 	.word	0x08005b35
 8005ae4:	08005b35 	.word	0x08005b35
 8005ae8:	08005b35 	.word	0x08005b35
 8005aec:	08005b2d 	.word	0x08005b2d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005af0:	f7fe ff92 	bl	8004a18 <HAL_RCC_GetPCLK1Freq>
 8005af4:	6178      	str	r0, [r7, #20]
        break;
 8005af6:	e022      	b.n	8005b3e <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005af8:	4b0b      	ldr	r3, [pc, #44]	; (8005b28 <UART_SetConfig+0x31c>)
 8005afa:	617b      	str	r3, [r7, #20]
        break;
 8005afc:	e01f      	b.n	8005b3e <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005afe:	f7fe fef5 	bl	80048ec <HAL_RCC_GetSysClockFreq>
 8005b02:	6178      	str	r0, [r7, #20]
        break;
 8005b04:	e01b      	b.n	8005b3e <UART_SetConfig+0x332>
 8005b06:	bf00      	nop
 8005b08:	cfff69f3 	.word	0xcfff69f3
 8005b0c:	40008000 	.word	0x40008000
 8005b10:	40013800 	.word	0x40013800
 8005b14:	40021000 	.word	0x40021000
 8005b18:	40004400 	.word	0x40004400
 8005b1c:	40004800 	.word	0x40004800
 8005b20:	40004c00 	.word	0x40004c00
 8005b24:	40005000 	.word	0x40005000
 8005b28:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b30:	617b      	str	r3, [r7, #20]
        break;
 8005b32:	e004      	b.n	8005b3e <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8005b34:	2300      	movs	r3, #0
 8005b36:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	76bb      	strb	r3, [r7, #26]
        break;
 8005b3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 811d 	beq.w	8005d80 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4a:	4a97      	ldr	r2, [pc, #604]	; (8005da8 <UART_SetConfig+0x59c>)
 8005b4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b50:	461a      	mov	r2, r3
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b58:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	005b      	lsls	r3, r3, #1
 8005b62:	4413      	add	r3, r2
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d305      	bcc.n	8005b76 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d902      	bls.n	8005b7c <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	76bb      	strb	r3, [r7, #26]
 8005b7a:	e101      	b.n	8005d80 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f04f 0100 	mov.w	r1, #0
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b88:	4a87      	ldr	r2, [pc, #540]	; (8005da8 <UART_SetConfig+0x59c>)
 8005b8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	f04f 0400 	mov.w	r4, #0
 8005b94:	461a      	mov	r2, r3
 8005b96:	4623      	mov	r3, r4
 8005b98:	f7fa fb30 	bl	80001fc <__aeabi_uldivmod>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	460c      	mov	r4, r1
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	4622      	mov	r2, r4
 8005ba4:	f04f 0300 	mov.w	r3, #0
 8005ba8:	f04f 0400 	mov.w	r4, #0
 8005bac:	0214      	lsls	r4, r2, #8
 8005bae:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005bb2:	020b      	lsls	r3, r1, #8
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	6852      	ldr	r2, [r2, #4]
 8005bb8:	0852      	lsrs	r2, r2, #1
 8005bba:	4611      	mov	r1, r2
 8005bbc:	f04f 0200 	mov.w	r2, #0
 8005bc0:	eb13 0b01 	adds.w	fp, r3, r1
 8005bc4:	eb44 0c02 	adc.w	ip, r4, r2
 8005bc8:	4658      	mov	r0, fp
 8005bca:	4661      	mov	r1, ip
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f04f 0400 	mov.w	r4, #0
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	4623      	mov	r3, r4
 8005bd8:	f7fa fb10 	bl	80001fc <__aeabi_uldivmod>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	460c      	mov	r4, r1
 8005be0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005be8:	d308      	bcc.n	8005bfc <UART_SetConfig+0x3f0>
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bf0:	d204      	bcs.n	8005bfc <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	60da      	str	r2, [r3, #12]
 8005bfa:	e0c1      	b.n	8005d80 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	76bb      	strb	r3, [r7, #26]
 8005c00:	e0be      	b.n	8005d80 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	69db      	ldr	r3, [r3, #28]
 8005c06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c0a:	d164      	bne.n	8005cd6 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8005c0c:	7efb      	ldrb	r3, [r7, #27]
 8005c0e:	2b08      	cmp	r3, #8
 8005c10:	d827      	bhi.n	8005c62 <UART_SetConfig+0x456>
 8005c12:	a201      	add	r2, pc, #4	; (adr r2, 8005c18 <UART_SetConfig+0x40c>)
 8005c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c18:	08005c3d 	.word	0x08005c3d
 8005c1c:	08005c45 	.word	0x08005c45
 8005c20:	08005c4d 	.word	0x08005c4d
 8005c24:	08005c63 	.word	0x08005c63
 8005c28:	08005c53 	.word	0x08005c53
 8005c2c:	08005c63 	.word	0x08005c63
 8005c30:	08005c63 	.word	0x08005c63
 8005c34:	08005c63 	.word	0x08005c63
 8005c38:	08005c5b 	.word	0x08005c5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c3c:	f7fe feec 	bl	8004a18 <HAL_RCC_GetPCLK1Freq>
 8005c40:	6178      	str	r0, [r7, #20]
        break;
 8005c42:	e013      	b.n	8005c6c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c44:	f7fe fefe 	bl	8004a44 <HAL_RCC_GetPCLK2Freq>
 8005c48:	6178      	str	r0, [r7, #20]
        break;
 8005c4a:	e00f      	b.n	8005c6c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c4c:	4b57      	ldr	r3, [pc, #348]	; (8005dac <UART_SetConfig+0x5a0>)
 8005c4e:	617b      	str	r3, [r7, #20]
        break;
 8005c50:	e00c      	b.n	8005c6c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c52:	f7fe fe4b 	bl	80048ec <HAL_RCC_GetSysClockFreq>
 8005c56:	6178      	str	r0, [r7, #20]
        break;
 8005c58:	e008      	b.n	8005c6c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c5e:	617b      	str	r3, [r7, #20]
        break;
 8005c60:	e004      	b.n	8005c6c <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8005c62:	2300      	movs	r3, #0
 8005c64:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	76bb      	strb	r3, [r7, #26]
        break;
 8005c6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f000 8086 	beq.w	8005d80 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	4a4b      	ldr	r2, [pc, #300]	; (8005da8 <UART_SetConfig+0x59c>)
 8005c7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c7e:	461a      	mov	r2, r3
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c86:	005a      	lsls	r2, r3, #1
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	085b      	lsrs	r3, r3, #1
 8005c8e:	441a      	add	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	2b0f      	cmp	r3, #15
 8005ca0:	d916      	bls.n	8005cd0 <UART_SetConfig+0x4c4>
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ca8:	d212      	bcs.n	8005cd0 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	f023 030f 	bic.w	r3, r3, #15
 8005cb2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	085b      	lsrs	r3, r3, #1
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	f003 0307 	and.w	r3, r3, #7
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	89fb      	ldrh	r3, [r7, #14]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	89fa      	ldrh	r2, [r7, #14]
 8005ccc:	60da      	str	r2, [r3, #12]
 8005cce:	e057      	b.n	8005d80 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	76bb      	strb	r3, [r7, #26]
 8005cd4:	e054      	b.n	8005d80 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005cd6:	7efb      	ldrb	r3, [r7, #27]
 8005cd8:	2b08      	cmp	r3, #8
 8005cda:	d828      	bhi.n	8005d2e <UART_SetConfig+0x522>
 8005cdc:	a201      	add	r2, pc, #4	; (adr r2, 8005ce4 <UART_SetConfig+0x4d8>)
 8005cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce2:	bf00      	nop
 8005ce4:	08005d09 	.word	0x08005d09
 8005ce8:	08005d11 	.word	0x08005d11
 8005cec:	08005d19 	.word	0x08005d19
 8005cf0:	08005d2f 	.word	0x08005d2f
 8005cf4:	08005d1f 	.word	0x08005d1f
 8005cf8:	08005d2f 	.word	0x08005d2f
 8005cfc:	08005d2f 	.word	0x08005d2f
 8005d00:	08005d2f 	.word	0x08005d2f
 8005d04:	08005d27 	.word	0x08005d27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d08:	f7fe fe86 	bl	8004a18 <HAL_RCC_GetPCLK1Freq>
 8005d0c:	6178      	str	r0, [r7, #20]
        break;
 8005d0e:	e013      	b.n	8005d38 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d10:	f7fe fe98 	bl	8004a44 <HAL_RCC_GetPCLK2Freq>
 8005d14:	6178      	str	r0, [r7, #20]
        break;
 8005d16:	e00f      	b.n	8005d38 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d18:	4b24      	ldr	r3, [pc, #144]	; (8005dac <UART_SetConfig+0x5a0>)
 8005d1a:	617b      	str	r3, [r7, #20]
        break;
 8005d1c:	e00c      	b.n	8005d38 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d1e:	f7fe fde5 	bl	80048ec <HAL_RCC_GetSysClockFreq>
 8005d22:	6178      	str	r0, [r7, #20]
        break;
 8005d24:	e008      	b.n	8005d38 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d2a:	617b      	str	r3, [r7, #20]
        break;
 8005d2c:	e004      	b.n	8005d38 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	76bb      	strb	r3, [r7, #26]
        break;
 8005d36:	bf00      	nop
    }

    if (pclk != 0U)
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d020      	beq.n	8005d80 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d42:	4a19      	ldr	r2, [pc, #100]	; (8005da8 <UART_SetConfig+0x59c>)
 8005d44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d48:	461a      	mov	r2, r3
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	085b      	lsrs	r3, r3, #1
 8005d56:	441a      	add	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	2b0f      	cmp	r3, #15
 8005d68:	d908      	bls.n	8005d7c <UART_SetConfig+0x570>
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d70:	d204      	bcs.n	8005d7c <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	60da      	str	r2, [r3, #12]
 8005d7a:	e001      	b.n	8005d80 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005d9c:	7ebb      	ldrb	r3, [r7, #26]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3720      	adds	r7, #32
 8005da2:	46bd      	mov	sp, r7
 8005da4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005da8:	08006388 	.word	0x08006388
 8005dac:	00f42400 	.word	0x00f42400

08005db0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00a      	beq.n	8005dda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dde:	f003 0302 	and.w	r3, r3, #2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00a      	beq.n	8005dfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e00:	f003 0304 	and.w	r3, r3, #4
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00a      	beq.n	8005e1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e22:	f003 0308 	and.w	r3, r3, #8
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00a      	beq.n	8005e40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e44:	f003 0310 	and.w	r3, r3, #16
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00a      	beq.n	8005e62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e66:	f003 0320 	and.w	r3, r3, #32
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00a      	beq.n	8005e84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	430a      	orrs	r2, r1
 8005e82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d01a      	beq.n	8005ec6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eae:	d10a      	bne.n	8005ec6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00a      	beq.n	8005ee8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	430a      	orrs	r2, r1
 8005ee6:	605a      	str	r2, [r3, #4]
  }
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af02      	add	r7, sp, #8
 8005efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005f04:	f7fb fc48 	bl	8001798 <HAL_GetTick>
 8005f08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0308 	and.w	r3, r3, #8
 8005f14:	2b08      	cmp	r3, #8
 8005f16:	d10e      	bne.n	8005f36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f82c 	bl	8005f84 <UART_WaitOnFlagUntilTimeout>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d001      	beq.n	8005f36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e022      	b.n	8005f7c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0304 	and.w	r3, r3, #4
 8005f40:	2b04      	cmp	r3, #4
 8005f42:	d10e      	bne.n	8005f62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f48:	9300      	str	r3, [sp, #0]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f816 	bl	8005f84 <UART_WaitOnFlagUntilTimeout>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d001      	beq.n	8005f62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e00c      	b.n	8005f7c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2220      	movs	r2, #32
 8005f66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	603b      	str	r3, [r7, #0]
 8005f90:	4613      	mov	r3, r2
 8005f92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f94:	e062      	b.n	800605c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9c:	d05e      	beq.n	800605c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f9e:	f7fb fbfb 	bl	8001798 <HAL_GetTick>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	69ba      	ldr	r2, [r7, #24]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d302      	bcc.n	8005fb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d11d      	bne.n	8005ff0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005fc2:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689a      	ldr	r2, [r3, #8]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f022 0201 	bic.w	r2, r2, #1
 8005fd2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2220      	movs	r2, #32
 8005fe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e045      	b.n	800607c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0304 	and.w	r3, r3, #4
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d02e      	beq.n	800605c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	69db      	ldr	r3, [r3, #28]
 8006004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006008:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800600c:	d126      	bne.n	800605c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006016:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006026:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689a      	ldr	r2, [r3, #8]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f022 0201 	bic.w	r2, r2, #1
 8006036:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2220      	movs	r2, #32
 800603c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2220      	movs	r2, #32
 8006044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2220      	movs	r2, #32
 800604c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e00f      	b.n	800607c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	69da      	ldr	r2, [r3, #28]
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	4013      	ands	r3, r2
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	429a      	cmp	r2, r3
 800606a:	bf0c      	ite	eq
 800606c:	2301      	moveq	r3, #1
 800606e:	2300      	movne	r3, #0
 8006070:	b2db      	uxtb	r3, r3
 8006072:	461a      	mov	r2, r3
 8006074:	79fb      	ldrb	r3, [r7, #7]
 8006076:	429a      	cmp	r2, r3
 8006078:	d08d      	beq.n	8005f96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006092:	2b01      	cmp	r3, #1
 8006094:	d101      	bne.n	800609a <HAL_UARTEx_DisableFifoMode+0x16>
 8006096:	2302      	movs	r3, #2
 8006098:	e027      	b.n	80060ea <HAL_UARTEx_DisableFifoMode+0x66>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2224      	movs	r2, #36	; 0x24
 80060a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f022 0201 	bic.w	r2, r2, #1
 80060c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80060c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2220      	movs	r2, #32
 80060dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3714      	adds	r7, #20
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b084      	sub	sp, #16
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
 80060fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006106:	2b01      	cmp	r3, #1
 8006108:	d101      	bne.n	800610e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800610a:	2302      	movs	r3, #2
 800610c:	e02d      	b.n	800616a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2224      	movs	r2, #36	; 0x24
 800611a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f022 0201 	bic.w	r2, r2, #1
 8006134:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	683a      	ldr	r2, [r7, #0]
 8006146:	430a      	orrs	r2, r1
 8006148:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f850 	bl	80061f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2220      	movs	r2, #32
 800615c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b084      	sub	sp, #16
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
 800617a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006182:	2b01      	cmp	r3, #1
 8006184:	d101      	bne.n	800618a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006186:	2302      	movs	r3, #2
 8006188:	e02d      	b.n	80061e6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2224      	movs	r2, #36	; 0x24
 8006196:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f022 0201 	bic.w	r2, r2, #1
 80061b0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	683a      	ldr	r2, [r7, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f812 	bl	80061f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2220      	movs	r2, #32
 80061d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
	...

080061f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b089      	sub	sp, #36	; 0x24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80061f8:	4a2f      	ldr	r2, [pc, #188]	; (80062b8 <UARTEx_SetNbDataToProcess+0xc8>)
 80061fa:	f107 0314 	add.w	r3, r7, #20
 80061fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006202:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006206:	4a2d      	ldr	r2, [pc, #180]	; (80062bc <UARTEx_SetNbDataToProcess+0xcc>)
 8006208:	f107 030c 	add.w	r3, r7, #12
 800620c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006210:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006218:	2b00      	cmp	r3, #0
 800621a:	d108      	bne.n	800622e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800622c:	e03d      	b.n	80062aa <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800622e:	2308      	movs	r3, #8
 8006230:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006232:	2308      	movs	r3, #8
 8006234:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	0e5b      	lsrs	r3, r3, #25
 800623e:	b2db      	uxtb	r3, r3
 8006240:	f003 0307 	and.w	r3, r3, #7
 8006244:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	0f5b      	lsrs	r3, r3, #29
 800624e:	b2db      	uxtb	r3, r3
 8006250:	f003 0307 	and.w	r3, r3, #7
 8006254:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006256:	7fbb      	ldrb	r3, [r7, #30]
 8006258:	7f3a      	ldrb	r2, [r7, #28]
 800625a:	f107 0120 	add.w	r1, r7, #32
 800625e:	440a      	add	r2, r1
 8006260:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006264:	fb02 f303 	mul.w	r3, r2, r3
 8006268:	7f3a      	ldrb	r2, [r7, #28]
 800626a:	f107 0120 	add.w	r1, r7, #32
 800626e:	440a      	add	r2, r1
 8006270:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006274:	fb93 f3f2 	sdiv	r3, r3, r2
 8006278:	b29a      	uxth	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006280:	7ffb      	ldrb	r3, [r7, #31]
 8006282:	7f7a      	ldrb	r2, [r7, #29]
 8006284:	f107 0120 	add.w	r1, r7, #32
 8006288:	440a      	add	r2, r1
 800628a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800628e:	fb02 f303 	mul.w	r3, r2, r3
 8006292:	7f7a      	ldrb	r2, [r7, #29]
 8006294:	f107 0120 	add.w	r1, r7, #32
 8006298:	440a      	add	r2, r1
 800629a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800629e:	fb93 f3f2 	sdiv	r3, r3, r2
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80062aa:	bf00      	nop
 80062ac:	3724      	adds	r7, #36	; 0x24
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	08006330 	.word	0x08006330
 80062bc:	08006338 	.word	0x08006338

080062c0 <__libc_init_array>:
 80062c0:	b570      	push	{r4, r5, r6, lr}
 80062c2:	4e0d      	ldr	r6, [pc, #52]	; (80062f8 <__libc_init_array+0x38>)
 80062c4:	4c0d      	ldr	r4, [pc, #52]	; (80062fc <__libc_init_array+0x3c>)
 80062c6:	1ba4      	subs	r4, r4, r6
 80062c8:	10a4      	asrs	r4, r4, #2
 80062ca:	2500      	movs	r5, #0
 80062cc:	42a5      	cmp	r5, r4
 80062ce:	d109      	bne.n	80062e4 <__libc_init_array+0x24>
 80062d0:	4e0b      	ldr	r6, [pc, #44]	; (8006300 <__libc_init_array+0x40>)
 80062d2:	4c0c      	ldr	r4, [pc, #48]	; (8006304 <__libc_init_array+0x44>)
 80062d4:	f000 f820 	bl	8006318 <_init>
 80062d8:	1ba4      	subs	r4, r4, r6
 80062da:	10a4      	asrs	r4, r4, #2
 80062dc:	2500      	movs	r5, #0
 80062de:	42a5      	cmp	r5, r4
 80062e0:	d105      	bne.n	80062ee <__libc_init_array+0x2e>
 80062e2:	bd70      	pop	{r4, r5, r6, pc}
 80062e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80062e8:	4798      	blx	r3
 80062ea:	3501      	adds	r5, #1
 80062ec:	e7ee      	b.n	80062cc <__libc_init_array+0xc>
 80062ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80062f2:	4798      	blx	r3
 80062f4:	3501      	adds	r5, #1
 80062f6:	e7f2      	b.n	80062de <__libc_init_array+0x1e>
 80062f8:	080063a8 	.word	0x080063a8
 80062fc:	080063a8 	.word	0x080063a8
 8006300:	080063a8 	.word	0x080063a8
 8006304:	080063ac 	.word	0x080063ac

08006308 <memset>:
 8006308:	4402      	add	r2, r0
 800630a:	4603      	mov	r3, r0
 800630c:	4293      	cmp	r3, r2
 800630e:	d100      	bne.n	8006312 <memset+0xa>
 8006310:	4770      	bx	lr
 8006312:	f803 1b01 	strb.w	r1, [r3], #1
 8006316:	e7f9      	b.n	800630c <memset+0x4>

08006318 <_init>:
 8006318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800631a:	bf00      	nop
 800631c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800631e:	bc08      	pop	{r3}
 8006320:	469e      	mov	lr, r3
 8006322:	4770      	bx	lr

08006324 <_fini>:
 8006324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006326:	bf00      	nop
 8006328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800632a:	bc08      	pop	{r3}
 800632c:	469e      	mov	lr, r3
 800632e:	4770      	bx	lr
