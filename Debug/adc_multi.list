
adc_multi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070c8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08007288  08007288  00017288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800734c  0800734c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800734c  0800734c  0001734c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007354  08007354  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007354  08007354  00017354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007358  08007358  00017358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800735c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000504  20000070  080073cc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000574  080073cc  00020574  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018910  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002893  00000000  00000000  000389b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001578  00000000  00000000  0003b248  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001448  00000000  00000000  0003c7c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d86b  00000000  00000000  0003dc08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010315  00000000  00000000  0006b473  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011ca6a  00000000  00000000  0007b788  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001981f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f04  00000000  00000000  00198270  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000070 	.word	0x20000070
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08007270 	.word	0x08007270

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000074 	.word	0x20000074
 80001fc:	08007270 	.word	0x08007270

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	f5ad 6d4b 	sub.w	sp, sp, #3248	; 0xcb0
 80005b6:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f001 fb6d 	bl	8001c96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 fa90 	bl	8000ae0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 fe78 	bl	80012b4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005c4:	f000 fb3c 	bl	8000c40 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 80005c8:	f000 fbb0 	bl	8000d2c <MX_DFSDM1_Init>
  MX_I2C1_Init();
 80005cc:	f000 fbe6 	bl	8000d9c <MX_I2C1_Init>
  MX_I2C2_Init();
 80005d0:	f000 fc24 	bl	8000e1c <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 80005d4:	f000 fc62 	bl	8000e9c <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 80005d8:	f000 fcb6 	bl	8000f48 <MX_SPI1_Init>
  MX_SPI3_Init();
 80005dc:	f000 fcf2 	bl	8000fc4 <MX_SPI3_Init>
  MX_UART4_Init();
 80005e0:	f000 fd2e 	bl	8001040 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80005e4:	f000 fd78 	bl	80010d8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005e8:	f000 fdc2 	bl	8001170 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005ec:	f000 fe0e 	bl	800120c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 80005f0:	f000 fe58 	bl	80012a4 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
  int32_t ADC_data[2]={0,0};
 80005f4:	2300      	movs	r3, #0
 80005f6:	f8c7 3c48 	str.w	r3, [r7, #3144]	; 0xc48
 80005fa:	2300      	movs	r3, #0
 80005fc:	f8c7 3c4c 	str.w	r3, [r7, #3148]	; 0xc4c

  int32_t emg_prev;
  int32_t emg;

  int32_t f[100] = {0, 0, 0, 0, 0};
 8000600:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8000604:	4618      	mov	r0, r3
 8000606:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800060a:	461a      	mov	r2, r3
 800060c:	2100      	movs	r1, #0
 800060e:	f006 fa21 	bl	8006a54 <memset>
  int32_t g[100] = {0, 0, 0, 0, 0};
 8000612:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8000616:	4618      	mov	r0, r3
 8000618:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800061c:	461a      	mov	r2, r3
 800061e:	2100      	movs	r1, #0
 8000620:	f006 fa18 	bl	8006a54 <memset>

  int32_t i = 5;
 8000624:	2305      	movs	r3, #5
 8000626:	f8c7 3ca0 	str.w	r3, [r7, #3232]	; 0xca0

  int muscle_work = 1;
 800062a:	2301      	movs	r3, #1
 800062c:	f8c7 3c64 	str.w	r3, [r7, #3172]	; 0xc64
  int heart_work = 1;
 8000630:	2301      	movs	r3, #1
 8000632:	f8c7 3c9c 	str.w	r3, [r7, #3228]	; 0xc9c

  uint16_t heartrate[1000];
  int32_t heart_cnt = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	f8c7 3c98 	str.w	r3, [r7, #3224]	; 0xc98

  uint16_t value[SAMPLE_NUMBER] = {0};
 800063c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000640:	4618      	mov	r0, r3
 8000642:	23c8      	movs	r3, #200	; 0xc8
 8000644:	461a      	mov	r2, r3
 8000646:	2100      	movs	r1, #0
 8000648:	f006 fa04 	bl	8006a54 <memset>
  uint8_t valueCount_=255;
 800064c:	23ff      	movs	r3, #255	; 0xff
 800064e:	f887 3c97 	strb.w	r3, [r7, #3223]	; 0xc97

  uint32_t nowTim=0,lastTim=0;
 8000652:	2300      	movs	r3, #0
 8000654:	f8c7 3c60 	str.w	r3, [r7, #3168]	; 0xc60
 8000658:	2300      	movs	r3, #0
 800065a:	f8c7 3c90 	str.w	r3, [r7, #3216]	; 0xc90

  char msg[100];

  int loop_cnt = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	f8c7 3c8c 	str.w	r3, [r7, #3212]	; 0xc8c

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	emg_prev = emg;
 8000664:	f8d7 3ca4 	ldr.w	r3, [r7, #3236]	; 0xca4
 8000668:	f8c7 3c5c 	str.w	r3, [r7, #3164]	; 0xc5c

		HAL_ADC_Start(&hadc1);
 800066c:	48c3      	ldr	r0, [pc, #780]	; (800097c <main+0x3cc>)
 800066e:	f001 fecd 	bl	800240c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 10);
 8000672:	210a      	movs	r1, #10
 8000674:	48c1      	ldr	r0, [pc, #772]	; (800097c <main+0x3cc>)
 8000676:	f001 ff2c 	bl	80024d2 <HAL_ADC_PollForConversion>
		ADC_data[0] = HAL_ADC_GetValue(&hadc1);
 800067a:	48c0      	ldr	r0, [pc, #768]	; (800097c <main+0x3cc>)
 800067c:	f001 ffb1 	bl	80025e2 <HAL_ADC_GetValue>
 8000680:	4603      	mov	r3, r0
 8000682:	f8c7 3c48 	str.w	r3, [r7, #3144]	; 0xc48
		HAL_ADC_Start(&hadc1);
 8000686:	48bd      	ldr	r0, [pc, #756]	; (800097c <main+0x3cc>)
 8000688:	f001 fec0 	bl	800240c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 10);
 800068c:	210a      	movs	r1, #10
 800068e:	48bb      	ldr	r0, [pc, #748]	; (800097c <main+0x3cc>)
 8000690:	f001 ff1f 	bl	80024d2 <HAL_ADC_PollForConversion>
		ADC_data[1] = HAL_ADC_GetValue(&hadc1);
 8000694:	48b9      	ldr	r0, [pc, #740]	; (800097c <main+0x3cc>)
 8000696:	f001 ffa4 	bl	80025e2 <HAL_ADC_GetValue>
 800069a:	4603      	mov	r3, r0
 800069c:	f8c7 3c4c 	str.w	r3, [r7, #3148]	; 0xc4c

		emg = ADC_data[0];
 80006a0:	f8d7 3c48 	ldr.w	r3, [r7, #3144]	; 0xc48
 80006a4:	f8c7 3ca4 	str.w	r3, [r7, #3236]	; 0xca4
		int32_t err = (emg - emg_prev > 0)?(emg - emg_prev):(emg_prev - emg);
 80006a8:	f8d7 2ca4 	ldr.w	r2, [r7, #3236]	; 0xca4
 80006ac:	f8d7 3c5c 	ldr.w	r3, [r7, #3164]	; 0xc5c
 80006b0:	1ad3      	subs	r3, r2, r3
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	bfb8      	it	lt
 80006b6:	425b      	neglt	r3, r3
 80006b8:	f8c7 3c58 	str.w	r3, [r7, #3160]	; 0xc58

		if (err <= 20 * 4) {
 80006bc:	f8d7 3c58 	ldr.w	r3, [r7, #3160]	; 0xc58
 80006c0:	2b50      	cmp	r3, #80	; 0x50
 80006c2:	dc0e      	bgt.n	80006e2 <main+0x132>
			f[i] = f[i - 1] + 1;
 80006c4:	f8d7 3ca0 	ldr.w	r3, [r7, #3232]	; 0xca0
 80006c8:	1e5a      	subs	r2, r3, #1
 80006ca:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 80006ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006d2:	1c59      	adds	r1, r3, #1
 80006d4:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 80006d8:	f8d7 2ca0 	ldr.w	r2, [r7, #3232]	; 0xca0
 80006dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80006e0:	e006      	b.n	80006f0 <main+0x140>
		}
		else {
			f[i] = 0;
 80006e2:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 80006e6:	f8d7 2ca0 	ldr.w	r2, [r7, #3232]	; 0xca0
 80006ea:	2100      	movs	r1, #0
 80006ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}

		if (emg_prev + 10 * 4 > emg) {
 80006f0:	f8d7 3c5c 	ldr.w	r3, [r7, #3164]	; 0xc5c
 80006f4:	3328      	adds	r3, #40	; 0x28
 80006f6:	f8d7 2ca4 	ldr.w	r2, [r7, #3236]	; 0xca4
 80006fa:	429a      	cmp	r2, r3
 80006fc:	da0e      	bge.n	800071c <main+0x16c>
			g[i] = g[i - 1] + 1;
 80006fe:	f8d7 3ca0 	ldr.w	r3, [r7, #3232]	; 0xca0
 8000702:	1e5a      	subs	r2, r3, #1
 8000704:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8000708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800070c:	1c59      	adds	r1, r3, #1
 800070e:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8000712:	f8d7 2ca0 	ldr.w	r2, [r7, #3232]	; 0xca0
 8000716:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800071a:	e006      	b.n	800072a <main+0x17a>
		}
		else {
			g[i] = 0;
 800071c:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8000720:	f8d7 2ca0 	ldr.w	r2, [r7, #3232]	; 0xca0
 8000724:	2100      	movs	r1, #0
 8000726:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}

		muscle_work = (f[i] >= 5 || g[i] >= 5)?1:0;
 800072a:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 800072e:	f8d7 2ca0 	ldr.w	r2, [r7, #3232]	; 0xca0
 8000732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000736:	2b04      	cmp	r3, #4
 8000738:	dc07      	bgt.n	800074a <main+0x19a>
 800073a:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800073e:	f8d7 2ca0 	ldr.w	r2, [r7, #3232]	; 0xca0
 8000742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000746:	2b04      	cmp	r3, #4
 8000748:	dd01      	ble.n	800074e <main+0x19e>
 800074a:	2301      	movs	r3, #1
 800074c:	e000      	b.n	8000750 <main+0x1a0>
 800074e:	2300      	movs	r3, #0
 8000750:	f8c7 3c64 	str.w	r3, [r7, #3172]	; 0xc64

		i++;
 8000754:	f8d7 3ca0 	ldr.w	r3, [r7, #3232]	; 0xca0
 8000758:	3301      	adds	r3, #1
 800075a:	f8c7 3ca0 	str.w	r3, [r7, #3232]	; 0xca0

		if (i == 100) {
 800075e:	f8d7 3ca0 	ldr.w	r3, [r7, #3232]	; 0xca0
 8000762:	2b64      	cmp	r3, #100	; 0x64
 8000764:	d12b      	bne.n	80007be <main+0x20e>
			i = 5;
 8000766:	2305      	movs	r3, #5
 8000768:	f8c7 3ca0 	str.w	r3, [r7, #3232]	; 0xca0
			for (int j = 0; j < 5; j++) {
 800076c:	2300      	movs	r3, #0
 800076e:	f8c7 3c88 	str.w	r3, [r7, #3208]	; 0xc88
 8000772:	e020      	b.n	80007b6 <main+0x206>
				f[j] = f[j+95];
 8000774:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8000778:	f103 025f 	add.w	r2, r3, #95	; 0x5f
 800077c:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8000780:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000784:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8000788:	f8d7 2c88 	ldr.w	r2, [r7, #3208]	; 0xc88
 800078c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				g[j] = g[j+95];
 8000790:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8000794:	f103 025f 	add.w	r2, r3, #95	; 0x5f
 8000798:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800079c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007a0:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80007a4:	f8d7 2c88 	ldr.w	r2, [r7, #3208]	; 0xc88
 80007a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (int j = 0; j < 5; j++) {
 80007ac:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 80007b0:	3301      	adds	r3, #1
 80007b2:	f8c7 3c88 	str.w	r3, [r7, #3208]	; 0xc88
 80007b6:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 80007ba:	2b04      	cmp	r3, #4
 80007bc:	ddda      	ble.n	8000774 <main+0x1c4>
			}
		}

		valueCount_++;
 80007be:	f897 3c97 	ldrb.w	r3, [r7, #3223]	; 0xc97
 80007c2:	3301      	adds	r3, #1
 80007c4:	f887 3c97 	strb.w	r3, [r7, #3223]	; 0xc97
		if (valueCount_ >= SAMPLE_NUMBER) valueCount_ = 0;
 80007c8:	f897 3c97 	ldrb.w	r3, [r7, #3223]	; 0xc97
 80007cc:	2b63      	cmp	r3, #99	; 0x63
 80007ce:	d902      	bls.n	80007d6 <main+0x226>
 80007d0:	2300      	movs	r3, #0
 80007d2:	f887 3c97 	strb.w	r3, [r7, #3223]	; 0xc97
		value[valueCount_] = ADC_data[1];
 80007d6:	f8d7 3c4c 	ldr.w	r3, [r7, #3148]	; 0xc4c
 80007da:	f897 2c97 	ldrb.w	r2, [r7, #3223]	; 0xc97
 80007de:	b299      	uxth	r1, r3
 80007e0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80007e4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		static uint8_t timeFlag;
		static unsigned long sampleTime[10];
		unsigned long valueTime_;
		uint8_t count_;

		if (valueCount_) {
 80007e8:	f897 3c97 	ldrb.w	r3, [r7, #3223]	; 0xc97
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d005      	beq.n	80007fc <main+0x24c>
			count_ = valueCount_ - 1;
 80007f0:	f897 3c97 	ldrb.w	r3, [r7, #3223]	; 0xc97
 80007f4:	3b01      	subs	r3, #1
 80007f6:	f887 3c87 	strb.w	r3, [r7, #3207]	; 0xc87
 80007fa:	e002      	b.n	8000802 <main+0x252>
		} else {
			count_ = SAMPLE_NUMBER - 1;
 80007fc:	2363      	movs	r3, #99	; 0x63
 80007fe:	f887 3c87 	strb.w	r3, [r7, #3207]	; 0xc87
		}
		if((value[valueCount_] > 1000 * 4) && (value[count_] < 20 * 4)) {
 8000802:	f897 2c97 	ldrb.w	r2, [r7, #3223]	; 0xc97
 8000806:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800080a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800080e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000812:	f240 8129 	bls.w	8000a68 <main+0x4b8>
 8000816:	f897 2c87 	ldrb.w	r2, [r7, #3207]	; 0xc87
 800081a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800081e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000822:	2b4f      	cmp	r3, #79	; 0x4f
 8000824:	f200 8120 	bhi.w	8000a68 <main+0x4b8>
			nowTim = HAL_GetTick();
 8000828:	f001 fa9e 	bl	8001d68 <HAL_GetTick>
 800082c:	f8c7 0c60 	str.w	r0, [r7, #3168]	; 0xc60
			uint32_t difTime = nowTim - lastTim;
 8000830:	f8d7 2c60 	ldr.w	r2, [r7, #3168]	; 0xc60
 8000834:	f8d7 3c90 	ldr.w	r3, [r7, #3216]	; 0xc90
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	f8c7 3c54 	str.w	r3, [r7, #3156]	; 0xc54
			lastTim = nowTim;
 800083e:	f8d7 3c60 	ldr.w	r3, [r7, #3168]	; 0xc60
 8000842:	f8c7 3c90 	str.w	r3, [r7, #3216]	; 0xc90

			if(difTime > 300 || difTime < 2000) {
 8000846:	f8d7 3c54 	ldr.w	r3, [r7, #3156]	; 0xc54
 800084a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800084e:	d804      	bhi.n	800085a <main+0x2aa>
 8000850:	f8d7 3c54 	ldr.w	r3, [r7, #3156]	; 0xc54
 8000854:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000858:	d212      	bcs.n	8000880 <main+0x2d0>
				sampleTime[timeFlag++] = difTime;
 800085a:	4b49      	ldr	r3, [pc, #292]	; (8000980 <main+0x3d0>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	1c5a      	adds	r2, r3, #1
 8000860:	b2d1      	uxtb	r1, r2
 8000862:	4a47      	ldr	r2, [pc, #284]	; (8000980 <main+0x3d0>)
 8000864:	7011      	strb	r1, [r2, #0]
 8000866:	4619      	mov	r1, r3
 8000868:	4a46      	ldr	r2, [pc, #280]	; (8000984 <main+0x3d4>)
 800086a:	f8d7 3c54 	ldr.w	r3, [r7, #3156]	; 0xc54
 800086e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				if (timeFlag > 9) timeFlag = 0;
 8000872:	4b43      	ldr	r3, [pc, #268]	; (8000980 <main+0x3d0>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b09      	cmp	r3, #9
 8000878:	d902      	bls.n	8000880 <main+0x2d0>
 800087a:	4b41      	ldr	r3, [pc, #260]	; (8000980 <main+0x3d0>)
 800087c:	2200      	movs	r2, #0
 800087e:	701a      	strb	r2, [r3, #0]
			}
			if (0 == sampleTime[9]) {
 8000880:	4b40      	ldr	r3, [pc, #256]	; (8000984 <main+0x3d4>)
 8000882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000884:	2b00      	cmp	r3, #0
 8000886:	d103      	bne.n	8000890 <main+0x2e0>
				//continue;
				sampleTime[9] = sampleTime[9];
 8000888:	4b3e      	ldr	r3, [pc, #248]	; (8000984 <main+0x3d4>)
 800088a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800088c:	4a3d      	ldr	r2, [pc, #244]	; (8000984 <main+0x3d4>)
 800088e:	6253      	str	r3, [r2, #36]	; 0x24
			}

			uint32_t Arrange[10] = {0};
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	4618      	mov	r0, r3
 8000894:	2328      	movs	r3, #40	; 0x28
 8000896:	461a      	mov	r2, r3
 8000898:	2100      	movs	r1, #0
 800089a:	f006 f8db 	bl	8006a54 <memset>
			for (int i = 0; i < 10; i++) {
 800089e:	2300      	movs	r3, #0
 80008a0:	f8c7 3c80 	str.w	r3, [r7, #3200]	; 0xc80
 80008a4:	e00e      	b.n	80008c4 <main+0x314>
				Arrange[i] = sampleTime[i];
 80008a6:	4a37      	ldr	r2, [pc, #220]	; (8000984 <main+0x3d4>)
 80008a8:	f8d7 3c80 	ldr.w	r3, [r7, #3200]	; 0xc80
 80008ac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	f8d7 2c80 	ldr.w	r2, [r7, #3200]	; 0xc80
 80008b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (int i = 0; i < 10; i++) {
 80008ba:	f8d7 3c80 	ldr.w	r3, [r7, #3200]	; 0xc80
 80008be:	3301      	adds	r3, #1
 80008c0:	f8c7 3c80 	str.w	r3, [r7, #3200]	; 0xc80
 80008c4:	f8d7 3c80 	ldr.w	r3, [r7, #3200]	; 0xc80
 80008c8:	2b09      	cmp	r3, #9
 80008ca:	ddec      	ble.n	80008a6 <main+0x2f6>
			}

			uint32_t Arrange_=0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	f8c7 3c7c 	str.w	r3, [r7, #3196]	; 0xc7c
			for(int i=9;i>0;i--){
 80008d2:	2309      	movs	r3, #9
 80008d4:	f8c7 3c78 	str.w	r3, [r7, #3192]	; 0xc78
 80008d8:	e03a      	b.n	8000950 <main+0x3a0>
				for(int j=0;j<i;j++){
 80008da:	2300      	movs	r3, #0
 80008dc:	f8c7 3c74 	str.w	r3, [r7, #3188]	; 0xc74
 80008e0:	e02b      	b.n	800093a <main+0x38a>
					if(Arrange[j] > Arrange[j+1]){
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	f8d7 2c74 	ldr.w	r2, [r7, #3188]	; 0xc74
 80008e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80008ec:	f8d7 3c74 	ldr.w	r3, [r7, #3188]	; 0xc74
 80008f0:	1c59      	adds	r1, r3, #1
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d919      	bls.n	8000930 <main+0x380>
						Arrange_ = Arrange[j];
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	f8d7 2c74 	ldr.w	r2, [r7, #3188]	; 0xc74
 8000902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000906:	f8c7 3c7c 	str.w	r3, [r7, #3196]	; 0xc7c
						Arrange[j] = Arrange[j+1];
 800090a:	f8d7 3c74 	ldr.w	r3, [r7, #3188]	; 0xc74
 800090e:	1c5a      	adds	r2, r3, #1
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	f8d7 2c74 	ldr.w	r2, [r7, #3188]	; 0xc74
 800091c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						Arrange[j+1] = Arrange_;
 8000920:	f8d7 3c74 	ldr.w	r3, [r7, #3188]	; 0xc74
 8000924:	1c5a      	adds	r2, r3, #1
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	f8d7 1c7c 	ldr.w	r1, [r7, #3196]	; 0xc7c
 800092c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for(int j=0;j<i;j++){
 8000930:	f8d7 3c74 	ldr.w	r3, [r7, #3188]	; 0xc74
 8000934:	3301      	adds	r3, #1
 8000936:	f8c7 3c74 	str.w	r3, [r7, #3188]	; 0xc74
 800093a:	f8d7 2c74 	ldr.w	r2, [r7, #3188]	; 0xc74
 800093e:	f8d7 3c78 	ldr.w	r3, [r7, #3192]	; 0xc78
 8000942:	429a      	cmp	r2, r3
 8000944:	dbcd      	blt.n	80008e2 <main+0x332>
			for(int i=9;i>0;i--){
 8000946:	f8d7 3c78 	ldr.w	r3, [r7, #3192]	; 0xc78
 800094a:	3b01      	subs	r3, #1
 800094c:	f8c7 3c78 	str.w	r3, [r7, #3192]	; 0xc78
 8000950:	f8d7 3c78 	ldr.w	r3, [r7, #3192]	; 0xc78
 8000954:	2b00      	cmp	r3, #0
 8000956:	dcc0      	bgt.n	80008da <main+0x32a>
					}
				}
			}
			if((Arrange[7]-Arrange[3])>120){
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	69da      	ldr	r2, [r3, #28]
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	2b78      	cmp	r3, #120	; 0x78
 8000964:	d903      	bls.n	800096e <main+0x3be>
        //continue;
				Arrange[7] = Arrange[7];
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	69da      	ldr	r2, [r3, #28]
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	61da      	str	r2, [r3, #28]
			}

			Arrange_ = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	f8c7 3c7c 	str.w	r3, [r7, #3196]	; 0xc7c
			for(int i=3;i<=7;i++){
 8000974:	2303      	movs	r3, #3
 8000976:	f8c7 3c70 	str.w	r3, [r7, #3184]	; 0xc70
 800097a:	e014      	b.n	80009a6 <main+0x3f6>
 800097c:	200002c4 	.word	0x200002c4
 8000980:	2000008c 	.word	0x2000008c
 8000984:	20000090 	.word	0x20000090
				Arrange_ += Arrange[i];
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	f8d7 2c70 	ldr.w	r2, [r7, #3184]	; 0xc70
 800098e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000992:	f8d7 2c7c 	ldr.w	r2, [r7, #3196]	; 0xc7c
 8000996:	4413      	add	r3, r2
 8000998:	f8c7 3c7c 	str.w	r3, [r7, #3196]	; 0xc7c
			for(int i=3;i<=7;i++){
 800099c:	f8d7 3c70 	ldr.w	r3, [r7, #3184]	; 0xc70
 80009a0:	3301      	adds	r3, #1
 80009a2:	f8c7 3c70 	str.w	r3, [r7, #3184]	; 0xc70
 80009a6:	f8d7 3c70 	ldr.w	r3, [r7, #3184]	; 0xc70
 80009aa:	2b07      	cmp	r3, #7
 80009ac:	ddec      	ble.n	8000988 <main+0x3d8>
			}

			valueTime_ = 300000/Arrange_;///<60*1000*(7-2)
 80009ae:	4a48      	ldr	r2, [pc, #288]	; (8000ad0 <main+0x520>)
 80009b0:	f8d7 3c7c 	ldr.w	r3, [r7, #3196]	; 0xc7c
 80009b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b8:	f8c7 3c50 	str.w	r3, [r7, #3152]	; 0xc50
			heartrate[heart_cnt] = (uint16_t)valueTime_;
 80009bc:	f8d7 3c50 	ldr.w	r3, [r7, #3152]	; 0xc50
 80009c0:	b299      	uxth	r1, r3
 80009c2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80009c6:	f8d7 2c98 	ldr.w	r2, [r7, #3224]	; 0xc98
 80009ca:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			heart_cnt++;
 80009ce:	f8d7 3c98 	ldr.w	r3, [r7, #3224]	; 0xc98
 80009d2:	3301      	adds	r3, #1
 80009d4:	f8c7 3c98 	str.w	r3, [r7, #3224]	; 0xc98
			if (heart_cnt >= 1000) heart_cnt = 0;
 80009d8:	f8d7 3c98 	ldr.w	r3, [r7, #3224]	; 0xc98
 80009dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009e0:	db02      	blt.n	80009e8 <main+0x438>
 80009e2:	2300      	movs	r3, #0
 80009e4:	f8c7 3c98 	str.w	r3, [r7, #3224]	; 0xc98
			if ((uint16_t)valueTime_ > 100) {
 80009e8:	f8d7 3c50 	ldr.w	r3, [r7, #3152]	; 0xc50
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	2b64      	cmp	r3, #100	; 0x64
 80009f0:	d92d      	bls.n	8000a4e <main+0x49e>
				heart_work = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	f8c7 3c9c 	str.w	r3, [r7, #3228]	; 0xc9c
				for (int i = 1; i <= 6; i++) {
 80009f8:	2301      	movs	r3, #1
 80009fa:	f8c7 3c6c 	str.w	r3, [r7, #3180]	; 0xc6c
 80009fe:	e022      	b.n	8000a46 <main+0x496>
					int k = heart_cnt - i;
 8000a00:	f8d7 2c98 	ldr.w	r2, [r7, #3224]	; 0xc98
 8000a04:	f8d7 3c6c 	ldr.w	r3, [r7, #3180]	; 0xc6c
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	f8c7 3c68 	str.w	r3, [r7, #3176]	; 0xc68
					if (k < 0) k += 1000;
 8000a0e:	f8d7 3c68 	ldr.w	r3, [r7, #3176]	; 0xc68
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	da05      	bge.n	8000a22 <main+0x472>
 8000a16:	f8d7 3c68 	ldr.w	r3, [r7, #3176]	; 0xc68
 8000a1a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000a1e:	f8c7 3c68 	str.w	r3, [r7, #3176]	; 0xc68
					if (heartrate[k] > 100) continue;
 8000a22:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000a26:	f8d7 2c68 	ldr.w	r2, [r7, #3176]	; 0xc68
 8000a2a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000a2e:	2b64      	cmp	r3, #100	; 0x64
 8000a30:	d905      	bls.n	8000a3e <main+0x48e>
				for (int i = 1; i <= 6; i++) {
 8000a32:	f8d7 3c6c 	ldr.w	r3, [r7, #3180]	; 0xc6c
 8000a36:	3301      	adds	r3, #1
 8000a38:	f8c7 3c6c 	str.w	r3, [r7, #3180]	; 0xc6c
 8000a3c:	e003      	b.n	8000a46 <main+0x496>
					else {
						heart_work = 1;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	f8c7 3c9c 	str.w	r3, [r7, #3228]	; 0xc9c
						break;
 8000a44:	e003      	b.n	8000a4e <main+0x49e>
				for (int i = 1; i <= 6; i++) {
 8000a46:	f8d7 3c6c 	ldr.w	r3, [r7, #3180]	; 0xc6c
 8000a4a:	2b06      	cmp	r3, #6
 8000a4c:	ddd8      	ble.n	8000a00 <main+0x450>
					}
				}
			}
			if ((uint16_t)valueTime_ >= 60 && (uint16_t)valueTime_ <= 100) heart_work =1;
 8000a4e:	f8d7 3c50 	ldr.w	r3, [r7, #3152]	; 0xc50
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	2b3b      	cmp	r3, #59	; 0x3b
 8000a56:	d907      	bls.n	8000a68 <main+0x4b8>
 8000a58:	f8d7 3c50 	ldr.w	r3, [r7, #3152]	; 0xc50
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	2b64      	cmp	r3, #100	; 0x64
 8000a60:	d802      	bhi.n	8000a68 <main+0x4b8>
 8000a62:	2301      	movs	r3, #1
 8000a64:	f8c7 3c9c 	str.w	r3, [r7, #3228]	; 0xc9c
		}
		if (loop_cnt % 25 == 0) {
 8000a68:	f8d7 1c8c 	ldr.w	r1, [r7, #3212]	; 0xc8c
 8000a6c:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <main+0x524>)
 8000a6e:	fb83 2301 	smull	r2, r3, r3, r1
 8000a72:	10da      	asrs	r2, r3, #3
 8000a74:	17cb      	asrs	r3, r1, #31
 8000a76:	1ad2      	subs	r2, r2, r3
 8000a78:	4613      	mov	r3, r2
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	4413      	add	r3, r2
 8000a7e:	009a      	lsls	r2, r3, #2
 8000a80:	4413      	add	r3, r2
 8000a82:	1aca      	subs	r2, r1, r3
 8000a84:	2a00      	cmp	r2, #0
 8000a86:	d119      	bne.n	8000abc <main+0x50c>
		  sprintf(msg, "%i\r\nMuscle: %i\r\nHeart: %i\r\n\r\n", loop_cnt, muscle_work, heart_work);
 8000a88:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8000a8c:	f8d7 3c9c 	ldr.w	r3, [r7, #3228]	; 0xc9c
 8000a90:	9300      	str	r3, [sp, #0]
 8000a92:	f8d7 3c64 	ldr.w	r3, [r7, #3172]	; 0xc64
 8000a96:	f8d7 2c8c 	ldr.w	r2, [r7, #3212]	; 0xc8c
 8000a9a:	490f      	ldr	r1, [pc, #60]	; (8000ad8 <main+0x528>)
 8000a9c:	f005 ffe2 	bl	8006a64 <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000aa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fbab 	bl	8000200 <strlen>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	b29a      	uxth	r2, r3
 8000aae:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab6:	4809      	ldr	r0, [pc, #36]	; (8000adc <main+0x52c>)
 8000ab8:	f005 f9b1 	bl	8005e1e <HAL_UART_Transmit>

		}

	  loop_cnt++;
 8000abc:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	f8c7 3c8c 	str.w	r3, [r7, #3212]	; 0xc8c
	  HAL_Delay(20);
 8000ac6:	2014      	movs	r0, #20
 8000ac8:	f001 f95a 	bl	8001d80 <HAL_Delay>
  {
 8000acc:	e5ca      	b.n	8000664 <main+0xb4>
 8000ace:	bf00      	nop
 8000ad0:	000493e0 	.word	0x000493e0
 8000ad4:	51eb851f 	.word	0x51eb851f
 8000ad8:	08007288 	.word	0x08007288
 8000adc:	2000032c 	.word	0x2000032c

08000ae0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b0bc      	sub	sp, #240	; 0xf0
 8000ae4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000aea:	2244      	movs	r2, #68	; 0x44
 8000aec:	2100      	movs	r1, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f005 ffb0 	bl	8006a54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	2294      	movs	r2, #148	; 0x94
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f005 ffa2 	bl	8006a54 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000b10:	2000      	movs	r0, #0
 8000b12:	f003 fbff 	bl	8004314 <HAL_PWREx_ControlVoltageScaling>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <SystemClock_Config+0x40>
  {
    Error_Handler();
 8000b1c:	f000 fd0a 	bl	8001534 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b20:	f003 fbc8 	bl	80042b4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b24:	4b44      	ldr	r3, [pc, #272]	; (8000c38 <SystemClock_Config+0x158>)
 8000b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b2a:	4a43      	ldr	r2, [pc, #268]	; (8000c38 <SystemClock_Config+0x158>)
 8000b2c:	f023 0318 	bic.w	r3, r3, #24
 8000b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000b34:	2314      	movs	r3, #20
 8000b36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b40:	2301      	movs	r3, #1
 8000b42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b4c:	2360      	movs	r3, #96	; 0x60
 8000b4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b52:	2302      	movs	r3, #2
 8000b54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000b64:	233c      	movs	r3, #60	; 0x3c
 8000b66:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b70:	2302      	movs	r3, #2
 8000b72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b76:	2302      	movs	r3, #2
 8000b78:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b7c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b80:	4618      	mov	r0, r3
 8000b82:	f003 fc6b 	bl	800445c <HAL_RCC_OscConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000b8c:	f000 fcd2 	bl	8001534 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b90:	230f      	movs	r3, #15
 8000b92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b96:	2303      	movs	r3, #3
 8000b98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bae:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000bb2:	2105      	movs	r1, #5
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f004 f877 	bl	8004ca8 <HAL_RCC_ClockConfig>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000bc0:	f000 fcb8 	bl	8001534 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000bc4:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <SystemClock_Config+0x15c>)
 8000bc6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_OSPI;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000be0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000be4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000be8:	2300      	movs	r3, #0
 8000bea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000bf4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000bf8:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000c02:	2318      	movs	r3, #24
 8000c04:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000c06:	2302      	movs	r3, #2
 8000c08:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8000c12:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8000c16:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f004 faf4 	bl	8005208 <HAL_RCCEx_PeriphCLKConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8000c26:	f000 fc85 	bl	8001534 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000c2a:	f004 fe15 	bl	8005858 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000c2e:	bf00      	nop
 8000c30:	37f0      	adds	r7, #240	; 0xf0
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	010160cf 	.word	0x010160cf

08000c40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c46:	463b      	mov	r3, r7
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
 8000c54:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c56:	4b31      	ldr	r3, [pc, #196]	; (8000d1c <MX_ADC1_Init+0xdc>)
 8000c58:	4a31      	ldr	r2, [pc, #196]	; (8000d20 <MX_ADC1_Init+0xe0>)
 8000c5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c5c:	4b2f      	ldr	r3, [pc, #188]	; (8000d1c <MX_ADC1_Init+0xdc>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c62:	4b2e      	ldr	r3, [pc, #184]	; (8000d1c <MX_ADC1_Init+0xdc>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c68:	4b2c      	ldr	r3, [pc, #176]	; (8000d1c <MX_ADC1_Init+0xdc>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c6e:	4b2b      	ldr	r3, [pc, #172]	; (8000d1c <MX_ADC1_Init+0xdc>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c74:	4b29      	ldr	r3, [pc, #164]	; (8000d1c <MX_ADC1_Init+0xdc>)
 8000c76:	2204      	movs	r2, #4
 8000c78:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c7a:	4b28      	ldr	r3, [pc, #160]	; (8000d1c <MX_ADC1_Init+0xdc>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c80:	4b26      	ldr	r3, [pc, #152]	; (8000d1c <MX_ADC1_Init+0xdc>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000c86:	4b25      	ldr	r3, [pc, #148]	; (8000d1c <MX_ADC1_Init+0xdc>)
 8000c88:	2202      	movs	r2, #2
 8000c8a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000c8c:	4b23      	ldr	r3, [pc, #140]	; (8000d1c <MX_ADC1_Init+0xdc>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000c94:	4b21      	ldr	r3, [pc, #132]	; (8000d1c <MX_ADC1_Init+0xdc>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c9a:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <MX_ADC1_Init+0xdc>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ca0:	4b1e      	ldr	r3, [pc, #120]	; (8000d1c <MX_ADC1_Init+0xdc>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ca6:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <MX_ADC1_Init+0xdc>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cae:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <MX_ADC1_Init+0xdc>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000cb4:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <MX_ADC1_Init+0xdc>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cbc:	4817      	ldr	r0, [pc, #92]	; (8000d1c <MX_ADC1_Init+0xdc>)
 8000cbe:	f001 fa5b 	bl	8002178 <HAL_ADC_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000cc8:	f000 fc34 	bl	8001534 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ccc:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <MX_ADC1_Init+0xe4>)
 8000cce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cd0:	2306      	movs	r3, #6
 8000cd2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cd8:	237f      	movs	r3, #127	; 0x7f
 8000cda:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cdc:	2304      	movs	r3, #4
 8000cde:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	480c      	ldr	r0, [pc, #48]	; (8000d1c <MX_ADC1_Init+0xdc>)
 8000cea:	f001 fc87 	bl	80025fc <HAL_ADC_ConfigChannel>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000cf4:	f000 fc1e 	bl	8001534 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000cf8:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <MX_ADC1_Init+0xe8>)
 8000cfa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000cfc:	230c      	movs	r3, #12
 8000cfe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d00:	463b      	mov	r3, r7
 8000d02:	4619      	mov	r1, r3
 8000d04:	4805      	ldr	r0, [pc, #20]	; (8000d1c <MX_ADC1_Init+0xdc>)
 8000d06:	f001 fc79 	bl	80025fc <HAL_ADC_ConfigChannel>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000d10:	f000 fc10 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d14:	bf00      	nop
 8000d16:	3718      	adds	r7, #24
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	200002c4 	.word	0x200002c4
 8000d20:	50040000 	.word	0x50040000
 8000d24:	04300002 	.word	0x04300002
 8000d28:	08600004 	.word	0x08600004

08000d2c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000d30:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <MX_DFSDM1_Init+0x68>)
 8000d32:	4a19      	ldr	r2, [pc, #100]	; (8000d98 <MX_DFSDM1_Init+0x6c>)
 8000d34:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000d36:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <MX_DFSDM1_Init+0x68>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000d3c:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <MX_DFSDM1_Init+0x68>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8000d42:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <MX_DFSDM1_Init+0x68>)
 8000d44:	2202      	movs	r2, #2
 8000d46:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <MX_DFSDM1_Init+0x68>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <MX_DFSDM1_Init+0x68>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000d54:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <MX_DFSDM1_Init+0x68>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <MX_DFSDM1_Init+0x68>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <MX_DFSDM1_Init+0x68>)
 8000d62:	2204      	movs	r2, #4
 8000d64:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <MX_DFSDM1_Init+0x68>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <MX_DFSDM1_Init+0x68>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <MX_DFSDM1_Init+0x68>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <MX_DFSDM1_Init+0x68>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_DFSDM1_Init+0x68>)
 8000d80:	f002 f9a2 	bl	80030c8 <HAL_DFSDM_ChannelInit>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000d8a:	f000 fbd3 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000534 	.word	0x20000534
 8000d98:	40016040 	.word	0x40016040

08000d9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000da0:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <MX_I2C1_Init+0x74>)
 8000da2:	4a1c      	ldr	r2, [pc, #112]	; (8000e14 <MX_I2C1_Init+0x78>)
 8000da4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000da6:	4b1a      	ldr	r3, [pc, #104]	; (8000e10 <MX_I2C1_Init+0x74>)
 8000da8:	4a1b      	ldr	r2, [pc, #108]	; (8000e18 <MX_I2C1_Init+0x7c>)
 8000daa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000dac:	4b18      	ldr	r3, [pc, #96]	; (8000e10 <MX_I2C1_Init+0x74>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000db2:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <MX_I2C1_Init+0x74>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000db8:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <MX_I2C1_Init+0x74>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000dbe:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <MX_I2C1_Init+0x74>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <MX_I2C1_Init+0x74>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dca:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <MX_I2C1_Init+0x74>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <MX_I2C1_Init+0x74>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dd6:	480e      	ldr	r0, [pc, #56]	; (8000e10 <MX_I2C1_Init+0x74>)
 8000dd8:	f002 fc4f 	bl	800367a <HAL_I2C_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000de2:	f000 fba7 	bl	8001534 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000de6:	2100      	movs	r1, #0
 8000de8:	4809      	ldr	r0, [pc, #36]	; (8000e10 <MX_I2C1_Init+0x74>)
 8000dea:	f002 fcd5 	bl	8003798 <HAL_I2CEx_ConfigAnalogFilter>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000df4:	f000 fb9e 	bl	8001534 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <MX_I2C1_Init+0x74>)
 8000dfc:	f002 fd17 	bl	800382e <HAL_I2CEx_ConfigDigitalFilter>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e06:	f000 fb95 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000178 	.word	0x20000178
 8000e14:	40005400 	.word	0x40005400
 8000e18:	307075b1 	.word	0x307075b1

08000e1c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e20:	4b1b      	ldr	r3, [pc, #108]	; (8000e90 <MX_I2C2_Init+0x74>)
 8000e22:	4a1c      	ldr	r2, [pc, #112]	; (8000e94 <MX_I2C2_Init+0x78>)
 8000e24:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000e26:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <MX_I2C2_Init+0x74>)
 8000e28:	4a1b      	ldr	r2, [pc, #108]	; (8000e98 <MX_I2C2_Init+0x7c>)
 8000e2a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000e2c:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <MX_I2C2_Init+0x74>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e32:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <MX_I2C2_Init+0x74>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e38:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <MX_I2C2_Init+0x74>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000e3e:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <MX_I2C2_Init+0x74>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <MX_I2C2_Init+0x74>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e4a:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <MX_I2C2_Init+0x74>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e50:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <MX_I2C2_Init+0x74>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e56:	480e      	ldr	r0, [pc, #56]	; (8000e90 <MX_I2C2_Init+0x74>)
 8000e58:	f002 fc0f 	bl	800367a <HAL_I2C_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000e62:	f000 fb67 	bl	8001534 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e66:	2100      	movs	r1, #0
 8000e68:	4809      	ldr	r0, [pc, #36]	; (8000e90 <MX_I2C2_Init+0x74>)
 8000e6a:	f002 fc95 	bl	8003798 <HAL_I2CEx_ConfigAnalogFilter>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000e74:	f000 fb5e 	bl	8001534 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4805      	ldr	r0, [pc, #20]	; (8000e90 <MX_I2C2_Init+0x74>)
 8000e7c:	f002 fcd7 	bl	800382e <HAL_I2CEx_ConfigDigitalFilter>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000e86:	f000 fb55 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000214 	.word	0x20000214
 8000e94:	40005800 	.word	0x40005800
 8000e98:	307075b1 	.word	0x307075b1

08000e9c <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000eb0:	4b23      	ldr	r3, [pc, #140]	; (8000f40 <MX_OCTOSPI1_Init+0xa4>)
 8000eb2:	4a24      	ldr	r2, [pc, #144]	; (8000f44 <MX_OCTOSPI1_Init+0xa8>)
 8000eb4:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000eb6:	4b22      	ldr	r3, [pc, #136]	; (8000f40 <MX_OCTOSPI1_Init+0xa4>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000ebc:	4b20      	ldr	r3, [pc, #128]	; (8000f40 <MX_OCTOSPI1_Init+0xa4>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8000ec2:	4b1f      	ldr	r3, [pc, #124]	; (8000f40 <MX_OCTOSPI1_Init+0xa4>)
 8000ec4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000ec8:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8000eca:	4b1d      	ldr	r3, [pc, #116]	; (8000f40 <MX_OCTOSPI1_Init+0xa4>)
 8000ecc:	2220      	movs	r2, #32
 8000ece:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <MX_OCTOSPI1_Init+0xa4>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000ed6:	4b1a      	ldr	r3, [pc, #104]	; (8000f40 <MX_OCTOSPI1_Init+0xa4>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000edc:	4b18      	ldr	r3, [pc, #96]	; (8000f40 <MX_OCTOSPI1_Init+0xa4>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8000ee2:	4b17      	ldr	r3, [pc, #92]	; (8000f40 <MX_OCTOSPI1_Init+0xa4>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000ee8:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <MX_OCTOSPI1_Init+0xa4>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000eee:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <MX_OCTOSPI1_Init+0xa4>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <MX_OCTOSPI1_Init+0xa4>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000efa:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <MX_OCTOSPI1_Init+0xa4>)
 8000efc:	2208      	movs	r2, #8
 8000efe:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000f00:	480f      	ldr	r0, [pc, #60]	; (8000f40 <MX_OCTOSPI1_Init+0xa4>)
 8000f02:	f002 fce1 	bl	80038c8 <HAL_OSPI_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8000f0c:	f000 fb12 	bl	8001534 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8000f10:	2301      	movs	r3, #1
 8000f12:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8000f14:	2301      	movs	r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000f18:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000f1c:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f24:	4619      	mov	r1, r3
 8000f26:	4806      	ldr	r0, [pc, #24]	; (8000f40 <MX_OCTOSPI1_Init+0xa4>)
 8000f28:	f002 fd88 	bl	8003a3c <HAL_OSPIM_Config>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8000f32:	f000 faff 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000f36:	bf00      	nop
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200001c4 	.word	0x200001c4
 8000f44:	a0001000 	.word	0xa0001000

08000f48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000f4e:	4a1c      	ldr	r2, [pc, #112]	; (8000fc0 <MX_SPI1_Init+0x78>)
 8000f50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f52:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000f54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f5a:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f60:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000f62:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f66:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f6e:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000f76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f7a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000f7e:	2208      	movs	r2, #8
 8000f80:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f94:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000f96:	2207      	movs	r2, #7
 8000f98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f9a:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000fa2:	2208      	movs	r2, #8
 8000fa4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fa6:	4805      	ldr	r0, [pc, #20]	; (8000fbc <MX_SPI1_Init+0x74>)
 8000fa8:	f004 fe46 	bl	8005c38 <HAL_SPI_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000fb2:	f000 fabf 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000444 	.word	0x20000444
 8000fc0:	40013000 	.word	0x40013000

08000fc4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <MX_SPI3_Init+0x74>)
 8000fca:	4a1c      	ldr	r2, [pc, #112]	; (800103c <MX_SPI3_Init+0x78>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000fce:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <MX_SPI3_Init+0x74>)
 8000fd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fd4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000fd6:	4b18      	ldr	r3, [pc, #96]	; (8001038 <MX_SPI3_Init+0x74>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000fdc:	4b16      	ldr	r3, [pc, #88]	; (8001038 <MX_SPI3_Init+0x74>)
 8000fde:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000fe2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <MX_SPI3_Init+0x74>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fea:	4b13      	ldr	r3, [pc, #76]	; (8001038 <MX_SPI3_Init+0x74>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <MX_SPI3_Init+0x74>)
 8000ff2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ff6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <MX_SPI3_Init+0x74>)
 8000ffa:	2208      	movs	r2, #8
 8000ffc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <MX_SPI3_Init+0x74>)
 8001000:	2200      	movs	r2, #0
 8001002:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MX_SPI3_Init+0x74>)
 8001006:	2200      	movs	r2, #0
 8001008:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800100a:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <MX_SPI3_Init+0x74>)
 800100c:	2200      	movs	r2, #0
 800100e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <MX_SPI3_Init+0x74>)
 8001012:	2207      	movs	r2, #7
 8001014:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001016:	4b08      	ldr	r3, [pc, #32]	; (8001038 <MX_SPI3_Init+0x74>)
 8001018:	2200      	movs	r2, #0
 800101a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_SPI3_Init+0x74>)
 800101e:	2208      	movs	r2, #8
 8001020:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <MX_SPI3_Init+0x74>)
 8001024:	f004 fe08 	bl	8005c38 <HAL_SPI_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800102e:	f000 fa81 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000260 	.word	0x20000260
 800103c:	40003c00 	.word	0x40003c00

08001040 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001044:	4b22      	ldr	r3, [pc, #136]	; (80010d0 <MX_UART4_Init+0x90>)
 8001046:	4a23      	ldr	r2, [pc, #140]	; (80010d4 <MX_UART4_Init+0x94>)
 8001048:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800104a:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <MX_UART4_Init+0x90>)
 800104c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001050:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001052:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <MX_UART4_Init+0x90>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001058:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <MX_UART4_Init+0x90>)
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800105e:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <MX_UART4_Init+0x90>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001064:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <MX_UART4_Init+0x90>)
 8001066:	220c      	movs	r2, #12
 8001068:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106a:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <MX_UART4_Init+0x90>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001070:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <MX_UART4_Init+0x90>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001076:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <MX_UART4_Init+0x90>)
 8001078:	2200      	movs	r2, #0
 800107a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800107c:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <MX_UART4_Init+0x90>)
 800107e:	2200      	movs	r2, #0
 8001080:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001082:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <MX_UART4_Init+0x90>)
 8001084:	2200      	movs	r2, #0
 8001086:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001088:	4811      	ldr	r0, [pc, #68]	; (80010d0 <MX_UART4_Init+0x90>)
 800108a:	f004 fe78 	bl	8005d7e <HAL_UART_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001094:	f000 fa4e 	bl	8001534 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001098:	2100      	movs	r1, #0
 800109a:	480d      	ldr	r0, [pc, #52]	; (80010d0 <MX_UART4_Init+0x90>)
 800109c:	f005 fbcb 	bl	8006836 <HAL_UARTEx_SetTxFifoThreshold>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80010a6:	f000 fa45 	bl	8001534 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010aa:	2100      	movs	r1, #0
 80010ac:	4808      	ldr	r0, [pc, #32]	; (80010d0 <MX_UART4_Init+0x90>)
 80010ae:	f005 fc00 	bl	80068b2 <HAL_UARTEx_SetRxFifoThreshold>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80010b8:	f000 fa3c 	bl	8001534 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80010bc:	4804      	ldr	r0, [pc, #16]	; (80010d0 <MX_UART4_Init+0x90>)
 80010be:	f005 fb81 	bl	80067c4 <HAL_UARTEx_DisableFifoMode>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80010c8:	f000 fa34 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	200003b8 	.word	0x200003b8
 80010d4:	40004c00 	.word	0x40004c00

080010d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010dc:	4b22      	ldr	r3, [pc, #136]	; (8001168 <MX_USART1_UART_Init+0x90>)
 80010de:	4a23      	ldr	r2, [pc, #140]	; (800116c <MX_USART1_UART_Init+0x94>)
 80010e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010e2:	4b21      	ldr	r3, [pc, #132]	; (8001168 <MX_USART1_UART_Init+0x90>)
 80010e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ea:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <MX_USART1_UART_Init+0x90>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010f0:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <MX_USART1_UART_Init+0x90>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010f6:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <MX_USART1_UART_Init+0x90>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010fc:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <MX_USART1_UART_Init+0x90>)
 80010fe:	220c      	movs	r2, #12
 8001100:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001102:	4b19      	ldr	r3, [pc, #100]	; (8001168 <MX_USART1_UART_Init+0x90>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001108:	4b17      	ldr	r3, [pc, #92]	; (8001168 <MX_USART1_UART_Init+0x90>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800110e:	4b16      	ldr	r3, [pc, #88]	; (8001168 <MX_USART1_UART_Init+0x90>)
 8001110:	2200      	movs	r2, #0
 8001112:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <MX_USART1_UART_Init+0x90>)
 8001116:	2200      	movs	r2, #0
 8001118:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800111a:	4b13      	ldr	r3, [pc, #76]	; (8001168 <MX_USART1_UART_Init+0x90>)
 800111c:	2200      	movs	r2, #0
 800111e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001120:	4811      	ldr	r0, [pc, #68]	; (8001168 <MX_USART1_UART_Init+0x90>)
 8001122:	f004 fe2c 	bl	8005d7e <HAL_UART_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800112c:	f000 fa02 	bl	8001534 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001130:	2100      	movs	r1, #0
 8001132:	480d      	ldr	r0, [pc, #52]	; (8001168 <MX_USART1_UART_Init+0x90>)
 8001134:	f005 fb7f 	bl	8006836 <HAL_UARTEx_SetTxFifoThreshold>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800113e:	f000 f9f9 	bl	8001534 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001142:	2100      	movs	r1, #0
 8001144:	4808      	ldr	r0, [pc, #32]	; (8001168 <MX_USART1_UART_Init+0x90>)
 8001146:	f005 fbb4 	bl	80068b2 <HAL_UARTEx_SetRxFifoThreshold>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001150:	f000 f9f0 	bl	8001534 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001154:	4804      	ldr	r0, [pc, #16]	; (8001168 <MX_USART1_UART_Init+0x90>)
 8001156:	f005 fb35 	bl	80067c4 <HAL_UARTEx_DisableFifoMode>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001160:	f000 f9e8 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	2000032c 	.word	0x2000032c
 800116c:	40013800 	.word	0x40013800

08001170 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001174:	4b23      	ldr	r3, [pc, #140]	; (8001204 <MX_USART2_UART_Init+0x94>)
 8001176:	4a24      	ldr	r2, [pc, #144]	; (8001208 <MX_USART2_UART_Init+0x98>)
 8001178:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800117a:	4b22      	ldr	r3, [pc, #136]	; (8001204 <MX_USART2_UART_Init+0x94>)
 800117c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001180:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001182:	4b20      	ldr	r3, [pc, #128]	; (8001204 <MX_USART2_UART_Init+0x94>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001188:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <MX_USART2_UART_Init+0x94>)
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800118e:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <MX_USART2_UART_Init+0x94>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001194:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <MX_USART2_UART_Init+0x94>)
 8001196:	220c      	movs	r2, #12
 8001198:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800119a:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <MX_USART2_UART_Init+0x94>)
 800119c:	f44f 7240 	mov.w	r2, #768	; 0x300
 80011a0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a2:	4b18      	ldr	r3, [pc, #96]	; (8001204 <MX_USART2_UART_Init+0x94>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011a8:	4b16      	ldr	r3, [pc, #88]	; (8001204 <MX_USART2_UART_Init+0x94>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <MX_USART2_UART_Init+0x94>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <MX_USART2_UART_Init+0x94>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ba:	4812      	ldr	r0, [pc, #72]	; (8001204 <MX_USART2_UART_Init+0x94>)
 80011bc:	f004 fddf 	bl	8005d7e <HAL_UART_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80011c6:	f000 f9b5 	bl	8001534 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ca:	2100      	movs	r1, #0
 80011cc:	480d      	ldr	r0, [pc, #52]	; (8001204 <MX_USART2_UART_Init+0x94>)
 80011ce:	f005 fb32 	bl	8006836 <HAL_UARTEx_SetTxFifoThreshold>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80011d8:	f000 f9ac 	bl	8001534 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011dc:	2100      	movs	r1, #0
 80011de:	4809      	ldr	r0, [pc, #36]	; (8001204 <MX_USART2_UART_Init+0x94>)
 80011e0:	f005 fb67 	bl	80068b2 <HAL_UARTEx_SetRxFifoThreshold>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80011ea:	f000 f9a3 	bl	8001534 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80011ee:	4805      	ldr	r0, [pc, #20]	; (8001204 <MX_USART2_UART_Init+0x94>)
 80011f0:	f005 fae8 	bl	80067c4 <HAL_UARTEx_DisableFifoMode>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80011fa:	f000 f99b 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200004a8 	.word	0x200004a8
 8001208:	40004400 	.word	0x40004400

0800120c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001210:	4b22      	ldr	r3, [pc, #136]	; (800129c <MX_USART3_UART_Init+0x90>)
 8001212:	4a23      	ldr	r2, [pc, #140]	; (80012a0 <MX_USART3_UART_Init+0x94>)
 8001214:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001216:	4b21      	ldr	r3, [pc, #132]	; (800129c <MX_USART3_UART_Init+0x90>)
 8001218:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800121c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800121e:	4b1f      	ldr	r3, [pc, #124]	; (800129c <MX_USART3_UART_Init+0x90>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001224:	4b1d      	ldr	r3, [pc, #116]	; (800129c <MX_USART3_UART_Init+0x90>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800122a:	4b1c      	ldr	r3, [pc, #112]	; (800129c <MX_USART3_UART_Init+0x90>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001230:	4b1a      	ldr	r3, [pc, #104]	; (800129c <MX_USART3_UART_Init+0x90>)
 8001232:	220c      	movs	r2, #12
 8001234:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001236:	4b19      	ldr	r3, [pc, #100]	; (800129c <MX_USART3_UART_Init+0x90>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800123c:	4b17      	ldr	r3, [pc, #92]	; (800129c <MX_USART3_UART_Init+0x90>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001242:	4b16      	ldr	r3, [pc, #88]	; (800129c <MX_USART3_UART_Init+0x90>)
 8001244:	2200      	movs	r2, #0
 8001246:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001248:	4b14      	ldr	r3, [pc, #80]	; (800129c <MX_USART3_UART_Init+0x90>)
 800124a:	2200      	movs	r2, #0
 800124c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800124e:	4b13      	ldr	r3, [pc, #76]	; (800129c <MX_USART3_UART_Init+0x90>)
 8001250:	2200      	movs	r2, #0
 8001252:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001254:	4811      	ldr	r0, [pc, #68]	; (800129c <MX_USART3_UART_Init+0x90>)
 8001256:	f004 fd92 	bl	8005d7e <HAL_UART_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001260:	f000 f968 	bl	8001534 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001264:	2100      	movs	r1, #0
 8001266:	480d      	ldr	r0, [pc, #52]	; (800129c <MX_USART3_UART_Init+0x90>)
 8001268:	f005 fae5 	bl	8006836 <HAL_UARTEx_SetTxFifoThreshold>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001272:	f000 f95f 	bl	8001534 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001276:	2100      	movs	r1, #0
 8001278:	4808      	ldr	r0, [pc, #32]	; (800129c <MX_USART3_UART_Init+0x90>)
 800127a:	f005 fb1a 	bl	80068b2 <HAL_UARTEx_SetRxFifoThreshold>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001284:	f000 f956 	bl	8001534 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001288:	4804      	ldr	r0, [pc, #16]	; (800129c <MX_USART3_UART_Init+0x90>)
 800128a:	f005 fa9b 	bl	80067c4 <HAL_UARTEx_DisableFifoMode>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001294:	f000 f94e 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	200000ec 	.word	0x200000ec
 80012a0:	40004800 	.word	0x40004800

080012a4 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
	...

080012b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08c      	sub	sp, #48	; 0x30
 80012b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ba:	f107 031c 	add.w	r3, r7, #28
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
 80012c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ca:	4b94      	ldr	r3, [pc, #592]	; (800151c <MX_GPIO_Init+0x268>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ce:	4a93      	ldr	r2, [pc, #588]	; (800151c <MX_GPIO_Init+0x268>)
 80012d0:	f043 0310 	orr.w	r3, r3, #16
 80012d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d6:	4b91      	ldr	r3, [pc, #580]	; (800151c <MX_GPIO_Init+0x268>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	f003 0310 	and.w	r3, r3, #16
 80012de:	61bb      	str	r3, [r7, #24]
 80012e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e2:	4b8e      	ldr	r3, [pc, #568]	; (800151c <MX_GPIO_Init+0x268>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	4a8d      	ldr	r2, [pc, #564]	; (800151c <MX_GPIO_Init+0x268>)
 80012e8:	f043 0304 	orr.w	r3, r3, #4
 80012ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ee:	4b8b      	ldr	r3, [pc, #556]	; (800151c <MX_GPIO_Init+0x268>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	f003 0304 	and.w	r3, r3, #4
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012fa:	4b88      	ldr	r3, [pc, #544]	; (800151c <MX_GPIO_Init+0x268>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	4a87      	ldr	r2, [pc, #540]	; (800151c <MX_GPIO_Init+0x268>)
 8001300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001306:	4b85      	ldr	r3, [pc, #532]	; (800151c <MX_GPIO_Init+0x268>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	4b82      	ldr	r3, [pc, #520]	; (800151c <MX_GPIO_Init+0x268>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	4a81      	ldr	r2, [pc, #516]	; (800151c <MX_GPIO_Init+0x268>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131e:	4b7f      	ldr	r3, [pc, #508]	; (800151c <MX_GPIO_Init+0x268>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132a:	4b7c      	ldr	r3, [pc, #496]	; (800151c <MX_GPIO_Init+0x268>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132e:	4a7b      	ldr	r2, [pc, #492]	; (800151c <MX_GPIO_Init+0x268>)
 8001330:	f043 0302 	orr.w	r3, r3, #2
 8001334:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001336:	4b79      	ldr	r3, [pc, #484]	; (800151c <MX_GPIO_Init+0x268>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001342:	4b76      	ldr	r3, [pc, #472]	; (800151c <MX_GPIO_Init+0x268>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	4a75      	ldr	r2, [pc, #468]	; (800151c <MX_GPIO_Init+0x268>)
 8001348:	f043 0308 	orr.w	r3, r3, #8
 800134c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134e:	4b73      	ldr	r3, [pc, #460]	; (800151c <MX_GPIO_Init+0x268>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 800135a:	2200      	movs	r2, #0
 800135c:	f240 1105 	movw	r1, #261	; 0x105
 8001360:	486f      	ldr	r0, [pc, #444]	; (8001520 <MX_GPIO_Init+0x26c>)
 8001362:	f002 f94f 	bl	8003604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8001366:	2200      	movs	r2, #0
 8001368:	f248 111c 	movw	r1, #33052	; 0x811c
 800136c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001370:	f002 f948 	bl	8003604 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001374:	2200      	movs	r2, #0
 8001376:	f24f 0134 	movw	r1, #61492	; 0xf034
 800137a:	486a      	ldr	r0, [pc, #424]	; (8001524 <MX_GPIO_Init+0x270>)
 800137c:	f002 f942 	bl	8003604 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	f242 0183 	movw	r1, #8323	; 0x2083
 8001386:	4868      	ldr	r0, [pc, #416]	; (8001528 <MX_GPIO_Init+0x274>)
 8001388:	f002 f93c 	bl	8003604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001392:	4866      	ldr	r0, [pc, #408]	; (800152c <MX_GPIO_Init+0x278>)
 8001394:	f002 f936 	bl	8003604 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001398:	f240 1305 	movw	r3, #261	; 0x105
 800139c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139e:	2301      	movs	r3, #1
 80013a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013aa:	f107 031c 	add.w	r3, r7, #28
 80013ae:	4619      	mov	r1, r3
 80013b0:	485b      	ldr	r0, [pc, #364]	; (8001520 <MX_GPIO_Init+0x26c>)
 80013b2:	f001 ff95 	bl	80032e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 80013b6:	237a      	movs	r3, #122	; 0x7a
 80013b8:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013ba:	4b5d      	ldr	r3, [pc, #372]	; (8001530 <MX_GPIO_Init+0x27c>)
 80013bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013c2:	f107 031c 	add.w	r3, r7, #28
 80013c6:	4619      	mov	r1, r3
 80013c8:	4855      	ldr	r0, [pc, #340]	; (8001520 <MX_GPIO_Init+0x26c>)
 80013ca:	f001 ff89 	bl	80032e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80013ce:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 80013d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013d4:	4b56      	ldr	r3, [pc, #344]	; (8001530 <MX_GPIO_Init+0x27c>)
 80013d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013dc:	f107 031c 	add.w	r3, r7, #28
 80013e0:	4619      	mov	r1, r3
 80013e2:	4852      	ldr	r0, [pc, #328]	; (800152c <MX_GPIO_Init+0x278>)
 80013e4:	f001 ff7c 	bl	80032e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 80013e8:	f248 131c 	movw	r3, #33052	; 0x811c
 80013ec:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ee:	2301      	movs	r3, #1
 80013f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f6:	2300      	movs	r3, #0
 80013f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fa:	f107 031c 	add.w	r3, r7, #28
 80013fe:	4619      	mov	r1, r3
 8001400:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001404:	f001 ff6c 	bl	80032e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001408:	2301      	movs	r3, #1
 800140a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800140c:	4b48      	ldr	r3, [pc, #288]	; (8001530 <MX_GPIO_Init+0x27c>)
 800140e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001414:	f107 031c 	add.w	r3, r7, #28
 8001418:	4619      	mov	r1, r3
 800141a:	4842      	ldr	r0, [pc, #264]	; (8001524 <MX_GPIO_Init+0x270>)
 800141c:	f001 ff60 	bl	80032e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001420:	2302      	movs	r3, #2
 8001422:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	2302      	movs	r3, #2
 8001426:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2300      	movs	r3, #0
 800142e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001430:	2302      	movs	r3, #2
 8001432:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001434:	f107 031c 	add.w	r3, r7, #28
 8001438:	4619      	mov	r1, r3
 800143a:	483a      	ldr	r0, [pc, #232]	; (8001524 <MX_GPIO_Init+0x270>)
 800143c:	f001 ff50 	bl	80032e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001440:	f24f 0334 	movw	r3, #61492	; 0xf034
 8001444:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001446:	2301      	movs	r3, #1
 8001448:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2300      	movs	r3, #0
 8001450:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001452:	f107 031c 	add.w	r3, r7, #28
 8001456:	4619      	mov	r1, r3
 8001458:	4832      	ldr	r0, [pc, #200]	; (8001524 <MX_GPIO_Init+0x270>)
 800145a:	f001 ff41 	bl	80032e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 800145e:	f64d 4304 	movw	r3, #56324	; 0xdc04
 8001462:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001464:	4b32      	ldr	r3, [pc, #200]	; (8001530 <MX_GPIO_Init+0x27c>)
 8001466:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800146c:	f107 031c 	add.w	r3, r7, #28
 8001470:	4619      	mov	r1, r3
 8001472:	482d      	ldr	r0, [pc, #180]	; (8001528 <MX_GPIO_Init+0x274>)
 8001474:	f001 ff34 	bl	80032e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8001478:	f242 0383 	movw	r3, #8323	; 0x2083
 800147c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147e:	2301      	movs	r3, #1
 8001480:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	2300      	movs	r3, #0
 8001488:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800148a:	f107 031c 	add.w	r3, r7, #28
 800148e:	4619      	mov	r1, r3
 8001490:	4825      	ldr	r0, [pc, #148]	; (8001528 <MX_GPIO_Init+0x274>)
 8001492:	f001 ff25 	bl	80032e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001496:	f44f 7310 	mov.w	r3, #576	; 0x240
 800149a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149c:	2301      	movs	r3, #1
 800149e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a4:	2300      	movs	r3, #0
 80014a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a8:	f107 031c 	add.w	r3, r7, #28
 80014ac:	4619      	mov	r1, r3
 80014ae:	481f      	ldr	r0, [pc, #124]	; (800152c <MX_GPIO_Init+0x278>)
 80014b0:	f001 ff16 	bl	80032e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80014b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ba:	2300      	movs	r3, #0
 80014bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014c2:	f107 031c 	add.w	r3, r7, #28
 80014c6:	4619      	mov	r1, r3
 80014c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014cc:	f001 ff08 	bl	80032e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80014d0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80014d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014de:	2303      	movs	r3, #3
 80014e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014e2:	230a      	movs	r3, #10
 80014e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e6:	f107 031c 	add.w	r3, r7, #28
 80014ea:	4619      	mov	r1, r3
 80014ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f0:	f001 fef6 	bl	80032e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80014f4:	2200      	movs	r2, #0
 80014f6:	2100      	movs	r1, #0
 80014f8:	2017      	movs	r0, #23
 80014fa:	f001 fdae 	bl	800305a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014fe:	2017      	movs	r0, #23
 8001500:	f001 fdc7 	bl	8003092 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001504:	2200      	movs	r2, #0
 8001506:	2100      	movs	r1, #0
 8001508:	2028      	movs	r0, #40	; 0x28
 800150a:	f001 fda6 	bl	800305a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800150e:	2028      	movs	r0, #40	; 0x28
 8001510:	f001 fdbf 	bl	8003092 <HAL_NVIC_EnableIRQ>

}
 8001514:	bf00      	nop
 8001516:	3730      	adds	r7, #48	; 0x30
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40021000 	.word	0x40021000
 8001520:	48001000 	.word	0x48001000
 8001524:	48000400 	.word	0x48000400
 8001528:	48000c00 	.word	0x48000c00
 800152c:	48000800 	.word	0x48000800
 8001530:	10110000 	.word	0x10110000

08001534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001538:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800153a:	e7fe      	b.n	800153a <Error_Handler+0x6>

0800153c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001542:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <HAL_MspInit+0x44>)
 8001544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001546:	4a0e      	ldr	r2, [pc, #56]	; (8001580 <HAL_MspInit+0x44>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6613      	str	r3, [r2, #96]	; 0x60
 800154e:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <HAL_MspInit+0x44>)
 8001550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <HAL_MspInit+0x44>)
 800155c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155e:	4a08      	ldr	r2, [pc, #32]	; (8001580 <HAL_MspInit+0x44>)
 8001560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001564:	6593      	str	r3, [r2, #88]	; 0x58
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_MspInit+0x44>)
 8001568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156e:	603b      	str	r3, [r7, #0]
 8001570:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	40021000 	.word	0x40021000

08001584 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	; 0x28
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a15      	ldr	r2, [pc, #84]	; (80015f8 <HAL_ADC_MspInit+0x74>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d123      	bne.n	80015ee <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <HAL_ADC_MspInit+0x78>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015aa:	4a14      	ldr	r2, [pc, #80]	; (80015fc <HAL_ADC_MspInit+0x78>)
 80015ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b2:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_ADC_MspInit+0x78>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015be:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <HAL_ADC_MspInit+0x78>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c2:	4a0e      	ldr	r2, [pc, #56]	; (80015fc <HAL_ADC_MspInit+0x78>)
 80015c4:	f043 0304 	orr.w	r3, r3, #4
 80015c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <HAL_ADC_MspInit+0x78>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ce:	f003 0304 	and.w	r3, r3, #4
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80015d6:	233f      	movs	r3, #63	; 0x3f
 80015d8:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015da:	230b      	movs	r3, #11
 80015dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	4619      	mov	r1, r3
 80015e8:	4805      	ldr	r0, [pc, #20]	; (8001600 <HAL_ADC_MspInit+0x7c>)
 80015ea:	f001 fe79 	bl	80032e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015ee:	bf00      	nop
 80015f0:	3728      	adds	r7, #40	; 0x28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	50040000 	.word	0x50040000
 80015fc:	40021000 	.word	0x40021000
 8001600:	48000800 	.word	0x48000800

08001604 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	; 0x28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 800161c:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <HAL_DFSDM_ChannelMspInit+0x84>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d12d      	bne.n	8001680 <HAL_DFSDM_ChannelMspInit+0x7c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001624:	4b19      	ldr	r3, [pc, #100]	; (800168c <HAL_DFSDM_ChannelMspInit+0x88>)
 8001626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001628:	4a18      	ldr	r2, [pc, #96]	; (800168c <HAL_DFSDM_ChannelMspInit+0x88>)
 800162a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800162e:	6613      	str	r3, [r2, #96]	; 0x60
 8001630:	4b16      	ldr	r3, [pc, #88]	; (800168c <HAL_DFSDM_ChannelMspInit+0x88>)
 8001632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001634:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800163c:	4b13      	ldr	r3, [pc, #76]	; (800168c <HAL_DFSDM_ChannelMspInit+0x88>)
 800163e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001640:	4a12      	ldr	r2, [pc, #72]	; (800168c <HAL_DFSDM_ChannelMspInit+0x88>)
 8001642:	f043 0310 	orr.w	r3, r3, #16
 8001646:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001648:	4b10      	ldr	r3, [pc, #64]	; (800168c <HAL_DFSDM_ChannelMspInit+0x88>)
 800164a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164c:	f003 0310 	and.w	r3, r3, #16
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001654:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	2302      	movs	r3, #2
 800165c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001662:	2300      	movs	r3, #0
 8001664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001666:	2306      	movs	r3, #6
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	4619      	mov	r1, r3
 8001670:	4807      	ldr	r0, [pc, #28]	; (8001690 <HAL_DFSDM_ChannelMspInit+0x8c>)
 8001672:	f001 fe35 	bl	80032e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001676:	4b04      	ldr	r3, [pc, #16]	; (8001688 <HAL_DFSDM_ChannelMspInit+0x84>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	3301      	adds	r3, #1
 800167c:	4a02      	ldr	r2, [pc, #8]	; (8001688 <HAL_DFSDM_ChannelMspInit+0x84>)
 800167e:	6013      	str	r3, [r2, #0]
  }

}
 8001680:	bf00      	nop
 8001682:	3728      	adds	r7, #40	; 0x28
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	200000b8 	.word	0x200000b8
 800168c:	40021000 	.word	0x40021000
 8001690:	48001000 	.word	0x48001000

08001694 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08c      	sub	sp, #48	; 0x30
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 031c 	add.w	r3, r7, #28
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a2f      	ldr	r2, [pc, #188]	; (8001770 <HAL_I2C_MspInit+0xdc>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d129      	bne.n	800170a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b6:	4b2f      	ldr	r3, [pc, #188]	; (8001774 <HAL_I2C_MspInit+0xe0>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ba:	4a2e      	ldr	r2, [pc, #184]	; (8001774 <HAL_I2C_MspInit+0xe0>)
 80016bc:	f043 0302 	orr.w	r3, r3, #2
 80016c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c2:	4b2c      	ldr	r3, [pc, #176]	; (8001774 <HAL_I2C_MspInit+0xe0>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	61bb      	str	r3, [r7, #24]
 80016cc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80016ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016d4:	2312      	movs	r3, #18
 80016d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d8:	2301      	movs	r3, #1
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016dc:	2303      	movs	r3, #3
 80016de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016e0:	2304      	movs	r3, #4
 80016e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e4:	f107 031c 	add.w	r3, r7, #28
 80016e8:	4619      	mov	r1, r3
 80016ea:	4823      	ldr	r0, [pc, #140]	; (8001778 <HAL_I2C_MspInit+0xe4>)
 80016ec:	f001 fdf8 	bl	80032e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016f0:	4b20      	ldr	r3, [pc, #128]	; (8001774 <HAL_I2C_MspInit+0xe0>)
 80016f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f4:	4a1f      	ldr	r2, [pc, #124]	; (8001774 <HAL_I2C_MspInit+0xe0>)
 80016f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016fa:	6593      	str	r3, [r2, #88]	; 0x58
 80016fc:	4b1d      	ldr	r3, [pc, #116]	; (8001774 <HAL_I2C_MspInit+0xe0>)
 80016fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001708:	e02d      	b.n	8001766 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C2)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a1b      	ldr	r2, [pc, #108]	; (800177c <HAL_I2C_MspInit+0xe8>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d128      	bne.n	8001766 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001714:	4b17      	ldr	r3, [pc, #92]	; (8001774 <HAL_I2C_MspInit+0xe0>)
 8001716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001718:	4a16      	ldr	r2, [pc, #88]	; (8001774 <HAL_I2C_MspInit+0xe0>)
 800171a:	f043 0302 	orr.w	r3, r3, #2
 800171e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001720:	4b14      	ldr	r3, [pc, #80]	; (8001774 <HAL_I2C_MspInit+0xe0>)
 8001722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800172c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001732:	2312      	movs	r3, #18
 8001734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001736:	2301      	movs	r3, #1
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173a:	2303      	movs	r3, #3
 800173c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800173e:	2304      	movs	r3, #4
 8001740:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001742:	f107 031c 	add.w	r3, r7, #28
 8001746:	4619      	mov	r1, r3
 8001748:	480b      	ldr	r0, [pc, #44]	; (8001778 <HAL_I2C_MspInit+0xe4>)
 800174a:	f001 fdc9 	bl	80032e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <HAL_I2C_MspInit+0xe0>)
 8001750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001752:	4a08      	ldr	r2, [pc, #32]	; (8001774 <HAL_I2C_MspInit+0xe0>)
 8001754:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001758:	6593      	str	r3, [r2, #88]	; 0x58
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_I2C_MspInit+0xe0>)
 800175c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
}
 8001766:	bf00      	nop
 8001768:	3730      	adds	r7, #48	; 0x30
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40005400 	.word	0x40005400
 8001774:	40021000 	.word	0x40021000
 8001778:	48000400 	.word	0x48000400
 800177c:	40005800 	.word	0x40005800

08001780 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	; 0x28
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  if(hospi->Instance==OCTOSPI1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a1d      	ldr	r2, [pc, #116]	; (8001814 <HAL_OSPI_MspInit+0x94>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d134      	bne.n	800180c <HAL_OSPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 80017a2:	4b1d      	ldr	r3, [pc, #116]	; (8001818 <HAL_OSPI_MspInit+0x98>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a6:	4a1c      	ldr	r2, [pc, #112]	; (8001818 <HAL_OSPI_MspInit+0x98>)
 80017a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80017ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ae:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <HAL_OSPI_MspInit+0x98>)
 80017b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80017ba:	4b17      	ldr	r3, [pc, #92]	; (8001818 <HAL_OSPI_MspInit+0x98>)
 80017bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017be:	4a16      	ldr	r2, [pc, #88]	; (8001818 <HAL_OSPI_MspInit+0x98>)
 80017c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c4:	6513      	str	r3, [r2, #80]	; 0x50
 80017c6:	4b14      	ldr	r3, [pc, #80]	; (8001818 <HAL_OSPI_MspInit+0x98>)
 80017c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017d2:	4b11      	ldr	r3, [pc, #68]	; (8001818 <HAL_OSPI_MspInit+0x98>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d6:	4a10      	ldr	r2, [pc, #64]	; (8001818 <HAL_OSPI_MspInit+0x98>)
 80017d8:	f043 0310 	orr.w	r3, r3, #16
 80017dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017de:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <HAL_OSPI_MspInit+0x98>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	f003 0310 	and.w	r3, r3, #16
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80017ea:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80017ee:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f0:	2302      	movs	r3, #2
 80017f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f8:	2303      	movs	r3, #3
 80017fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80017fc:	230a      	movs	r3, #10
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	4619      	mov	r1, r3
 8001806:	4805      	ldr	r0, [pc, #20]	; (800181c <HAL_OSPI_MspInit+0x9c>)
 8001808:	f001 fd6a 	bl	80032e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 800180c:	bf00      	nop
 800180e:	3728      	adds	r7, #40	; 0x28
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	a0001000 	.word	0xa0001000
 8001818:	40021000 	.word	0x40021000
 800181c:	48001000 	.word	0x48001000

08001820 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08c      	sub	sp, #48	; 0x30
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 031c 	add.w	r3, r7, #28
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a2f      	ldr	r2, [pc, #188]	; (80018fc <HAL_SPI_MspInit+0xdc>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d129      	bne.n	8001896 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001842:	4b2f      	ldr	r3, [pc, #188]	; (8001900 <HAL_SPI_MspInit+0xe0>)
 8001844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001846:	4a2e      	ldr	r2, [pc, #184]	; (8001900 <HAL_SPI_MspInit+0xe0>)
 8001848:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800184c:	6613      	str	r3, [r2, #96]	; 0x60
 800184e:	4b2c      	ldr	r3, [pc, #176]	; (8001900 <HAL_SPI_MspInit+0xe0>)
 8001850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001852:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001856:	61bb      	str	r3, [r7, #24]
 8001858:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185a:	4b29      	ldr	r3, [pc, #164]	; (8001900 <HAL_SPI_MspInit+0xe0>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185e:	4a28      	ldr	r2, [pc, #160]	; (8001900 <HAL_SPI_MspInit+0xe0>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001866:	4b26      	ldr	r3, [pc, #152]	; (8001900 <HAL_SPI_MspInit+0xe0>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001872:	23e0      	movs	r3, #224	; 0xe0
 8001874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	2302      	movs	r3, #2
 8001878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187e:	2303      	movs	r3, #3
 8001880:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001882:	2305      	movs	r3, #5
 8001884:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001886:	f107 031c 	add.w	r3, r7, #28
 800188a:	4619      	mov	r1, r3
 800188c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001890:	f001 fd26 	bl	80032e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001894:	e02d      	b.n	80018f2 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a1a      	ldr	r2, [pc, #104]	; (8001904 <HAL_SPI_MspInit+0xe4>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d128      	bne.n	80018f2 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80018a0:	4b17      	ldr	r3, [pc, #92]	; (8001900 <HAL_SPI_MspInit+0xe0>)
 80018a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a4:	4a16      	ldr	r2, [pc, #88]	; (8001900 <HAL_SPI_MspInit+0xe0>)
 80018a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018aa:	6593      	str	r3, [r2, #88]	; 0x58
 80018ac:	4b14      	ldr	r3, [pc, #80]	; (8001900 <HAL_SPI_MspInit+0xe0>)
 80018ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018b8:	4b11      	ldr	r3, [pc, #68]	; (8001900 <HAL_SPI_MspInit+0xe0>)
 80018ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018bc:	4a10      	ldr	r2, [pc, #64]	; (8001900 <HAL_SPI_MspInit+0xe0>)
 80018be:	f043 0304 	orr.w	r3, r3, #4
 80018c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018c4:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <HAL_SPI_MspInit+0xe0>)
 80018c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80018d0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80018d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	2302      	movs	r3, #2
 80018d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018de:	2303      	movs	r3, #3
 80018e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018e2:	2306      	movs	r3, #6
 80018e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e6:	f107 031c 	add.w	r3, r7, #28
 80018ea:	4619      	mov	r1, r3
 80018ec:	4806      	ldr	r0, [pc, #24]	; (8001908 <HAL_SPI_MspInit+0xe8>)
 80018ee:	f001 fcf7 	bl	80032e0 <HAL_GPIO_Init>
}
 80018f2:	bf00      	nop
 80018f4:	3730      	adds	r7, #48	; 0x30
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40013000 	.word	0x40013000
 8001900:	40021000 	.word	0x40021000
 8001904:	40003c00 	.word	0x40003c00
 8001908:	48000800 	.word	0x48000800

0800190c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b090      	sub	sp, #64	; 0x40
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a5d      	ldr	r2, [pc, #372]	; (8001aa0 <HAL_UART_MspInit+0x194>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d129      	bne.n	8001982 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800192e:	4b5d      	ldr	r3, [pc, #372]	; (8001aa4 <HAL_UART_MspInit+0x198>)
 8001930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001932:	4a5c      	ldr	r2, [pc, #368]	; (8001aa4 <HAL_UART_MspInit+0x198>)
 8001934:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001938:	6593      	str	r3, [r2, #88]	; 0x58
 800193a:	4b5a      	ldr	r3, [pc, #360]	; (8001aa4 <HAL_UART_MspInit+0x198>)
 800193c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001942:	62bb      	str	r3, [r7, #40]	; 0x28
 8001944:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001946:	4b57      	ldr	r3, [pc, #348]	; (8001aa4 <HAL_UART_MspInit+0x198>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194a:	4a56      	ldr	r2, [pc, #344]	; (8001aa4 <HAL_UART_MspInit+0x198>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001952:	4b54      	ldr	r3, [pc, #336]	; (8001aa4 <HAL_UART_MspInit+0x198>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800195e:	2303      	movs	r3, #3
 8001960:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001962:	2302      	movs	r3, #2
 8001964:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196a:	2303      	movs	r3, #3
 800196c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800196e:	2308      	movs	r3, #8
 8001970:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001972:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001976:	4619      	mov	r1, r3
 8001978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800197c:	f001 fcb0 	bl	80032e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001980:	e089      	b.n	8001a96 <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART1)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a48      	ldr	r2, [pc, #288]	; (8001aa8 <HAL_UART_MspInit+0x19c>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d128      	bne.n	80019de <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART1_CLK_ENABLE();
 800198c:	4b45      	ldr	r3, [pc, #276]	; (8001aa4 <HAL_UART_MspInit+0x198>)
 800198e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001990:	4a44      	ldr	r2, [pc, #272]	; (8001aa4 <HAL_UART_MspInit+0x198>)
 8001992:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001996:	6613      	str	r3, [r2, #96]	; 0x60
 8001998:	4b42      	ldr	r3, [pc, #264]	; (8001aa4 <HAL_UART_MspInit+0x198>)
 800199a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800199c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a0:	623b      	str	r3, [r7, #32]
 80019a2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a4:	4b3f      	ldr	r3, [pc, #252]	; (8001aa4 <HAL_UART_MspInit+0x198>)
 80019a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a8:	4a3e      	ldr	r2, [pc, #248]	; (8001aa4 <HAL_UART_MspInit+0x198>)
 80019aa:	f043 0302 	orr.w	r3, r3, #2
 80019ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019b0:	4b3c      	ldr	r3, [pc, #240]	; (8001aa4 <HAL_UART_MspInit+0x198>)
 80019b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	61fb      	str	r3, [r7, #28]
 80019ba:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80019bc:	23c0      	movs	r3, #192	; 0xc0
 80019be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	2302      	movs	r3, #2
 80019c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c8:	2303      	movs	r3, #3
 80019ca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019cc:	2307      	movs	r3, #7
 80019ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019d4:	4619      	mov	r1, r3
 80019d6:	4835      	ldr	r0, [pc, #212]	; (8001aac <HAL_UART_MspInit+0x1a0>)
 80019d8:	f001 fc82 	bl	80032e0 <HAL_GPIO_Init>
}
 80019dc:	e05b      	b.n	8001a96 <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART2)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a33      	ldr	r2, [pc, #204]	; (8001ab0 <HAL_UART_MspInit+0x1a4>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d128      	bne.n	8001a3a <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019e8:	4b2e      	ldr	r3, [pc, #184]	; (8001aa4 <HAL_UART_MspInit+0x198>)
 80019ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ec:	4a2d      	ldr	r2, [pc, #180]	; (8001aa4 <HAL_UART_MspInit+0x198>)
 80019ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f2:	6593      	str	r3, [r2, #88]	; 0x58
 80019f4:	4b2b      	ldr	r3, [pc, #172]	; (8001aa4 <HAL_UART_MspInit+0x198>)
 80019f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fc:	61bb      	str	r3, [r7, #24]
 80019fe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a00:	4b28      	ldr	r3, [pc, #160]	; (8001aa4 <HAL_UART_MspInit+0x198>)
 8001a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a04:	4a27      	ldr	r2, [pc, #156]	; (8001aa4 <HAL_UART_MspInit+0x198>)
 8001a06:	f043 0308 	orr.w	r3, r3, #8
 8001a0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a0c:	4b25      	ldr	r3, [pc, #148]	; (8001aa4 <HAL_UART_MspInit+0x198>)
 8001a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a10:	f003 0308 	and.w	r3, r3, #8
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001a18:	2378      	movs	r3, #120	; 0x78
 8001a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a24:	2303      	movs	r3, #3
 8001a26:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a28:	2307      	movs	r3, #7
 8001a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a30:	4619      	mov	r1, r3
 8001a32:	4820      	ldr	r0, [pc, #128]	; (8001ab4 <HAL_UART_MspInit+0x1a8>)
 8001a34:	f001 fc54 	bl	80032e0 <HAL_GPIO_Init>
}
 8001a38:	e02d      	b.n	8001a96 <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART3)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a1e      	ldr	r2, [pc, #120]	; (8001ab8 <HAL_UART_MspInit+0x1ac>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d128      	bne.n	8001a96 <HAL_UART_MspInit+0x18a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a44:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <HAL_UART_MspInit+0x198>)
 8001a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a48:	4a16      	ldr	r2, [pc, #88]	; (8001aa4 <HAL_UART_MspInit+0x198>)
 8001a4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a4e:	6593      	str	r3, [r2, #88]	; 0x58
 8001a50:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <HAL_UART_MspInit+0x198>)
 8001a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <HAL_UART_MspInit+0x198>)
 8001a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a60:	4a10      	ldr	r2, [pc, #64]	; (8001aa4 <HAL_UART_MspInit+0x198>)
 8001a62:	f043 0308 	orr.w	r3, r3, #8
 8001a66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a68:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <HAL_UART_MspInit+0x198>)
 8001a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6c:	f003 0308 	and.w	r3, r3, #8
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001a74:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a82:	2303      	movs	r3, #3
 8001a84:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a86:	2307      	movs	r3, #7
 8001a88:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4808      	ldr	r0, [pc, #32]	; (8001ab4 <HAL_UART_MspInit+0x1a8>)
 8001a92:	f001 fc25 	bl	80032e0 <HAL_GPIO_Init>
}
 8001a96:	bf00      	nop
 8001a98:	3740      	adds	r7, #64	; 0x40
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40004c00 	.word	0x40004c00
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40013800 	.word	0x40013800
 8001aac:	48000400 	.word	0x48000400
 8001ab0:	40004400 	.word	0x40004400
 8001ab4:	48000c00 	.word	0x48000c00
 8001ab8:	40004800 	.word	0x40004800

08001abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <NMI_Handler+0x4>

08001ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ac6:	e7fe      	b.n	8001ac6 <HardFault_Handler+0x4>

08001ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001acc:	e7fe      	b.n	8001acc <MemManage_Handler+0x4>

08001ace <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ad2:	e7fe      	b.n	8001ad2 <BusFault_Handler+0x4>

08001ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad8:	e7fe      	b.n	8001ad8 <UsageFault_Handler+0x4>

08001ada <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b08:	f000 f91a 	bl	8001d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001b14:	2020      	movs	r0, #32
 8001b16:	f001 fd8d 	bl	8003634 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001b1a:	2040      	movs	r0, #64	; 0x40
 8001b1c:	f001 fd8a 	bl	8003634 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001b20:	2080      	movs	r0, #128	; 0x80
 8001b22:	f001 fd87 	bl	8003634 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001b26:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001b2a:	f001 fd83 	bl	8003634 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001b36:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001b3a:	f001 fd7b 	bl	8003634 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001b3e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001b42:	f001 fd77 	bl	8003634 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001b46:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001b4a:	f001 fd73 	bl	8003634 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b4e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b52:	f001 fd6f 	bl	8003634 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001b56:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001b5a:	f001 fd6b 	bl	8003634 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001b5e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001b62:	f001 fd67 	bl	8003634 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b74:	4a14      	ldr	r2, [pc, #80]	; (8001bc8 <_sbrk+0x5c>)
 8001b76:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <_sbrk+0x60>)
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b80:	4b13      	ldr	r3, [pc, #76]	; (8001bd0 <_sbrk+0x64>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d102      	bne.n	8001b8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b88:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <_sbrk+0x64>)
 8001b8a:	4a12      	ldr	r2, [pc, #72]	; (8001bd4 <_sbrk+0x68>)
 8001b8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b8e:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <_sbrk+0x64>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d207      	bcs.n	8001bac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b9c:	f004 ff30 	bl	8006a00 <__errno>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	230c      	movs	r3, #12
 8001ba4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8001baa:	e009      	b.n	8001bc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bac:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <_sbrk+0x64>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bb2:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <_sbrk+0x64>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4413      	add	r3, r2
 8001bba:	4a05      	ldr	r2, [pc, #20]	; (8001bd0 <_sbrk+0x64>)
 8001bbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3718      	adds	r7, #24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	200a0000 	.word	0x200a0000
 8001bcc:	00000400 	.word	0x00000400
 8001bd0:	200000bc 	.word	0x200000bc
 8001bd4:	20000578 	.word	0x20000578

08001bd8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bdc:	4b17      	ldr	r3, [pc, #92]	; (8001c3c <SystemInit+0x64>)
 8001bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001be2:	4a16      	ldr	r2, [pc, #88]	; (8001c3c <SystemInit+0x64>)
 8001be4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001be8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001bec:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <SystemInit+0x68>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a13      	ldr	r2, [pc, #76]	; (8001c40 <SystemInit+0x68>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <SystemInit+0x68>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <SystemInit+0x68>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a0f      	ldr	r2, [pc, #60]	; (8001c40 <SystemInit+0x68>)
 8001c04:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001c08:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001c0c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001c0e:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <SystemInit+0x68>)
 8001c10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c14:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <SystemInit+0x68>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a09      	ldr	r2, [pc, #36]	; (8001c40 <SystemInit+0x68>)
 8001c1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c20:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001c22:	4b07      	ldr	r3, [pc, #28]	; (8001c40 <SystemInit+0x68>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c28:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <SystemInit+0x64>)
 8001c2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c2e:	609a      	str	r2, [r3, #8]
#endif
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	e000ed00 	.word	0xe000ed00
 8001c40:	40021000 	.word	0x40021000

08001c44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c7c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c48:	f7ff ffc6 	bl	8001bd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001c4c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001c4e:	e003      	b.n	8001c58 <LoopCopyDataInit>

08001c50 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001c52:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001c54:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001c56:	3104      	adds	r1, #4

08001c58 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001c58:	480a      	ldr	r0, [pc, #40]	; (8001c84 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001c5a:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001c5c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001c5e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001c60:	d3f6      	bcc.n	8001c50 <CopyDataInit>
	ldr	r2, =_sbss
 8001c62:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001c64:	e002      	b.n	8001c6c <LoopFillZerobss>

08001c66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001c66:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001c68:	f842 3b04 	str.w	r3, [r2], #4

08001c6c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001c6c:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <LoopForever+0x16>)
	cmp	r2, r3
 8001c6e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001c70:	d3f9      	bcc.n	8001c66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c72:	f004 fecb 	bl	8006a0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c76:	f7fe fc9b 	bl	80005b0 <main>

08001c7a <LoopForever>:

LoopForever:
    b LoopForever
 8001c7a:	e7fe      	b.n	8001c7a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c7c:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001c80:	0800735c 	.word	0x0800735c
	ldr	r0, =_sdata
 8001c84:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001c88:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001c8c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001c90:	20000574 	.word	0x20000574

08001c94 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c94:	e7fe      	b.n	8001c94 <ADC1_IRQHandler>

08001c96 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca0:	2003      	movs	r0, #3
 8001ca2:	f001 f9cf 	bl	8003044 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	f000 f80e 	bl	8001cc8 <HAL_InitTick>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d002      	beq.n	8001cb8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	71fb      	strb	r3, [r7, #7]
 8001cb6:	e001      	b.n	8001cbc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cb8:	f7ff fc40 	bl	800153c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001cd4:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <HAL_InitTick+0x6c>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d023      	beq.n	8001d24 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001cdc:	4b16      	ldr	r3, [pc, #88]	; (8001d38 <HAL_InitTick+0x70>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <HAL_InitTick+0x6c>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f001 f9db 	bl	80030ae <HAL_SYSTICK_Config>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10f      	bne.n	8001d1e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b0f      	cmp	r3, #15
 8001d02:	d809      	bhi.n	8001d18 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d04:	2200      	movs	r2, #0
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	f04f 30ff 	mov.w	r0, #4294967295
 8001d0c:	f001 f9a5 	bl	800305a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d10:	4a0a      	ldr	r2, [pc, #40]	; (8001d3c <HAL_InitTick+0x74>)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	e007      	b.n	8001d28 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	73fb      	strb	r3, [r7, #15]
 8001d1c:	e004      	b.n	8001d28 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	73fb      	strb	r3, [r7, #15]
 8001d22:	e001      	b.n	8001d28 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000008 	.word	0x20000008
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	20000004 	.word	0x20000004

08001d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_IncTick+0x20>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_IncTick+0x24>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4413      	add	r3, r2
 8001d50:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <HAL_IncTick+0x24>)
 8001d52:	6013      	str	r3, [r2, #0]
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	20000008 	.word	0x20000008
 8001d64:	2000056c 	.word	0x2000056c

08001d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d6c:	4b03      	ldr	r3, [pc, #12]	; (8001d7c <HAL_GetTick+0x14>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	2000056c 	.word	0x2000056c

08001d80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d88:	f7ff ffee 	bl	8001d68 <HAL_GetTick>
 8001d8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d98:	d005      	beq.n	8001da6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d9a:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <HAL_Delay+0x40>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4413      	add	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001da6:	bf00      	nop
 8001da8:	f7ff ffde 	bl	8001d68 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d8f7      	bhi.n	8001da8 <HAL_Delay+0x28>
  {
  }
}
 8001db8:	bf00      	nop
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20000008 	.word	0x20000008

08001dc4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	609a      	str	r2, [r3, #8]
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	609a      	str	r2, [r3, #8]
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b087      	sub	sp, #28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
 8001e38:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	3360      	adds	r3, #96	; 0x60
 8001e3e:	461a      	mov	r2, r3
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <LL_ADC_SetOffset+0x44>)
 8001e4e:	4013      	ands	r3, r2
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e64:	bf00      	nop
 8001e66:	371c      	adds	r7, #28
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	03fff000 	.word	0x03fff000

08001e74 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3360      	adds	r3, #96	; 0x60
 8001e82:	461a      	mov	r2, r3
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3714      	adds	r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b087      	sub	sp, #28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	3360      	adds	r3, #96	; 0x60
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001eca:	bf00      	nop
 8001ecc:	371c      	adds	r7, #28
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	431a      	orrs	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	615a      	str	r2, [r3, #20]
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f10:	2301      	movs	r3, #1
 8001f12:	e000      	b.n	8001f16 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b087      	sub	sp, #28
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	60f8      	str	r0, [r7, #12]
 8001f2a:	60b9      	str	r1, [r7, #8]
 8001f2c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	3330      	adds	r3, #48	; 0x30
 8001f32:	461a      	mov	r2, r3
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	0a1b      	lsrs	r3, r3, #8
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	f003 030c 	and.w	r3, r3, #12
 8001f3e:	4413      	add	r3, r2
 8001f40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	f003 031f 	and.w	r3, r3, #31
 8001f4c:	211f      	movs	r1, #31
 8001f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	401a      	ands	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	0e9b      	lsrs	r3, r3, #26
 8001f5a:	f003 011f 	and.w	r1, r3, #31
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	f003 031f 	and.w	r3, r3, #31
 8001f64:	fa01 f303 	lsl.w	r3, r1, r3
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f6e:	bf00      	nop
 8001f70:	371c      	adds	r7, #28
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b087      	sub	sp, #28
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	60f8      	str	r0, [r7, #12]
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	3314      	adds	r3, #20
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	0e5b      	lsrs	r3, r3, #25
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	f003 0304 	and.w	r3, r3, #4
 8001f96:	4413      	add	r3, r2
 8001f98:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	0d1b      	lsrs	r3, r3, #20
 8001fa2:	f003 031f 	and.w	r3, r3, #31
 8001fa6:	2107      	movs	r1, #7
 8001fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	401a      	ands	r2, r3
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	0d1b      	lsrs	r3, r3, #20
 8001fb4:	f003 031f 	and.w	r3, r3, #31
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001fc4:	bf00      	nop
 8001fc6:	371c      	adds	r7, #28
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	401a      	ands	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f003 0318 	and.w	r3, r3, #24
 8001ff2:	4908      	ldr	r1, [pc, #32]	; (8002014 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ff4:	40d9      	lsrs	r1, r3
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	400b      	ands	r3, r1
 8001ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ffe:	431a      	orrs	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002006:	bf00      	nop
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	0007ffff 	.word	0x0007ffff

08002018 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002028:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	6093      	str	r3, [r2, #8]
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800204c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002050:	d101      	bne.n	8002056 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002074:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002078:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020a0:	d101      	bne.n	80020a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020c8:	f043 0201 	orr.w	r2, r3, #1
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d101      	bne.n	80020f4 <LL_ADC_IsEnabled+0x18>
 80020f0:	2301      	movs	r3, #1
 80020f2:	e000      	b.n	80020f6 <LL_ADC_IsEnabled+0x1a>
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002112:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002116:	f043 0204 	orr.w	r2, r3, #4
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 0304 	and.w	r3, r3, #4
 800213a:	2b04      	cmp	r3, #4
 800213c:	d101      	bne.n	8002142 <LL_ADC_REG_IsConversionOngoing+0x18>
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 0308 	and.w	r3, r3, #8
 8002160:	2b08      	cmp	r3, #8
 8002162:	d101      	bne.n	8002168 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002164:	2301      	movs	r3, #1
 8002166:	e000      	b.n	800216a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
	...

08002178 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b088      	sub	sp, #32
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002180:	2300      	movs	r3, #0
 8002182:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002184:	2300      	movs	r3, #0
 8002186:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e12d      	b.n	80023ee <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219c:	2b00      	cmp	r3, #0
 800219e:	d109      	bne.n	80021b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f7ff f9ef 	bl	8001584 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff ff3f 	bl	800203c <LL_ADC_IsDeepPowerDownEnabled>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d004      	beq.n	80021ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff ff25 	bl	8002018 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff ff5a 	bl	800208c <LL_ADC_IsInternalRegulatorEnabled>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d113      	bne.n	8002206 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff ff3e 	bl	8002064 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80021e8:	4b83      	ldr	r3, [pc, #524]	; (80023f8 <HAL_ADC_Init+0x280>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	099b      	lsrs	r3, r3, #6
 80021ee:	4a83      	ldr	r2, [pc, #524]	; (80023fc <HAL_ADC_Init+0x284>)
 80021f0:	fba2 2303 	umull	r2, r3, r2, r3
 80021f4:	099b      	lsrs	r3, r3, #6
 80021f6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021f8:	e002      	b.n	8002200 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	3b01      	subs	r3, #1
 80021fe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f9      	bne.n	80021fa <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff ff3e 	bl	800208c <LL_ADC_IsInternalRegulatorEnabled>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10d      	bne.n	8002232 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221a:	f043 0210 	orr.w	r2, r3, #16
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002226:	f043 0201 	orr.w	r2, r3, #1
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff ff77 	bl	800212a <LL_ADC_REG_IsConversionOngoing>
 800223c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002242:	f003 0310 	and.w	r3, r3, #16
 8002246:	2b00      	cmp	r3, #0
 8002248:	f040 80c8 	bne.w	80023dc <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	2b00      	cmp	r3, #0
 8002250:	f040 80c4 	bne.w	80023dc <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002258:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800225c:	f043 0202 	orr.w	r2, r3, #2
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ff37 	bl	80020dc <LL_ADC_IsEnabled>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d10b      	bne.n	800228c <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002274:	4862      	ldr	r0, [pc, #392]	; (8002400 <HAL_ADC_Init+0x288>)
 8002276:	f7ff ff31 	bl	80020dc <LL_ADC_IsEnabled>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d105      	bne.n	800228c <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	4619      	mov	r1, r3
 8002286:	485f      	ldr	r0, [pc, #380]	; (8002404 <HAL_ADC_Init+0x28c>)
 8002288:	f7ff fd9c 	bl	8001dc4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	7e5b      	ldrb	r3, [r3, #25]
 8002290:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002296:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800229c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80022a2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022aa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d106      	bne.n	80022c8 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	3b01      	subs	r3, #1
 80022c0:	045b      	lsls	r3, r3, #17
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d009      	beq.n	80022e4 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022dc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68da      	ldr	r2, [r3, #12]
 80022ea:	4b47      	ldr	r3, [pc, #284]	; (8002408 <HAL_ADC_Init+0x290>)
 80022ec:	4013      	ands	r3, r2
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6812      	ldr	r2, [r2, #0]
 80022f2:	69b9      	ldr	r1, [r7, #24]
 80022f4:	430b      	orrs	r3, r1
 80022f6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff ff14 	bl	800212a <LL_ADC_REG_IsConversionOngoing>
 8002302:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff ff21 	bl	8002150 <LL_ADC_INJ_IsConversionOngoing>
 800230e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d140      	bne.n	8002398 <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d13d      	bne.n	8002398 <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	7e1b      	ldrb	r3, [r3, #24]
 8002324:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002326:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800232e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002330:	4313      	orrs	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800233e:	f023 0306 	bic.w	r3, r3, #6
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6812      	ldr	r2, [r2, #0]
 8002346:	69b9      	ldr	r1, [r7, #24]
 8002348:	430b      	orrs	r3, r1
 800234a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002352:	2b01      	cmp	r3, #1
 8002354:	d118      	bne.n	8002388 <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002360:	f023 0304 	bic.w	r3, r3, #4
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800236c:	4311      	orrs	r1, r2
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002372:	4311      	orrs	r1, r2
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002378:	430a      	orrs	r2, r1
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f042 0201 	orr.w	r2, r2, #1
 8002384:	611a      	str	r2, [r3, #16]
 8002386:	e007      	b.n	8002398 <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	691a      	ldr	r2, [r3, #16]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0201 	bic.w	r2, r2, #1
 8002396:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d10c      	bne.n	80023ba <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	f023 010f 	bic.w	r1, r3, #15
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	1e5a      	subs	r2, r3, #1
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	631a      	str	r2, [r3, #48]	; 0x30
 80023b8:	e007      	b.n	80023ca <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 020f 	bic.w	r2, r2, #15
 80023c8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ce:	f023 0303 	bic.w	r3, r3, #3
 80023d2:	f043 0201 	orr.w	r2, r3, #1
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	659a      	str	r2, [r3, #88]	; 0x58
 80023da:	e007      	b.n	80023ec <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e0:	f043 0210 	orr.w	r2, r3, #16
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80023ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3720      	adds	r7, #32
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000000 	.word	0x20000000
 80023fc:	053e2d63 	.word	0x053e2d63
 8002400:	50040000 	.word	0x50040000
 8002404:	50040300 	.word	0x50040300
 8002408:	fff0c007 	.word	0xfff0c007

0800240c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff fe86 	bl	800212a <LL_ADC_REG_IsConversionOngoing>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d14f      	bne.n	80024c4 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800242a:	2b01      	cmp	r3, #1
 800242c:	d101      	bne.n	8002432 <HAL_ADC_Start+0x26>
 800242e:	2302      	movs	r3, #2
 8002430:	e04b      	b.n	80024ca <HAL_ADC_Start+0xbe>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 fcd8 	bl	8002df0 <ADC_Enable>
 8002440:	4603      	mov	r3, r0
 8002442:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002444:	7bfb      	ldrb	r3, [r7, #15]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d137      	bne.n	80024ba <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002452:	f023 0301 	bic.w	r3, r3, #1
 8002456:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002462:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800246a:	d106      	bne.n	800247a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002470:	f023 0206 	bic.w	r2, r3, #6
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	65da      	str	r2, [r3, #92]	; 0x5c
 8002478:	e002      	b.n	8002480 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	221c      	movs	r2, #28
 8002486:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d007      	beq.n	80024ae <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff fe25 	bl	8002102 <LL_ADC_REG_StartConversion>
 80024b8:	e006      	b.n	80024c8 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80024c2:	e001      	b.n	80024c8 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024c4:	2302      	movs	r3, #2
 80024c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b086      	sub	sp, #24
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
 80024da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	d102      	bne.n	80024ea <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80024e4:	2308      	movs	r3, #8
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	e010      	b.n	800250c <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d007      	beq.n	8002508 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fc:	f043 0220 	orr.w	r2, r3, #32
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e068      	b.n	80025da <HAL_ADC_PollForConversion+0x108>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002508:	2304      	movs	r3, #4
 800250a:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800250c:	f7ff fc2c 	bl	8001d68 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002512:	e01a      	b.n	800254a <HAL_ADC_PollForConversion+0x78>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251a:	d016      	beq.n	800254a <HAL_ADC_PollForConversion+0x78>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800251c:	f7ff fc24 	bl	8001d68 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	429a      	cmp	r2, r3
 800252a:	d302      	bcc.n	8002532 <HAL_ADC_PollForConversion+0x60>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10b      	bne.n	800254a <HAL_ADC_PollForConversion+0x78>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002536:	f043 0204 	orr.w	r2, r3, #4
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	659a      	str	r2, [r3, #88]	; 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e047      	b.n	80025da <HAL_ADC_PollForConversion+0x108>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	4013      	ands	r3, r2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0dd      	beq.n	8002514 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff fcc7 	bl	8001efc <LL_ADC_REG_IsTriggerSourceSWStart>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d01c      	beq.n	80025ae <HAL_ADC_PollForConversion+0xdc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	7e5b      	ldrb	r3, [r3, #25]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d118      	bne.n	80025ae <HAL_ADC_PollForConversion+0xdc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b08      	cmp	r3, #8
 8002588:	d111      	bne.n	80025ae <HAL_ADC_PollForConversion+0xdc>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d105      	bne.n	80025ae <HAL_ADC_PollForConversion+0xdc>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a6:	f043 0201 	orr.w	r2, r3, #1
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	d104      	bne.n	80025c6 <HAL_ADC_PollForConversion+0xf4>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2208      	movs	r2, #8
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	e008      	b.n	80025d8 <HAL_ADC_PollForConversion+0x106>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d103      	bne.n	80025d8 <HAL_ADC_PollForConversion+0x106>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	220c      	movs	r2, #12
 80025d6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b0b6      	sub	sp, #216	; 0xd8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002606:	2300      	movs	r3, #0
 8002608:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800260c:	2300      	movs	r3, #0
 800260e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002616:	2b01      	cmp	r3, #1
 8002618:	d101      	bne.n	800261e <HAL_ADC_ConfigChannel+0x22>
 800261a:	2302      	movs	r3, #2
 800261c:	e3d4      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x7cc>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff fd7d 	bl	800212a <LL_ADC_REG_IsConversionOngoing>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	f040 83b9 	bne.w	8002daa <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b05      	cmp	r3, #5
 800263e:	d824      	bhi.n	800268a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	3b02      	subs	r3, #2
 8002646:	2b03      	cmp	r3, #3
 8002648:	d81b      	bhi.n	8002682 <HAL_ADC_ConfigChannel+0x86>
 800264a:	a201      	add	r2, pc, #4	; (adr r2, 8002650 <HAL_ADC_ConfigChannel+0x54>)
 800264c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002650:	08002661 	.word	0x08002661
 8002654:	08002669 	.word	0x08002669
 8002658:	08002671 	.word	0x08002671
 800265c:	08002679 	.word	0x08002679
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	220c      	movs	r2, #12
 8002664:	605a      	str	r2, [r3, #4]
          break;
 8002666:	e011      	b.n	800268c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	2212      	movs	r2, #18
 800266c:	605a      	str	r2, [r3, #4]
          break;
 800266e:	e00d      	b.n	800268c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	2218      	movs	r2, #24
 8002674:	605a      	str	r2, [r3, #4]
          break;
 8002676:	e009      	b.n	800268c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800267e:	605a      	str	r2, [r3, #4]
          break;
 8002680:	e004      	b.n	800268c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	2206      	movs	r2, #6
 8002686:	605a      	str	r2, [r3, #4]
          break;
 8002688:	e000      	b.n	800268c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800268a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6818      	ldr	r0, [r3, #0]
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	6859      	ldr	r1, [r3, #4]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	461a      	mov	r2, r3
 800269a:	f7ff fc42 	bl	8001f22 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff fd41 	bl	800212a <LL_ADC_REG_IsConversionOngoing>
 80026a8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff fd4d 	bl	8002150 <LL_ADC_INJ_IsConversionOngoing>
 80026b6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f040 81c1 	bne.w	8002a46 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f040 81bc 	bne.w	8002a46 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026d6:	d10f      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6818      	ldr	r0, [r3, #0]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2200      	movs	r2, #0
 80026e2:	4619      	mov	r1, r3
 80026e4:	f7ff fc49 	bl	8001f7a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff fbf0 	bl	8001ed6 <LL_ADC_SetSamplingTimeCommonConfig>
 80026f6:	e00e      	b.n	8002716 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6818      	ldr	r0, [r3, #0]
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	6819      	ldr	r1, [r3, #0]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	461a      	mov	r2, r3
 8002706:	f7ff fc38 	bl	8001f7a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2100      	movs	r1, #0
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff fbe0 	bl	8001ed6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	695a      	ldr	r2, [r3, #20]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	08db      	lsrs	r3, r3, #3
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	2b04      	cmp	r3, #4
 8002736:	d00a      	beq.n	800274e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6818      	ldr	r0, [r3, #0]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	6919      	ldr	r1, [r3, #16]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002748:	f7ff fb70 	bl	8001e2c <LL_ADC_SetOffset>
 800274c:	e17b      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2100      	movs	r1, #0
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff fb8d 	bl	8001e74 <LL_ADC_GetOffsetChannel>
 800275a:	4603      	mov	r3, r0
 800275c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10a      	bne.n	800277a <HAL_ADC_ConfigChannel+0x17e>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2100      	movs	r1, #0
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff fb82 	bl	8001e74 <LL_ADC_GetOffsetChannel>
 8002770:	4603      	mov	r3, r0
 8002772:	0e9b      	lsrs	r3, r3, #26
 8002774:	f003 021f 	and.w	r2, r3, #31
 8002778:	e01e      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x1bc>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2100      	movs	r1, #0
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff fb77 	bl	8001e74 <LL_ADC_GetOffsetChannel>
 8002786:	4603      	mov	r3, r0
 8002788:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002790:	fa93 f3a3 	rbit	r3, r3
 8002794:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002798:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800279c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d101      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80027a8:	2320      	movs	r3, #32
 80027aa:	e004      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80027ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027b0:	fab3 f383 	clz	r3, r3
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d105      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x1d4>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	0e9b      	lsrs	r3, r3, #26
 80027ca:	f003 031f 	and.w	r3, r3, #31
 80027ce:	e018      	b.n	8002802 <HAL_ADC_ConfigChannel+0x206>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80027dc:	fa93 f3a3 	rbit	r3, r3
 80027e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80027e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80027ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80027f4:	2320      	movs	r3, #32
 80027f6:	e004      	b.n	8002802 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80027f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027fc:	fab3 f383 	clz	r3, r3
 8002800:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002802:	429a      	cmp	r2, r3
 8002804:	d106      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2200      	movs	r2, #0
 800280c:	2100      	movs	r1, #0
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff fb46 	bl	8001ea0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2101      	movs	r1, #1
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff fb2a 	bl	8001e74 <LL_ADC_GetOffsetChannel>
 8002820:	4603      	mov	r3, r0
 8002822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10a      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x244>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2101      	movs	r1, #1
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff fb1f 	bl	8001e74 <LL_ADC_GetOffsetChannel>
 8002836:	4603      	mov	r3, r0
 8002838:	0e9b      	lsrs	r3, r3, #26
 800283a:	f003 021f 	and.w	r2, r3, #31
 800283e:	e01e      	b.n	800287e <HAL_ADC_ConfigChannel+0x282>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2101      	movs	r1, #1
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff fb14 	bl	8001e74 <LL_ADC_GetOffsetChannel>
 800284c:	4603      	mov	r3, r0
 800284e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002852:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800285e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002862:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002866:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800286e:	2320      	movs	r3, #32
 8002870:	e004      	b.n	800287c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002872:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002876:	fab3 f383 	clz	r3, r3
 800287a:	b2db      	uxtb	r3, r3
 800287c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002886:	2b00      	cmp	r3, #0
 8002888:	d105      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x29a>
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	0e9b      	lsrs	r3, r3, #26
 8002890:	f003 031f 	and.w	r3, r3, #31
 8002894:	e018      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x2cc>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028a2:	fa93 f3a3 	rbit	r3, r3
 80028a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80028aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80028b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80028ba:	2320      	movs	r3, #32
 80028bc:	e004      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80028be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028c2:	fab3 f383 	clz	r3, r3
 80028c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d106      	bne.n	80028da <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2200      	movs	r2, #0
 80028d2:	2101      	movs	r1, #1
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff fae3 	bl	8001ea0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2102      	movs	r1, #2
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff fac7 	bl	8001e74 <LL_ADC_GetOffsetChannel>
 80028e6:	4603      	mov	r3, r0
 80028e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10a      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x30a>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2102      	movs	r1, #2
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff fabc 	bl	8001e74 <LL_ADC_GetOffsetChannel>
 80028fc:	4603      	mov	r3, r0
 80028fe:	0e9b      	lsrs	r3, r3, #26
 8002900:	f003 021f 	and.w	r2, r3, #31
 8002904:	e01e      	b.n	8002944 <HAL_ADC_ConfigChannel+0x348>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2102      	movs	r1, #2
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff fab1 	bl	8001e74 <LL_ADC_GetOffsetChannel>
 8002912:	4603      	mov	r3, r0
 8002914:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002918:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800291c:	fa93 f3a3 	rbit	r3, r3
 8002920:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002924:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002928:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800292c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002934:	2320      	movs	r3, #32
 8002936:	e004      	b.n	8002942 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002938:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800293c:	fab3 f383 	clz	r3, r3
 8002940:	b2db      	uxtb	r3, r3
 8002942:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800294c:	2b00      	cmp	r3, #0
 800294e:	d105      	bne.n	800295c <HAL_ADC_ConfigChannel+0x360>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	0e9b      	lsrs	r3, r3, #26
 8002956:	f003 031f 	and.w	r3, r3, #31
 800295a:	e016      	b.n	800298a <HAL_ADC_ConfigChannel+0x38e>
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002964:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002968:	fa93 f3a3 	rbit	r3, r3
 800296c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800296e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002970:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002974:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 800297c:	2320      	movs	r3, #32
 800297e:	e004      	b.n	800298a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002980:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002984:	fab3 f383 	clz	r3, r3
 8002988:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800298a:	429a      	cmp	r2, r3
 800298c:	d106      	bne.n	800299c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2200      	movs	r2, #0
 8002994:	2102      	movs	r1, #2
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff fa82 	bl	8001ea0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2103      	movs	r1, #3
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff fa66 	bl	8001e74 <LL_ADC_GetOffsetChannel>
 80029a8:	4603      	mov	r3, r0
 80029aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10a      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x3cc>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2103      	movs	r1, #3
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff fa5b 	bl	8001e74 <LL_ADC_GetOffsetChannel>
 80029be:	4603      	mov	r3, r0
 80029c0:	0e9b      	lsrs	r3, r3, #26
 80029c2:	f003 021f 	and.w	r2, r3, #31
 80029c6:	e017      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x3fc>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2103      	movs	r1, #3
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff fa50 	bl	8001e74 <LL_ADC_GetOffsetChannel>
 80029d4:	4603      	mov	r3, r0
 80029d6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029da:	fa93 f3a3 	rbit	r3, r3
 80029de:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80029e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029e2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80029e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80029ea:	2320      	movs	r3, #32
 80029ec:	e003      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80029ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029f0:	fab3 f383 	clz	r3, r3
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d105      	bne.n	8002a10 <HAL_ADC_ConfigChannel+0x414>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	0e9b      	lsrs	r3, r3, #26
 8002a0a:	f003 031f 	and.w	r3, r3, #31
 8002a0e:	e011      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x438>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a18:	fa93 f3a3 	rbit	r3, r3
 8002a1c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002a1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a20:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002a28:	2320      	movs	r3, #32
 8002a2a:	e003      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002a2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a2e:	fab3 f383 	clz	r3, r3
 8002a32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d106      	bne.n	8002a46 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	2103      	movs	r1, #3
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff fa2d 	bl	8001ea0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff fb46 	bl	80020dc <LL_ADC_IsEnabled>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f040 8140 	bne.w	8002cd8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6818      	ldr	r0, [r3, #0]
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	6819      	ldr	r1, [r3, #0]
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	461a      	mov	r2, r3
 8002a66:	f7ff fab3 	bl	8001fd0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	4a8f      	ldr	r2, [pc, #572]	; (8002cac <HAL_ADC_ConfigChannel+0x6b0>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	f040 8131 	bne.w	8002cd8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10b      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x4a2>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	0e9b      	lsrs	r3, r3, #26
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	f003 031f 	and.w	r3, r3, #31
 8002a92:	2b09      	cmp	r3, #9
 8002a94:	bf94      	ite	ls
 8002a96:	2301      	movls	r3, #1
 8002a98:	2300      	movhi	r3, #0
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	e019      	b.n	8002ad2 <HAL_ADC_ConfigChannel+0x4d6>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aa6:	fa93 f3a3 	rbit	r3, r3
 8002aaa:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002aac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002aae:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002ab0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002ab6:	2320      	movs	r3, #32
 8002ab8:	e003      	b.n	8002ac2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002aba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002abc:	fab3 f383 	clz	r3, r3
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	f003 031f 	and.w	r3, r3, #31
 8002ac8:	2b09      	cmp	r3, #9
 8002aca:	bf94      	ite	ls
 8002acc:	2301      	movls	r3, #1
 8002ace:	2300      	movhi	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d079      	beq.n	8002bca <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d107      	bne.n	8002af2 <HAL_ADC_ConfigChannel+0x4f6>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	0e9b      	lsrs	r3, r3, #26
 8002ae8:	3301      	adds	r3, #1
 8002aea:	069b      	lsls	r3, r3, #26
 8002aec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002af0:	e015      	b.n	8002b1e <HAL_ADC_ConfigChannel+0x522>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002afa:	fa93 f3a3 	rbit	r3, r3
 8002afe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b02:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002b04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002b0a:	2320      	movs	r3, #32
 8002b0c:	e003      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002b0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b10:	fab3 f383 	clz	r3, r3
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	3301      	adds	r3, #1
 8002b18:	069b      	lsls	r3, r3, #26
 8002b1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d109      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x542>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	0e9b      	lsrs	r3, r3, #26
 8002b30:	3301      	adds	r3, #1
 8002b32:	f003 031f 	and.w	r3, r3, #31
 8002b36:	2101      	movs	r1, #1
 8002b38:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3c:	e017      	b.n	8002b6e <HAL_ADC_ConfigChannel+0x572>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b46:	fa93 f3a3 	rbit	r3, r3
 8002b4a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002b4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b4e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002b50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002b56:	2320      	movs	r3, #32
 8002b58:	e003      	b.n	8002b62 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b5c:	fab3 f383 	clz	r3, r3
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	3301      	adds	r3, #1
 8002b64:	f003 031f 	and.w	r3, r3, #31
 8002b68:	2101      	movs	r1, #1
 8002b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6e:	ea42 0103 	orr.w	r1, r2, r3
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10a      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x598>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	0e9b      	lsrs	r3, r3, #26
 8002b84:	3301      	adds	r3, #1
 8002b86:	f003 021f 	and.w	r2, r3, #31
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	4413      	add	r3, r2
 8002b90:	051b      	lsls	r3, r3, #20
 8002b92:	e018      	b.n	8002bc6 <HAL_ADC_ConfigChannel+0x5ca>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9c:	fa93 f3a3 	rbit	r3, r3
 8002ba0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002bac:	2320      	movs	r3, #32
 8002bae:	e003      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bb2:	fab3 f383 	clz	r3, r3
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	3301      	adds	r3, #1
 8002bba:	f003 021f 	and.w	r2, r3, #31
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	4413      	add	r3, r2
 8002bc4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bc6:	430b      	orrs	r3, r1
 8002bc8:	e081      	b.n	8002cce <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d107      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x5ea>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	0e9b      	lsrs	r3, r3, #26
 8002bdc:	3301      	adds	r3, #1
 8002bde:	069b      	lsls	r3, r3, #26
 8002be0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002be4:	e015      	b.n	8002c12 <HAL_ADC_ConfigChannel+0x616>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bee:	fa93 f3a3 	rbit	r3, r3
 8002bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002bfe:	2320      	movs	r3, #32
 8002c00:	e003      	b.n	8002c0a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c04:	fab3 f383 	clz	r3, r3
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	069b      	lsls	r3, r3, #26
 8002c0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d109      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x636>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	0e9b      	lsrs	r3, r3, #26
 8002c24:	3301      	adds	r3, #1
 8002c26:	f003 031f 	and.w	r3, r3, #31
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c30:	e017      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x666>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c38:	6a3b      	ldr	r3, [r7, #32]
 8002c3a:	fa93 f3a3 	rbit	r3, r3
 8002c3e:	61fb      	str	r3, [r7, #28]
  return result;
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002c4a:	2320      	movs	r3, #32
 8002c4c:	e003      	b.n	8002c56 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	fab3 f383 	clz	r3, r3
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	3301      	adds	r3, #1
 8002c58:	f003 031f 	and.w	r3, r3, #31
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c62:	ea42 0103 	orr.w	r1, r2, r3
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10d      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x692>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	0e9b      	lsrs	r3, r3, #26
 8002c78:	3301      	adds	r3, #1
 8002c7a:	f003 021f 	and.w	r2, r3, #31
 8002c7e:	4613      	mov	r3, r2
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	4413      	add	r3, r2
 8002c84:	3b1e      	subs	r3, #30
 8002c86:	051b      	lsls	r3, r3, #20
 8002c88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c8c:	e01e      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x6d0>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	fa93 f3a3 	rbit	r3, r3
 8002c9a:	613b      	str	r3, [r7, #16]
  return result;
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d104      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002ca6:	2320      	movs	r3, #32
 8002ca8:	e006      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x6bc>
 8002caa:	bf00      	nop
 8002cac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	fab3 f383 	clz	r3, r3
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	3301      	adds	r3, #1
 8002cba:	f003 021f 	and.w	r2, r3, #31
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3b1e      	subs	r3, #30
 8002cc6:	051b      	lsls	r3, r3, #20
 8002cc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ccc:	430b      	orrs	r3, r1
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	6892      	ldr	r2, [r2, #8]
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	f7ff f951 	bl	8001f7a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	4b3c      	ldr	r3, [pc, #240]	; (8002dd0 <HAL_ADC_ConfigChannel+0x7d4>)
 8002cde:	4013      	ands	r3, r2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d06b      	beq.n	8002dbc <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ce4:	483b      	ldr	r0, [pc, #236]	; (8002dd4 <HAL_ADC_ConfigChannel+0x7d8>)
 8002ce6:	f7ff f893 	bl	8001e10 <LL_ADC_GetCommonPathInternalCh>
 8002cea:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a39      	ldr	r2, [pc, #228]	; (8002dd8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d126      	bne.n	8002d46 <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002cf8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cfc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d120      	bne.n	8002d46 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a34      	ldr	r2, [pc, #208]	; (8002ddc <HAL_ADC_ConfigChannel+0x7e0>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d156      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d16:	4619      	mov	r1, r3
 8002d18:	482e      	ldr	r0, [pc, #184]	; (8002dd4 <HAL_ADC_ConfigChannel+0x7d8>)
 8002d1a:	f7ff f866 	bl	8001dea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002d1e:	4b30      	ldr	r3, [pc, #192]	; (8002de0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	099b      	lsrs	r3, r3, #6
 8002d24:	4a2f      	ldr	r2, [pc, #188]	; (8002de4 <HAL_ADC_ConfigChannel+0x7e8>)
 8002d26:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2a:	099a      	lsrs	r2, r3, #6
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	4413      	add	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d36:	e002      	b.n	8002d3e <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1f9      	bne.n	8002d38 <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d44:	e03a      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a27      	ldr	r2, [pc, #156]	; (8002de8 <HAL_ADC_ConfigChannel+0x7ec>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d113      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x77c>
 8002d50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10d      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a1e      	ldr	r2, [pc, #120]	; (8002ddc <HAL_ADC_ConfigChannel+0x7e0>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d12a      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4818      	ldr	r0, [pc, #96]	; (8002dd4 <HAL_ADC_ConfigChannel+0x7d8>)
 8002d72:	f7ff f83a 	bl	8001dea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d76:	e021      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a1b      	ldr	r2, [pc, #108]	; (8002dec <HAL_ADC_ConfigChannel+0x7f0>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d11c      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d116      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a12      	ldr	r2, [pc, #72]	; (8002ddc <HAL_ADC_ConfigChannel+0x7e0>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d111      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002da0:	4619      	mov	r1, r3
 8002da2:	480c      	ldr	r0, [pc, #48]	; (8002dd4 <HAL_ADC_ConfigChannel+0x7d8>)
 8002da4:	f7ff f821 	bl	8001dea <LL_ADC_SetCommonPathInternalCh>
 8002da8:	e008      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dae:	f043 0220 	orr.w	r2, r3, #32
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002dc4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	37d8      	adds	r7, #216	; 0xd8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	80080000 	.word	0x80080000
 8002dd4:	50040300 	.word	0x50040300
 8002dd8:	c7520000 	.word	0xc7520000
 8002ddc:	50040000 	.word	0x50040000
 8002de0:	20000000 	.word	0x20000000
 8002de4:	053e2d63 	.word	0x053e2d63
 8002de8:	cb840000 	.word	0xcb840000
 8002dec:	80000001 	.word	0x80000001

08002df0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff f96d 	bl	80020dc <LL_ADC_IsEnabled>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d146      	bne.n	8002e96 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	4b24      	ldr	r3, [pc, #144]	; (8002ea0 <ADC_Enable+0xb0>)
 8002e10:	4013      	ands	r3, r2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00d      	beq.n	8002e32 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1a:	f043 0210 	orr.w	r2, r3, #16
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e26:	f043 0201 	orr.w	r2, r3, #1
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e032      	b.n	8002e98 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff f93c 	bl	80020b4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e3c:	f7fe ff94 	bl	8001d68 <HAL_GetTick>
 8002e40:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e42:	e021      	b.n	8002e88 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff f947 	bl	80020dc <LL_ADC_IsEnabled>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d104      	bne.n	8002e5e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff f92b 	bl	80020b4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e5e:	f7fe ff83 	bl	8001d68 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d90d      	bls.n	8002e88 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e70:	f043 0210 	orr.w	r2, r3, #16
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7c:	f043 0201 	orr.w	r2, r3, #1
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e007      	b.n	8002e98 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d1d6      	bne.n	8002e44 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	8000003f 	.word	0x8000003f

08002ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ecc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ed6:	4a04      	ldr	r2, [pc, #16]	; (8002ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	60d3      	str	r3, [r2, #12]
}
 8002edc:	bf00      	nop
 8002ede:	3714      	adds	r7, #20
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	e000ed00 	.word	0xe000ed00

08002eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ef0:	4b04      	ldr	r3, [pc, #16]	; (8002f04 <__NVIC_GetPriorityGrouping+0x18>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	0a1b      	lsrs	r3, r3, #8
 8002ef6:	f003 0307 	and.w	r3, r3, #7
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	e000ed00 	.word	0xe000ed00

08002f08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	db0b      	blt.n	8002f32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
 8002f1c:	f003 021f 	and.w	r2, r3, #31
 8002f20:	4907      	ldr	r1, [pc, #28]	; (8002f40 <__NVIC_EnableIRQ+0x38>)
 8002f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f26:	095b      	lsrs	r3, r3, #5
 8002f28:	2001      	movs	r0, #1
 8002f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	e000e100 	.word	0xe000e100

08002f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	6039      	str	r1, [r7, #0]
 8002f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	db0a      	blt.n	8002f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	490c      	ldr	r1, [pc, #48]	; (8002f90 <__NVIC_SetPriority+0x4c>)
 8002f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f62:	0112      	lsls	r2, r2, #4
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	440b      	add	r3, r1
 8002f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f6c:	e00a      	b.n	8002f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	4908      	ldr	r1, [pc, #32]	; (8002f94 <__NVIC_SetPriority+0x50>)
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	3b04      	subs	r3, #4
 8002f7c:	0112      	lsls	r2, r2, #4
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	440b      	add	r3, r1
 8002f82:	761a      	strb	r2, [r3, #24]
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	e000e100 	.word	0xe000e100
 8002f94:	e000ed00 	.word	0xe000ed00

08002f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b089      	sub	sp, #36	; 0x24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	f1c3 0307 	rsb	r3, r3, #7
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	bf28      	it	cs
 8002fb6:	2304      	movcs	r3, #4
 8002fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	2b06      	cmp	r3, #6
 8002fc0:	d902      	bls.n	8002fc8 <NVIC_EncodePriority+0x30>
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	3b03      	subs	r3, #3
 8002fc6:	e000      	b.n	8002fca <NVIC_EncodePriority+0x32>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43da      	mvns	r2, r3
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	401a      	ands	r2, r3
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fea:	43d9      	mvns	r1, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff0:	4313      	orrs	r3, r2
         );
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3724      	adds	r7, #36	; 0x24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
	...

08003000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3b01      	subs	r3, #1
 800300c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003010:	d301      	bcc.n	8003016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003012:	2301      	movs	r3, #1
 8003014:	e00f      	b.n	8003036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003016:	4a0a      	ldr	r2, [pc, #40]	; (8003040 <SysTick_Config+0x40>)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3b01      	subs	r3, #1
 800301c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800301e:	210f      	movs	r1, #15
 8003020:	f04f 30ff 	mov.w	r0, #4294967295
 8003024:	f7ff ff8e 	bl	8002f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003028:	4b05      	ldr	r3, [pc, #20]	; (8003040 <SysTick_Config+0x40>)
 800302a:	2200      	movs	r2, #0
 800302c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800302e:	4b04      	ldr	r3, [pc, #16]	; (8003040 <SysTick_Config+0x40>)
 8003030:	2207      	movs	r2, #7
 8003032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	e000e010 	.word	0xe000e010

08003044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7ff ff29 	bl	8002ea4 <__NVIC_SetPriorityGrouping>
}
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b086      	sub	sp, #24
 800305e:	af00      	add	r7, sp, #0
 8003060:	4603      	mov	r3, r0
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	607a      	str	r2, [r7, #4]
 8003066:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800306c:	f7ff ff3e 	bl	8002eec <__NVIC_GetPriorityGrouping>
 8003070:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	68b9      	ldr	r1, [r7, #8]
 8003076:	6978      	ldr	r0, [r7, #20]
 8003078:	f7ff ff8e 	bl	8002f98 <NVIC_EncodePriority>
 800307c:	4602      	mov	r2, r0
 800307e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003082:	4611      	mov	r1, r2
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff ff5d 	bl	8002f44 <__NVIC_SetPriority>
}
 800308a:	bf00      	nop
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	4603      	mov	r3, r0
 800309a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800309c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff ff31 	bl	8002f08 <__NVIC_EnableIRQ>
}
 80030a6:	bf00      	nop
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b082      	sub	sp, #8
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff ffa2 	bl	8003000 <SysTick_Config>
 80030bc:	4603      	mov	r3, r0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e0ac      	b.n	8003234 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 f8b2 	bl	8003248 <DFSDM_GetChannelFromInstance>
 80030e4:	4602      	mov	r2, r0
 80030e6:	4b55      	ldr	r3, [pc, #340]	; (800323c <HAL_DFSDM_ChannelInit+0x174>)
 80030e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e09f      	b.n	8003234 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f7fe fa85 	bl	8001604 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80030fa:	4b51      	ldr	r3, [pc, #324]	; (8003240 <HAL_DFSDM_ChannelInit+0x178>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	3301      	adds	r3, #1
 8003100:	4a4f      	ldr	r2, [pc, #316]	; (8003240 <HAL_DFSDM_ChannelInit+0x178>)
 8003102:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003104:	4b4e      	ldr	r3, [pc, #312]	; (8003240 <HAL_DFSDM_ChannelInit+0x178>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d125      	bne.n	8003158 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800310c:	4b4d      	ldr	r3, [pc, #308]	; (8003244 <HAL_DFSDM_ChannelInit+0x17c>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a4c      	ldr	r2, [pc, #304]	; (8003244 <HAL_DFSDM_ChannelInit+0x17c>)
 8003112:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003116:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003118:	4b4a      	ldr	r3, [pc, #296]	; (8003244 <HAL_DFSDM_ChannelInit+0x17c>)
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	4948      	ldr	r1, [pc, #288]	; (8003244 <HAL_DFSDM_ChannelInit+0x17c>)
 8003122:	4313      	orrs	r3, r2
 8003124:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003126:	4b47      	ldr	r3, [pc, #284]	; (8003244 <HAL_DFSDM_ChannelInit+0x17c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a46      	ldr	r2, [pc, #280]	; (8003244 <HAL_DFSDM_ChannelInit+0x17c>)
 800312c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003130:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	791b      	ldrb	r3, [r3, #4]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d108      	bne.n	800314c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800313a:	4b42      	ldr	r3, [pc, #264]	; (8003244 <HAL_DFSDM_ChannelInit+0x17c>)
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	3b01      	subs	r3, #1
 8003144:	041b      	lsls	r3, r3, #16
 8003146:	493f      	ldr	r1, [pc, #252]	; (8003244 <HAL_DFSDM_ChannelInit+0x17c>)
 8003148:	4313      	orrs	r3, r2
 800314a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800314c:	4b3d      	ldr	r3, [pc, #244]	; (8003244 <HAL_DFSDM_ChannelInit+0x17c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a3c      	ldr	r2, [pc, #240]	; (8003244 <HAL_DFSDM_ChannelInit+0x17c>)
 8003152:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003156:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003166:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6819      	ldr	r1, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003176:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800317c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 020f 	bic.w	r2, r2, #15
 8003194:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6819      	ldr	r1, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80031a4:	431a      	orrs	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80031bc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6899      	ldr	r1, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031cc:	3b01      	subs	r3, #1
 80031ce:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80031d0:	431a      	orrs	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f002 0207 	and.w	r2, r2, #7
 80031e8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6859      	ldr	r1, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80031fc:	431a      	orrs	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003214:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f000 f810 	bl	8003248 <DFSDM_GetChannelFromInstance>
 8003228:	4601      	mov	r1, r0
 800322a:	4a04      	ldr	r2, [pc, #16]	; (800323c <HAL_DFSDM_ChannelInit+0x174>)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	200000c4 	.word	0x200000c4
 8003240:	200000c0 	.word	0x200000c0
 8003244:	40016000 	.word	0x40016000

08003248 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a1c      	ldr	r2, [pc, #112]	; (80032c4 <DFSDM_GetChannelFromInstance+0x7c>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d102      	bne.n	800325e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003258:	2300      	movs	r3, #0
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	e02b      	b.n	80032b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a19      	ldr	r2, [pc, #100]	; (80032c8 <DFSDM_GetChannelFromInstance+0x80>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d102      	bne.n	800326c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003266:	2301      	movs	r3, #1
 8003268:	60fb      	str	r3, [r7, #12]
 800326a:	e024      	b.n	80032b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a17      	ldr	r2, [pc, #92]	; (80032cc <DFSDM_GetChannelFromInstance+0x84>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d102      	bne.n	800327a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003274:	2302      	movs	r3, #2
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	e01d      	b.n	80032b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a14      	ldr	r2, [pc, #80]	; (80032d0 <DFSDM_GetChannelFromInstance+0x88>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d102      	bne.n	8003288 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003282:	2304      	movs	r3, #4
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	e016      	b.n	80032b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a12      	ldr	r2, [pc, #72]	; (80032d4 <DFSDM_GetChannelFromInstance+0x8c>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d102      	bne.n	8003296 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003290:	2305      	movs	r3, #5
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	e00f      	b.n	80032b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a0f      	ldr	r2, [pc, #60]	; (80032d8 <DFSDM_GetChannelFromInstance+0x90>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d102      	bne.n	80032a4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800329e:	2306      	movs	r3, #6
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	e008      	b.n	80032b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a0d      	ldr	r2, [pc, #52]	; (80032dc <DFSDM_GetChannelFromInstance+0x94>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d102      	bne.n	80032b2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80032ac:	2307      	movs	r3, #7
 80032ae:	60fb      	str	r3, [r7, #12]
 80032b0:	e001      	b.n	80032b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80032b2:	2303      	movs	r3, #3
 80032b4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80032b6:	68fb      	ldr	r3, [r7, #12]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3714      	adds	r7, #20
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	40016000 	.word	0x40016000
 80032c8:	40016020 	.word	0x40016020
 80032cc:	40016040 	.word	0x40016040
 80032d0:	40016080 	.word	0x40016080
 80032d4:	400160a0 	.word	0x400160a0
 80032d8:	400160c0 	.word	0x400160c0
 80032dc:	400160e0 	.word	0x400160e0

080032e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b087      	sub	sp, #28
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032ea:	2300      	movs	r3, #0
 80032ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032ee:	e166      	b.n	80035be <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	2101      	movs	r1, #1
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	fa01 f303 	lsl.w	r3, r1, r3
 80032fc:	4013      	ands	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2b00      	cmp	r3, #0
 8003304:	f000 8158 	beq.w	80035b8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d00b      	beq.n	8003328 <HAL_GPIO_Init+0x48>
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	2b02      	cmp	r3, #2
 8003316:	d007      	beq.n	8003328 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800331c:	2b11      	cmp	r3, #17
 800331e:	d003      	beq.n	8003328 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2b12      	cmp	r3, #18
 8003326:	d130      	bne.n	800338a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	2203      	movs	r2, #3
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	43db      	mvns	r3, r3
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	4013      	ands	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	4313      	orrs	r3, r2
 8003350:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800335e:	2201      	movs	r2, #1
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	43db      	mvns	r3, r3
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	4013      	ands	r3, r2
 800336c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	091b      	lsrs	r3, r3, #4
 8003374:	f003 0201 	and.w	r2, r3, #1
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	4313      	orrs	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	2203      	movs	r2, #3
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	43db      	mvns	r3, r3
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	4013      	ands	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	689a      	ldr	r2, [r3, #8]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d003      	beq.n	80033ca <HAL_GPIO_Init+0xea>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b12      	cmp	r3, #18
 80033c8:	d123      	bne.n	8003412 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	08da      	lsrs	r2, r3, #3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	3208      	adds	r2, #8
 80033d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	220f      	movs	r2, #15
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	43db      	mvns	r3, r3
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	4013      	ands	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	691a      	ldr	r2, [r3, #16]
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f003 0307 	and.w	r3, r3, #7
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	4313      	orrs	r3, r2
 8003402:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	08da      	lsrs	r2, r3, #3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3208      	adds	r2, #8
 800340c:	6939      	ldr	r1, [r7, #16]
 800340e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	2203      	movs	r2, #3
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	43db      	mvns	r3, r3
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4013      	ands	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f003 0203 	and.w	r2, r3, #3
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4313      	orrs	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	f000 80b2 	beq.w	80035b8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003454:	4b61      	ldr	r3, [pc, #388]	; (80035dc <HAL_GPIO_Init+0x2fc>)
 8003456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003458:	4a60      	ldr	r2, [pc, #384]	; (80035dc <HAL_GPIO_Init+0x2fc>)
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	6613      	str	r3, [r2, #96]	; 0x60
 8003460:	4b5e      	ldr	r3, [pc, #376]	; (80035dc <HAL_GPIO_Init+0x2fc>)
 8003462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	60bb      	str	r3, [r7, #8]
 800346a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800346c:	4a5c      	ldr	r2, [pc, #368]	; (80035e0 <HAL_GPIO_Init+0x300>)
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	089b      	lsrs	r3, r3, #2
 8003472:	3302      	adds	r3, #2
 8003474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003478:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f003 0303 	and.w	r3, r3, #3
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	220f      	movs	r2, #15
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	43db      	mvns	r3, r3
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	4013      	ands	r3, r2
 800348e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003496:	d02b      	beq.n	80034f0 <HAL_GPIO_Init+0x210>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a52      	ldr	r2, [pc, #328]	; (80035e4 <HAL_GPIO_Init+0x304>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d025      	beq.n	80034ec <HAL_GPIO_Init+0x20c>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a51      	ldr	r2, [pc, #324]	; (80035e8 <HAL_GPIO_Init+0x308>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d01f      	beq.n	80034e8 <HAL_GPIO_Init+0x208>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a50      	ldr	r2, [pc, #320]	; (80035ec <HAL_GPIO_Init+0x30c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d019      	beq.n	80034e4 <HAL_GPIO_Init+0x204>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a4f      	ldr	r2, [pc, #316]	; (80035f0 <HAL_GPIO_Init+0x310>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d013      	beq.n	80034e0 <HAL_GPIO_Init+0x200>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a4e      	ldr	r2, [pc, #312]	; (80035f4 <HAL_GPIO_Init+0x314>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d00d      	beq.n	80034dc <HAL_GPIO_Init+0x1fc>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a4d      	ldr	r2, [pc, #308]	; (80035f8 <HAL_GPIO_Init+0x318>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d007      	beq.n	80034d8 <HAL_GPIO_Init+0x1f8>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a4c      	ldr	r2, [pc, #304]	; (80035fc <HAL_GPIO_Init+0x31c>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d101      	bne.n	80034d4 <HAL_GPIO_Init+0x1f4>
 80034d0:	2307      	movs	r3, #7
 80034d2:	e00e      	b.n	80034f2 <HAL_GPIO_Init+0x212>
 80034d4:	2308      	movs	r3, #8
 80034d6:	e00c      	b.n	80034f2 <HAL_GPIO_Init+0x212>
 80034d8:	2306      	movs	r3, #6
 80034da:	e00a      	b.n	80034f2 <HAL_GPIO_Init+0x212>
 80034dc:	2305      	movs	r3, #5
 80034de:	e008      	b.n	80034f2 <HAL_GPIO_Init+0x212>
 80034e0:	2304      	movs	r3, #4
 80034e2:	e006      	b.n	80034f2 <HAL_GPIO_Init+0x212>
 80034e4:	2303      	movs	r3, #3
 80034e6:	e004      	b.n	80034f2 <HAL_GPIO_Init+0x212>
 80034e8:	2302      	movs	r3, #2
 80034ea:	e002      	b.n	80034f2 <HAL_GPIO_Init+0x212>
 80034ec:	2301      	movs	r3, #1
 80034ee:	e000      	b.n	80034f2 <HAL_GPIO_Init+0x212>
 80034f0:	2300      	movs	r3, #0
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	f002 0203 	and.w	r2, r2, #3
 80034f8:	0092      	lsls	r2, r2, #2
 80034fa:	4093      	lsls	r3, r2
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4313      	orrs	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003502:	4937      	ldr	r1, [pc, #220]	; (80035e0 <HAL_GPIO_Init+0x300>)
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	089b      	lsrs	r3, r3, #2
 8003508:	3302      	adds	r3, #2
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003510:	4b3b      	ldr	r3, [pc, #236]	; (8003600 <HAL_GPIO_Init+0x320>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	43db      	mvns	r3, r3
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	4013      	ands	r3, r2
 800351e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	4313      	orrs	r3, r2
 8003532:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003534:	4a32      	ldr	r2, [pc, #200]	; (8003600 <HAL_GPIO_Init+0x320>)
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800353a:	4b31      	ldr	r3, [pc, #196]	; (8003600 <HAL_GPIO_Init+0x320>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	43db      	mvns	r3, r3
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	4013      	ands	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d003      	beq.n	800355e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4313      	orrs	r3, r2
 800355c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800355e:	4a28      	ldr	r2, [pc, #160]	; (8003600 <HAL_GPIO_Init+0x320>)
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003564:	4b26      	ldr	r3, [pc, #152]	; (8003600 <HAL_GPIO_Init+0x320>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	43db      	mvns	r3, r3
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	4013      	ands	r3, r2
 8003572:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d003      	beq.n	8003588 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	4313      	orrs	r3, r2
 8003586:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003588:	4a1d      	ldr	r2, [pc, #116]	; (8003600 <HAL_GPIO_Init+0x320>)
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800358e:	4b1c      	ldr	r3, [pc, #112]	; (8003600 <HAL_GPIO_Init+0x320>)
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	43db      	mvns	r3, r3
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	4013      	ands	r3, r2
 800359c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035b2:	4a13      	ldr	r2, [pc, #76]	; (8003600 <HAL_GPIO_Init+0x320>)
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	3301      	adds	r3, #1
 80035bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	fa22 f303 	lsr.w	r3, r2, r3
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f47f ae91 	bne.w	80032f0 <HAL_GPIO_Init+0x10>
  }
}
 80035ce:	bf00      	nop
 80035d0:	371c      	adds	r7, #28
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	40021000 	.word	0x40021000
 80035e0:	40010000 	.word	0x40010000
 80035e4:	48000400 	.word	0x48000400
 80035e8:	48000800 	.word	0x48000800
 80035ec:	48000c00 	.word	0x48000c00
 80035f0:	48001000 	.word	0x48001000
 80035f4:	48001400 	.word	0x48001400
 80035f8:	48001800 	.word	0x48001800
 80035fc:	48001c00 	.word	0x48001c00
 8003600:	40010400 	.word	0x40010400

08003604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	460b      	mov	r3, r1
 800360e:	807b      	strh	r3, [r7, #2]
 8003610:	4613      	mov	r3, r2
 8003612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003614:	787b      	ldrb	r3, [r7, #1]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800361a:	887a      	ldrh	r2, [r7, #2]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003620:	e002      	b.n	8003628 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003622:	887a      	ldrh	r2, [r7, #2]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800363e:	4b08      	ldr	r3, [pc, #32]	; (8003660 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003640:	695a      	ldr	r2, [r3, #20]
 8003642:	88fb      	ldrh	r3, [r7, #6]
 8003644:	4013      	ands	r3, r2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d006      	beq.n	8003658 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800364a:	4a05      	ldr	r2, [pc, #20]	; (8003660 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800364c:	88fb      	ldrh	r3, [r7, #6]
 800364e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003650:	88fb      	ldrh	r3, [r7, #6]
 8003652:	4618      	mov	r0, r3
 8003654:	f000 f806 	bl	8003664 <HAL_GPIO_EXTI_Callback>
  }
}
 8003658:	bf00      	nop
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40010400 	.word	0x40010400

08003664 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	4603      	mov	r3, r0
 800366c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800366e:	bf00      	nop
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b082      	sub	sp, #8
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e081      	b.n	8003790 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	d106      	bne.n	80036a6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7fd fff7 	bl	8001694 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2224      	movs	r2, #36	; 0x24
 80036aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 0201 	bic.w	r2, r2, #1
 80036bc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036ca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689a      	ldr	r2, [r3, #8]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036da:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d107      	bne.n	80036f4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036f0:	609a      	str	r2, [r3, #8]
 80036f2:	e006      	b.n	8003702 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003700:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	2b02      	cmp	r3, #2
 8003708:	d104      	bne.n	8003714 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003712:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6812      	ldr	r2, [r2, #0]
 800371e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003726:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003736:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	ea42 0103 	orr.w	r1, r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	021a      	lsls	r2, r3, #8
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69d9      	ldr	r1, [r3, #28]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1a      	ldr	r2, [r3, #32]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f042 0201 	orr.w	r2, r2, #1
 8003770:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b20      	cmp	r3, #32
 80037ac:	d138      	bne.n	8003820 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d101      	bne.n	80037bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037b8:	2302      	movs	r3, #2
 80037ba:	e032      	b.n	8003822 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2224      	movs	r2, #36	; 0x24
 80037c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0201 	bic.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6819      	ldr	r1, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0201 	orr.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800381c:	2300      	movs	r3, #0
 800381e:	e000      	b.n	8003822 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003820:	2302      	movs	r3, #2
  }
}
 8003822:	4618      	mov	r0, r3
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800382e:	b480      	push	{r7}
 8003830:	b085      	sub	sp, #20
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
 8003836:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b20      	cmp	r3, #32
 8003842:	d139      	bne.n	80038b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800384e:	2302      	movs	r3, #2
 8003850:	e033      	b.n	80038ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2224      	movs	r2, #36	; 0x24
 800385e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0201 	bic.w	r2, r2, #1
 8003870:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003880:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	021b      	lsls	r3, r3, #8
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	4313      	orrs	r3, r2
 800388a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0201 	orr.w	r2, r2, #1
 80038a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	e000      	b.n	80038ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038b8:	2302      	movs	r3, #2
  }
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
	...

080038c8 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af02      	add	r7, sp, #8
 80038ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80038d4:	f7fe fa48 	bl	8001d68 <HAL_GetTick>
 80038d8:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d102      	bne.n	80038e6 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	73fb      	strb	r3, [r7, #15]
 80038e4:	e092      	b.n	8003a0c <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f040 808b 	bne.w	8003a0c <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7fd ff42 	bl	8001780 <HAL_OSPI_MspInit>
#endif

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80038fc:	f241 3188 	movw	r1, #5000	; 0x1388
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 f88b 	bl	8003a1c <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	4b42      	ldr	r3, [pc, #264]	; (8003a18 <HAL_OSPI_Init+0x150>)
 800390e:	4013      	ands	r3, r2
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	68d1      	ldr	r1, [r2, #12]
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6912      	ldr	r2, [r2, #16]
 8003918:	3a01      	subs	r2, #1
 800391a:	0412      	lsls	r2, r2, #16
 800391c:	4311      	orrs	r1, r2
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6952      	ldr	r2, [r2, #20]
 8003922:	3a01      	subs	r2, #1
 8003924:	0212      	lsls	r2, r2, #8
 8003926:	4311      	orrs	r1, r2
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800392c:	4311      	orrs	r1, r2
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	69d2      	ldr	r2, [r2, #28]
 8003932:	4311      	orrs	r1, r2
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6812      	ldr	r2, [r2, #0]
 8003938:	430b      	orrs	r3, r1
 800393a:	6093      	str	r3, [r2, #8]
#if   defined (OCTOSPI_DCR3_MAXTRAN)
      /* Configure chip select boundary and maximun transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) | (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	0412      	lsls	r2, r2, #16
 8003946:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	3b01      	subs	r3, #1
 8003958:	021a      	lsls	r2, r3, #8
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	2200      	movs	r2, #0
 800396c:	2120      	movs	r1, #32
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 fbb8 	bl	80040e4 <OSPI_WaitFlagStateUntilTimeout>
 8003974:	4603      	mov	r3, r0
 8003976:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003978:	7bfb      	ldrb	r3, [r7, #15]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d146      	bne.n	8003a0c <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER, ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	1e5a      	subs	r2, r3, #1
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	60da      	str	r2, [r3, #12]

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC), (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80039b4:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c0:	431a      	orrs	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0201 	orr.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d107      	bne.n	80039f4 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689a      	ldr	r2, [r3, #8]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 0202 	orr.w	r2, r2, #2
 80039f2:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039fc:	d103      	bne.n	8003a06 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	645a      	str	r2, [r3, #68]	; 0x44
 8003a04:	e002      	b.n	8003a0c <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2202      	movs	r2, #2
 8003a0a:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	f8e0f8f4 	.word	0xf8e0f8f4

08003a1c <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
	...

08003a3c <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b092      	sub	sp, #72	; 0x48
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index, ospi_enabled = 0U, other_instance;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a08      	ldr	r2, [pc, #32]	; (8003a7c <HAL_OSPIM_Config+0x40>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d105      	bne.n	8003a6a <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 8003a62:	2301      	movs	r3, #1
 8003a64:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8003a68:	e004      	b.n	8003a74 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003a74:	2300      	movs	r3, #0
 8003a76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003a7a:	e01f      	b.n	8003abc <HAL_OSPIM_Config+0x80>
 8003a7c:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8003a80:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003a84:	3301      	adds	r3, #1
 8003a86:	b2d8      	uxtb	r0, r3
 8003a88:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003a8c:	f107 0114 	add.w	r1, r7, #20
 8003a90:	4613      	mov	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	f000 fb5a 	bl	8004154 <OSPIM_GetConfig>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d005      	beq.n	8003ab2 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2208      	movs	r2, #8
 8003ab0:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003ab2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003abc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d9dd      	bls.n	8003a80 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8003ac4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f040 82fe 	bne.w	80040ca <HAL_OSPIM_Config+0x68e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8003ace:	4bcd      	ldr	r3, [pc, #820]	; (8003e04 <HAL_OSPIM_Config+0x3c8>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00b      	beq.n	8003af2 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003ada:	4bca      	ldr	r3, [pc, #808]	; (8003e04 <HAL_OSPIM_Config+0x3c8>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4ac9      	ldr	r2, [pc, #804]	; (8003e04 <HAL_OSPIM_Config+0x3c8>)
 8003ae0:	f023 0301 	bic.w	r3, r3, #1
 8003ae4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8003ae6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003aea:	f043 0301 	orr.w	r3, r3, #1
 8003aee:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8003af2:	4bc5      	ldr	r3, [pc, #788]	; (8003e08 <HAL_OSPIM_Config+0x3cc>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00b      	beq.n	8003b16 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003afe:	4bc2      	ldr	r3, [pc, #776]	; (8003e08 <HAL_OSPIM_Config+0x3cc>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4ac1      	ldr	r2, [pc, #772]	; (8003e08 <HAL_OSPIM_Config+0x3cc>)
 8003b04:	f023 0301 	bic.w	r3, r3, #1
 8003b08:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8003b0a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003b0e:	f043 0302 	orr.w	r3, r3, #2
 8003b12:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8003b16:	49bd      	ldr	r1, [pc, #756]	; (8003e0c <HAL_OSPIM_Config+0x3d0>)
 8003b18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003b26:	4413      	add	r3, r2
 8003b28:	3b2c      	subs	r3, #44	; 0x2c
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	6859      	ldr	r1, [r3, #4]
 8003b34:	48b5      	ldr	r0, [pc, #724]	; (8003e0c <HAL_OSPIM_Config+0x3d0>)
 8003b36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b38:	4613      	mov	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003b44:	4413      	add	r3, r2
 8003b46:	3b2c      	subs	r3, #44	; 0x2c
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4403      	add	r3, r0
 8003b54:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8003b56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b58:	4613      	mov	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003b64:	4413      	add	r3, r2
 8003b66:	3b34      	subs	r3, #52	; 0x34
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 80ac 	beq.w	8003cc8 <HAL_OSPIM_Config+0x28c>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8003b70:	49a6      	ldr	r1, [pc, #664]	; (8003e0c <HAL_OSPIM_Config+0x3d0>)
 8003b72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b74:	4613      	mov	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003b80:	4413      	add	r3, r2
 8003b82:	3b34      	subs	r3, #52	; 0x34
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	3b01      	subs	r3, #1
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	6859      	ldr	r1, [r3, #4]
 8003b8e:	489f      	ldr	r0, [pc, #636]	; (8003e0c <HAL_OSPIM_Config+0x3d0>)
 8003b90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b92:	4613      	mov	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4413      	add	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003b9e:	4413      	add	r3, r2
 8003ba0:	3b34      	subs	r3, #52	; 0x34
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	f021 0201 	bic.w	r2, r1, #1
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4403      	add	r3, r0
 8003bae:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8003bb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003bbe:	4413      	add	r3, r2
 8003bc0:	3b30      	subs	r3, #48	; 0x30
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d01f      	beq.n	8003c08 <HAL_OSPIM_Config+0x1cc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8003bc8:	4990      	ldr	r1, [pc, #576]	; (8003e0c <HAL_OSPIM_Config+0x3d0>)
 8003bca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bcc:	4613      	mov	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003bd8:	4413      	add	r3, r2
 8003bda:	3b30      	subs	r3, #48	; 0x30
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	3b01      	subs	r3, #1
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	440b      	add	r3, r1
 8003be4:	6859      	ldr	r1, [r3, #4]
 8003be6:	4889      	ldr	r0, [pc, #548]	; (8003e0c <HAL_OSPIM_Config+0x3d0>)
 8003be8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bea:	4613      	mov	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003bf6:	4413      	add	r3, r2
 8003bf8:	3b30      	subs	r3, #48	; 0x30
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	f021 0210 	bic.w	r2, r1, #16
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4403      	add	r3, r0
 8003c06:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003c08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003c16:	4413      	add	r3, r2
 8003c18:	3b28      	subs	r3, #40	; 0x28
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d023      	beq.n	8003c68 <HAL_OSPIM_Config+0x22c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8003c20:	497a      	ldr	r1, [pc, #488]	; (8003e0c <HAL_OSPIM_Config+0x3d0>)
 8003c22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c24:	4613      	mov	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003c30:	4413      	add	r3, r2
 8003c32:	3b28      	subs	r3, #40	; 0x28
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	3b01      	subs	r3, #1
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	440b      	add	r3, r1
 8003c40:	6859      	ldr	r1, [r3, #4]
 8003c42:	4872      	ldr	r0, [pc, #456]	; (8003e0c <HAL_OSPIM_Config+0x3d0>)
 8003c44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c46:	4613      	mov	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4413      	add	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003c52:	4413      	add	r3, r2
 8003c54:	3b28      	subs	r3, #40	; 0x28
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4403      	add	r3, r0
 8003c66:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003c68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4413      	add	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003c76:	4413      	add	r3, r2
 8003c78:	3b24      	subs	r3, #36	; 0x24
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d023      	beq.n	8003cc8 <HAL_OSPIM_Config+0x28c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8003c80:	4962      	ldr	r1, [pc, #392]	; (8003e0c <HAL_OSPIM_Config+0x3d0>)
 8003c82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c84:	4613      	mov	r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	4413      	add	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003c90:	4413      	add	r3, r2
 8003c92:	3b24      	subs	r3, #36	; 0x24
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	3b01      	subs	r3, #1
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	6859      	ldr	r1, [r3, #4]
 8003ca2:	485a      	ldr	r0, [pc, #360]	; (8003e0c <HAL_OSPIM_Config+0x3d0>)
 8003ca4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	4413      	add	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003cb2:	4413      	add	r3, r2
 8003cb4:	3b24      	subs	r3, #36	; 0x24
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4403      	add	r3, r0
 8003cc6:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	6819      	ldr	r1, [r3, #0]
 8003ccc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4413      	add	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003cdc:	4413      	add	r3, r2
 8003cde:	3b34      	subs	r3, #52	; 0x34
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4299      	cmp	r1, r3
 8003ce4:	d03c      	beq.n	8003d60 <HAL_OSPIM_Config+0x324>
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	6859      	ldr	r1, [r3, #4]
 8003cea:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003cee:	4613      	mov	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	4413      	add	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003cfa:	4413      	add	r3, r2
 8003cfc:	3b30      	subs	r3, #48	; 0x30
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4299      	cmp	r1, r3
 8003d02:	d02d      	beq.n	8003d60 <HAL_OSPIM_Config+0x324>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	6899      	ldr	r1, [r3, #8]
 8003d08:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003d18:	4413      	add	r3, r2
 8003d1a:	3b2c      	subs	r3, #44	; 0x2c
 8003d1c:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003d1e:	4299      	cmp	r1, r3
 8003d20:	d01e      	beq.n	8003d60 <HAL_OSPIM_Config+0x324>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	68d9      	ldr	r1, [r3, #12]
 8003d26:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4413      	add	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003d36:	4413      	add	r3, r2
 8003d38:	3b28      	subs	r3, #40	; 0x28
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4299      	cmp	r1, r3
 8003d3e:	d00f      	beq.n	8003d60 <HAL_OSPIM_Config+0x324>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	6919      	ldr	r1, [r3, #16]
 8003d44:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003d48:	4613      	mov	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003d54:	4413      	add	r3, r2
 8003d56:	3b24      	subs	r3, #36	; 0x24
 8003d58:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003d5a:	4299      	cmp	r1, r3
 8003d5c:	f040 80e0 	bne.w	8003f20 <HAL_OSPIM_Config+0x4e4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8003d60:	492a      	ldr	r1, [pc, #168]	; (8003e0c <HAL_OSPIM_Config+0x3d0>)
 8003d62:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003d66:	4613      	mov	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4413      	add	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003d72:	4413      	add	r3, r2
 8003d74:	3b34      	subs	r3, #52	; 0x34
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	6859      	ldr	r1, [r3, #4]
 8003d80:	4822      	ldr	r0, [pc, #136]	; (8003e0c <HAL_OSPIM_Config+0x3d0>)
 8003d82:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003d86:	4613      	mov	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003d92:	4413      	add	r3, r2
 8003d94:	3b34      	subs	r3, #52	; 0x34
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	f021 0201 	bic.w	r2, r1, #1
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4403      	add	r3, r0
 8003da2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8003da4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003da8:	4613      	mov	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003db4:	4413      	add	r3, r2
 8003db6:	3b30      	subs	r3, #48	; 0x30
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d028      	beq.n	8003e10 <HAL_OSPIM_Config+0x3d4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8003dbe:	4913      	ldr	r1, [pc, #76]	; (8003e0c <HAL_OSPIM_Config+0x3d0>)
 8003dc0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4413      	add	r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003dd0:	4413      	add	r3, r2
 8003dd2:	3b30      	subs	r3, #48	; 0x30
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	440b      	add	r3, r1
 8003ddc:	6859      	ldr	r1, [r3, #4]
 8003dde:	480b      	ldr	r0, [pc, #44]	; (8003e0c <HAL_OSPIM_Config+0x3d0>)
 8003de0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003de4:	4613      	mov	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003df0:	4413      	add	r3, r2
 8003df2:	3b30      	subs	r3, #48	; 0x30
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3b01      	subs	r3, #1
 8003df8:	f021 0210 	bic.w	r2, r1, #16
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4403      	add	r3, r0
 8003e00:	605a      	str	r2, [r3, #4]
 8003e02:	e005      	b.n	8003e10 <HAL_OSPIM_Config+0x3d4>
 8003e04:	a0001000 	.word	0xa0001000
 8003e08:	a0001400 	.word	0xa0001400
 8003e0c:	50061c00 	.word	0x50061c00
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8003e10:	49b1      	ldr	r1, [pc, #708]	; (80040d8 <HAL_OSPIM_Config+0x69c>)
 8003e12:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003e16:	4613      	mov	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4413      	add	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003e22:	4413      	add	r3, r2
 8003e24:	3b2c      	subs	r3, #44	; 0x2c
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	6859      	ldr	r1, [r3, #4]
 8003e30:	48a9      	ldr	r0, [pc, #676]	; (80040d8 <HAL_OSPIM_Config+0x69c>)
 8003e32:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003e36:	4613      	mov	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4413      	add	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003e42:	4413      	add	r3, r2
 8003e44:	3b2c      	subs	r3, #44	; 0x2c
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4403      	add	r3, r0
 8003e52:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003e54:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003e58:	4613      	mov	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	4413      	add	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003e64:	4413      	add	r3, r2
 8003e66:	3b28      	subs	r3, #40	; 0x28
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d025      	beq.n	8003eba <HAL_OSPIM_Config+0x47e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8003e6e:	499a      	ldr	r1, [pc, #616]	; (80040d8 <HAL_OSPIM_Config+0x69c>)
 8003e70:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003e74:	4613      	mov	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003e80:	4413      	add	r3, r2
 8003e82:	3b28      	subs	r3, #40	; 0x28
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	3b01      	subs	r3, #1
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	440b      	add	r3, r1
 8003e90:	6859      	ldr	r1, [r3, #4]
 8003e92:	4891      	ldr	r0, [pc, #580]	; (80040d8 <HAL_OSPIM_Config+0x69c>)
 8003e94:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003e98:	4613      	mov	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003ea4:	4413      	add	r3, r2
 8003ea6:	3b28      	subs	r3, #40	; 0x28
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4403      	add	r3, r0
 8003eb8:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003eba:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4413      	add	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003eca:	4413      	add	r3, r2
 8003ecc:	3b24      	subs	r3, #36	; 0x24
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d025      	beq.n	8003f20 <HAL_OSPIM_Config+0x4e4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8003ed4:	4980      	ldr	r1, [pc, #512]	; (80040d8 <HAL_OSPIM_Config+0x69c>)
 8003ed6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003eda:	4613      	mov	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	4413      	add	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003ee6:	4413      	add	r3, r2
 8003ee8:	3b24      	subs	r3, #36	; 0x24
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	3b01      	subs	r3, #1
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	6859      	ldr	r1, [r3, #4]
 8003ef8:	4877      	ldr	r0, [pc, #476]	; (80040d8 <HAL_OSPIM_Config+0x69c>)
 8003efa:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003efe:	4613      	mov	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	4413      	add	r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003f0a:	4413      	add	r3, r2
 8003f0c:	3b24      	subs	r3, #36	; 0x24
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	3b01      	subs	r3, #1
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4403      	add	r3, r0
 8003f1e:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort-1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC), (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));
 8003f20:	4a6d      	ldr	r2, [pc, #436]	; (80040d8 <HAL_OSPIM_Config+0x69c>)
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	3b01      	subs	r3, #1
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4413      	add	r3, r2
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f34:	025b      	lsls	r3, r3, #9
 8003f36:	431a      	orrs	r2, r3
 8003f38:	4967      	ldr	r1, [pc, #412]	; (80040d8 <HAL_OSPIM_Config+0x69c>)
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	440b      	add	r3, r1
 8003f48:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
 8003f4a:	4a63      	ldr	r2, [pc, #396]	; (80040d8 <HAL_OSPIM_Config+0x69c>)
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	3b01      	subs	r3, #1
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4413      	add	r3, r2
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f023 0203 	bic.w	r2, r3, #3
 8003f5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	431a      	orrs	r2, r3
 8003f62:	495d      	ldr	r1, [pc, #372]	; (80040d8 <HAL_OSPIM_Config+0x69c>)
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	f042 0201 	orr.w	r2, r2, #1
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	440b      	add	r3, r1
 8003f72:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d014      	beq.n	8003fa6 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
 8003f7c:	4a56      	ldr	r2, [pc, #344]	; (80040d8 <HAL_OSPIM_Config+0x69c>)
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	3b01      	subs	r3, #1
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f90:	015b      	lsls	r3, r3, #5
 8003f92:	431a      	orrs	r2, r3
 8003f94:	4950      	ldr	r1, [pc, #320]	; (80040d8 <HAL_OSPIM_Config+0x69c>)
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	f042 0210 	orr.w	r2, r2, #16
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	440b      	add	r3, r1
 8003fa4:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d019      	beq.n	8003fe6 <HAL_OSPIM_Config+0x5aa>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
 8003fb2:	4a49      	ldr	r2, [pc, #292]	; (80040d8 <HAL_OSPIM_Config+0x69c>)
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003fc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fca:	049b      	lsls	r3, r3, #18
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	4942      	ldr	r1, [pc, #264]	; (80040d8 <HAL_OSPIM_Config+0x69c>)
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	605a      	str	r2, [r3, #4]
 8003fe4:	e01c      	b.n	8004020 <HAL_OSPIM_Config+0x5e4>
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d018      	beq.n	8004020 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOHEN | OCTOSPIM_PCR_IOHSRC),
 8003fee:	4a3a      	ldr	r2, [pc, #232]	; (80040d8 <HAL_OSPIM_Config+0x69c>)
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004004:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004006:	069b      	lsls	r3, r3, #26
 8004008:	431a      	orrs	r2, r3
 800400a:	4933      	ldr	r1, [pc, #204]	; (80040d8 <HAL_OSPIM_Config+0x69c>)
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	3b01      	subs	r3, #1
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d019      	beq.n	8004060 <HAL_OSPIM_Config+0x624>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
 800402c:	4a2a      	ldr	r2, [pc, #168]	; (80040d8 <HAL_OSPIM_Config+0x69c>)
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	3b01      	subs	r3, #1
 8004034:	f003 0301 	and.w	r3, r3, #1
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	4413      	add	r3, r2
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004044:	049b      	lsls	r3, r3, #18
 8004046:	431a      	orrs	r2, r3
 8004048:	4923      	ldr	r1, [pc, #140]	; (80040d8 <HAL_OSPIM_Config+0x69c>)
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	3b01      	subs	r3, #1
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	440b      	add	r3, r1
 800405c:	605a      	str	r2, [r3, #4]
 800405e:	e01c      	b.n	800409a <HAL_OSPIM_Config+0x65e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d018      	beq.n	800409a <HAL_OSPIM_Config+0x65e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOHEN | OCTOSPIM_PCR_IOHSRC),
 8004068:	4a1b      	ldr	r2, [pc, #108]	; (80040d8 <HAL_OSPIM_Config+0x69c>)
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	3b01      	subs	r3, #1
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4413      	add	r3, r2
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800407e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004080:	069b      	lsls	r3, r3, #26
 8004082:	431a      	orrs	r2, r3
 8004084:	4914      	ldr	r1, [pc, #80]	; (80040d8 <HAL_OSPIM_Config+0x69c>)
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	3b01      	subs	r3, #1
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	440b      	add	r3, r1
 8004098:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800409a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d005      	beq.n	80040b2 <HAL_OSPIM_Config+0x676>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80040a6:	4b0d      	ldr	r3, [pc, #52]	; (80040dc <HAL_OSPIM_Config+0x6a0>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a0c      	ldr	r2, [pc, #48]	; (80040dc <HAL_OSPIM_Config+0x6a0>)
 80040ac:	f043 0301 	orr.w	r3, r3, #1
 80040b0:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80040b2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d005      	beq.n	80040ca <HAL_OSPIM_Config+0x68e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80040be:	4b08      	ldr	r3, [pc, #32]	; (80040e0 <HAL_OSPIM_Config+0x6a4>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a07      	ldr	r2, [pc, #28]	; (80040e0 <HAL_OSPIM_Config+0x6a4>)
 80040c4:	f043 0301 	orr.w	r3, r3, #1
 80040c8:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 80040ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3748      	adds	r7, #72	; 0x48
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	50061c00 	.word	0x50061c00
 80040dc:	a0001000 	.word	0xa0001000
 80040e0:	a0001400 	.word	0xa0001400

080040e4 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	603b      	str	r3, [r7, #0]
 80040f0:	4613      	mov	r3, r2
 80040f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80040f4:	e01a      	b.n	800412c <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fc:	d016      	beq.n	800412c <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040fe:	f7fd fe33 	bl	8001d68 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	429a      	cmp	r2, r3
 800410c:	d302      	bcc.n	8004114 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10b      	bne.n	800412c <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f44f 7200 	mov.w	r2, #512	; 0x200
 800411a:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004120:	f043 0201 	orr.w	r2, r3, #1
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e00e      	b.n	800414a <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6a1a      	ldr	r2, [r3, #32]
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	4013      	ands	r3, r2
 8004136:	2b00      	cmp	r3, #0
 8004138:	bf14      	ite	ne
 800413a:	2301      	movne	r3, #1
 800413c:	2300      	moveq	r3, #0
 800413e:	b2db      	uxtb	r3, r3
 8004140:	461a      	mov	r2, r3
 8004142:	79fb      	ldrb	r3, [r7, #7]
 8004144:	429a      	cmp	r2, r3
 8004146:	d1d6      	bne.n	80040f6 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
	...

08004154 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8004154:	b480      	push	{r7}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	4603      	mov	r3, r0
 800415c:	6039      	str	r1, [r7, #0]
 800415e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004160:	2300      	movs	r3, #0
 8004162:	75fb      	strb	r3, [r7, #23]
  uint32_t reg, value = 0U;
 8004164:	2300      	movs	r3, #0
 8004166:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8004168:	79fb      	ldrb	r3, [r7, #7]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d005      	beq.n	800417a <OSPIM_GetConfig+0x26>
 800416e:	79fb      	ldrb	r3, [r7, #7]
 8004170:	2b02      	cmp	r3, #2
 8004172:	d802      	bhi.n	800417a <OSPIM_GetConfig+0x26>
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d102      	bne.n	8004180 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	75fb      	strb	r3, [r7, #23]
 800417e:	e08e      	b.n	800429e <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2200      	movs	r2, #0
 800418a:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	2200      	movs	r2, #0
 8004190:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2200      	movs	r2, #0
 8004196:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	2200      	movs	r2, #0
 800419c:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800419e:	79fb      	ldrb	r3, [r7, #7]
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d101      	bne.n	80041a8 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
 80041a4:	4b41      	ldr	r3, [pc, #260]	; (80042ac <OSPIM_GetConfig+0x158>)
 80041a6:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80041a8:	2300      	movs	r3, #0
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	e074      	b.n	8004298 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 80041ae:	4a40      	ldr	r2, [pc, #256]	; (80042b0 <OSPIM_GetConfig+0x15c>)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00a      	beq.n	80041da <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	4053      	eors	r3, r2
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d103      	bne.n	80041da <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	1c5a      	adds	r2, r3, #1
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	f003 0310 	and.w	r3, r3, #16
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00a      	beq.n	80041fa <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	4053      	eors	r3, r2
 80041ea:	f003 0320 	and.w	r3, r3, #32
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d103      	bne.n	80041fa <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	4053      	eors	r3, r2
 800420a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800420e:	2b00      	cmp	r3, #0
 8004210:	d103      	bne.n	800421a <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d018      	beq.n	8004256 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	4053      	eors	r3, r2
 800422a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d111      	bne.n	8004256 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d106      	bne.n	800424a <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	3301      	adds	r3, #1
 8004240:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	60da      	str	r2, [r3, #12]
 8004248:	e005      	b.n	8004256 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	3301      	adds	r3, #1
 800424e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d018      	beq.n	8004292 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	4053      	eors	r3, r2
 8004266:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d111      	bne.n	8004292 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d106      	bne.n	8004286 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	3301      	adds	r3, #1
 800427c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	611a      	str	r2, [r3, #16]
 8004284:	e005      	b.n	8004292 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	3301      	adds	r3, #1
 800428a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	3301      	adds	r3, #1
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d987      	bls.n	80041ae <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 800429e:	7dfb      	ldrb	r3, [r7, #23]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	371c      	adds	r7, #28
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	04040222 	.word	0x04040222
 80042b0:	50061c00 	.word	0x50061c00

080042b4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042b8:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a04      	ldr	r2, [pc, #16]	; (80042d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80042be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042c2:	6013      	str	r3, [r2, #0]
}
 80042c4:	bf00      	nop
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	40007000 	.word	0x40007000

080042d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80042d8:	4b0d      	ldr	r3, [pc, #52]	; (8004310 <HAL_PWREx_GetVoltageRange+0x3c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e4:	d102      	bne.n	80042ec <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80042e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042ea:	e00b      	b.n	8004304 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80042ec:	4b08      	ldr	r3, [pc, #32]	; (8004310 <HAL_PWREx_GetVoltageRange+0x3c>)
 80042ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042fa:	d102      	bne.n	8004302 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80042fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004300:	e000      	b.n	8004304 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004302:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004304:	4618      	mov	r0, r3
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	40007000 	.word	0x40007000

08004314 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d141      	bne.n	80043a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004322:	4b4b      	ldr	r3, [pc, #300]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800432a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800432e:	d131      	bne.n	8004394 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004330:	4b47      	ldr	r3, [pc, #284]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004332:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004336:	4a46      	ldr	r2, [pc, #280]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800433c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004340:	4b43      	ldr	r3, [pc, #268]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004348:	4a41      	ldr	r2, [pc, #260]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800434a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800434e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004350:	4b40      	ldr	r3, [pc, #256]	; (8004454 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2232      	movs	r2, #50	; 0x32
 8004356:	fb02 f303 	mul.w	r3, r2, r3
 800435a:	4a3f      	ldr	r2, [pc, #252]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800435c:	fba2 2303 	umull	r2, r3, r2, r3
 8004360:	0c9b      	lsrs	r3, r3, #18
 8004362:	3301      	adds	r3, #1
 8004364:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004366:	e002      	b.n	800436e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	3b01      	subs	r3, #1
 800436c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800436e:	4b38      	ldr	r3, [pc, #224]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800437a:	d102      	bne.n	8004382 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1f2      	bne.n	8004368 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004382:	4b33      	ldr	r3, [pc, #204]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800438a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800438e:	d158      	bne.n	8004442 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e057      	b.n	8004444 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004394:	4b2e      	ldr	r3, [pc, #184]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800439a:	4a2d      	ldr	r2, [pc, #180]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800439c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80043a4:	e04d      	b.n	8004442 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043ac:	d141      	bne.n	8004432 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80043ae:	4b28      	ldr	r3, [pc, #160]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ba:	d131      	bne.n	8004420 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043bc:	4b24      	ldr	r3, [pc, #144]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043c2:	4a23      	ldr	r2, [pc, #140]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043cc:	4b20      	ldr	r3, [pc, #128]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043d4:	4a1e      	ldr	r2, [pc, #120]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80043dc:	4b1d      	ldr	r3, [pc, #116]	; (8004454 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2232      	movs	r2, #50	; 0x32
 80043e2:	fb02 f303 	mul.w	r3, r2, r3
 80043e6:	4a1c      	ldr	r2, [pc, #112]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80043e8:	fba2 2303 	umull	r2, r3, r2, r3
 80043ec:	0c9b      	lsrs	r3, r3, #18
 80043ee:	3301      	adds	r3, #1
 80043f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043f2:	e002      	b.n	80043fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043fa:	4b15      	ldr	r3, [pc, #84]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004406:	d102      	bne.n	800440e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f2      	bne.n	80043f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800440e:	4b10      	ldr	r3, [pc, #64]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800441a:	d112      	bne.n	8004442 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e011      	b.n	8004444 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004420:	4b0b      	ldr	r3, [pc, #44]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004422:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004426:	4a0a      	ldr	r2, [pc, #40]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800442c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004430:	e007      	b.n	8004442 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004432:	4b07      	ldr	r3, [pc, #28]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800443a:	4a05      	ldr	r2, [pc, #20]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800443c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004440:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	40007000 	.word	0x40007000
 8004454:	20000000 	.word	0x20000000
 8004458:	431bde83 	.word	0x431bde83

0800445c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b088      	sub	sp, #32
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d102      	bne.n	8004470 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	f000 bc16 	b.w	8004c9c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004470:	4ba0      	ldr	r3, [pc, #640]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f003 030c 	and.w	r3, r3, #12
 8004478:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800447a:	4b9e      	ldr	r3, [pc, #632]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f003 0303 	and.w	r3, r3, #3
 8004482:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0310 	and.w	r3, r3, #16
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 80e4 	beq.w	800465a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d007      	beq.n	80044a8 <HAL_RCC_OscConfig+0x4c>
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	2b0c      	cmp	r3, #12
 800449c:	f040 808b 	bne.w	80045b6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	f040 8087 	bne.w	80045b6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044a8:	4b92      	ldr	r3, [pc, #584]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d005      	beq.n	80044c0 <HAL_RCC_OscConfig+0x64>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e3ed      	b.n	8004c9c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a1a      	ldr	r2, [r3, #32]
 80044c4:	4b8b      	ldr	r3, [pc, #556]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0308 	and.w	r3, r3, #8
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d004      	beq.n	80044da <HAL_RCC_OscConfig+0x7e>
 80044d0:	4b88      	ldr	r3, [pc, #544]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044d8:	e005      	b.n	80044e6 <HAL_RCC_OscConfig+0x8a>
 80044da:	4b86      	ldr	r3, [pc, #536]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 80044dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044e0:	091b      	lsrs	r3, r3, #4
 80044e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d223      	bcs.n	8004532 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 fdc8 	bl	8005084 <RCC_SetFlashLatencyFromMSIRange>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e3ce      	b.n	8004c9c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044fe:	4b7d      	ldr	r3, [pc, #500]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a7c      	ldr	r2, [pc, #496]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 8004504:	f043 0308 	orr.w	r3, r3, #8
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	4b7a      	ldr	r3, [pc, #488]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	4977      	ldr	r1, [pc, #476]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 8004518:	4313      	orrs	r3, r2
 800451a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800451c:	4b75      	ldr	r3, [pc, #468]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	021b      	lsls	r3, r3, #8
 800452a:	4972      	ldr	r1, [pc, #456]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 800452c:	4313      	orrs	r3, r2
 800452e:	604b      	str	r3, [r1, #4]
 8004530:	e025      	b.n	800457e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004532:	4b70      	ldr	r3, [pc, #448]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a6f      	ldr	r2, [pc, #444]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 8004538:	f043 0308 	orr.w	r3, r3, #8
 800453c:	6013      	str	r3, [r2, #0]
 800453e:	4b6d      	ldr	r3, [pc, #436]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	496a      	ldr	r1, [pc, #424]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 800454c:	4313      	orrs	r3, r2
 800454e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004550:	4b68      	ldr	r3, [pc, #416]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	69db      	ldr	r3, [r3, #28]
 800455c:	021b      	lsls	r3, r3, #8
 800455e:	4965      	ldr	r1, [pc, #404]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 8004560:	4313      	orrs	r3, r2
 8004562:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d109      	bne.n	800457e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	4618      	mov	r0, r3
 8004570:	f000 fd88 	bl	8005084 <RCC_SetFlashLatencyFromMSIRange>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e38e      	b.n	8004c9c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800457e:	f000 fcbf 	bl	8004f00 <HAL_RCC_GetSysClockFreq>
 8004582:	4601      	mov	r1, r0
 8004584:	4b5b      	ldr	r3, [pc, #364]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	091b      	lsrs	r3, r3, #4
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	4a5a      	ldr	r2, [pc, #360]	; (80046f8 <HAL_RCC_OscConfig+0x29c>)
 8004590:	5cd3      	ldrb	r3, [r2, r3]
 8004592:	f003 031f 	and.w	r3, r3, #31
 8004596:	fa21 f303 	lsr.w	r3, r1, r3
 800459a:	4a58      	ldr	r2, [pc, #352]	; (80046fc <HAL_RCC_OscConfig+0x2a0>)
 800459c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800459e:	4b58      	ldr	r3, [pc, #352]	; (8004700 <HAL_RCC_OscConfig+0x2a4>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7fd fb90 	bl	8001cc8 <HAL_InitTick>
 80045a8:	4603      	mov	r3, r0
 80045aa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80045ac:	7bfb      	ldrb	r3, [r7, #15]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d052      	beq.n	8004658 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
 80045b4:	e372      	b.n	8004c9c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d032      	beq.n	8004624 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80045be:	4b4d      	ldr	r3, [pc, #308]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a4c      	ldr	r2, [pc, #304]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 80045c4:	f043 0301 	orr.w	r3, r3, #1
 80045c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045ca:	f7fd fbcd 	bl	8001d68 <HAL_GetTick>
 80045ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045d0:	e008      	b.n	80045e4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045d2:	f7fd fbc9 	bl	8001d68 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d901      	bls.n	80045e4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e35b      	b.n	8004c9c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045e4:	4b43      	ldr	r3, [pc, #268]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d0f0      	beq.n	80045d2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045f0:	4b40      	ldr	r3, [pc, #256]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a3f      	ldr	r2, [pc, #252]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 80045f6:	f043 0308 	orr.w	r3, r3, #8
 80045fa:	6013      	str	r3, [r2, #0]
 80045fc:	4b3d      	ldr	r3, [pc, #244]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	493a      	ldr	r1, [pc, #232]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 800460a:	4313      	orrs	r3, r2
 800460c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800460e:	4b39      	ldr	r3, [pc, #228]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	021b      	lsls	r3, r3, #8
 800461c:	4935      	ldr	r1, [pc, #212]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 800461e:	4313      	orrs	r3, r2
 8004620:	604b      	str	r3, [r1, #4]
 8004622:	e01a      	b.n	800465a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004624:	4b33      	ldr	r3, [pc, #204]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a32      	ldr	r2, [pc, #200]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 800462a:	f023 0301 	bic.w	r3, r3, #1
 800462e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004630:	f7fd fb9a 	bl	8001d68 <HAL_GetTick>
 8004634:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004636:	e008      	b.n	800464a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004638:	f7fd fb96 	bl	8001d68 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e328      	b.n	8004c9c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800464a:	4b2a      	ldr	r3, [pc, #168]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1f0      	bne.n	8004638 <HAL_RCC_OscConfig+0x1dc>
 8004656:	e000      	b.n	800465a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004658:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d073      	beq.n	800474e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	2b08      	cmp	r3, #8
 800466a:	d005      	beq.n	8004678 <HAL_RCC_OscConfig+0x21c>
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	2b0c      	cmp	r3, #12
 8004670:	d10e      	bne.n	8004690 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	2b03      	cmp	r3, #3
 8004676:	d10b      	bne.n	8004690 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004678:	4b1e      	ldr	r3, [pc, #120]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d063      	beq.n	800474c <HAL_RCC_OscConfig+0x2f0>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d15f      	bne.n	800474c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e305      	b.n	8004c9c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004698:	d106      	bne.n	80046a8 <HAL_RCC_OscConfig+0x24c>
 800469a:	4b16      	ldr	r3, [pc, #88]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a15      	ldr	r2, [pc, #84]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 80046a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046a4:	6013      	str	r3, [r2, #0]
 80046a6:	e01d      	b.n	80046e4 <HAL_RCC_OscConfig+0x288>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046b0:	d10c      	bne.n	80046cc <HAL_RCC_OscConfig+0x270>
 80046b2:	4b10      	ldr	r3, [pc, #64]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a0f      	ldr	r2, [pc, #60]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 80046b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046bc:	6013      	str	r3, [r2, #0]
 80046be:	4b0d      	ldr	r3, [pc, #52]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a0c      	ldr	r2, [pc, #48]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 80046c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	e00b      	b.n	80046e4 <HAL_RCC_OscConfig+0x288>
 80046cc:	4b09      	ldr	r3, [pc, #36]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a08      	ldr	r2, [pc, #32]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 80046d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046d6:	6013      	str	r3, [r2, #0]
 80046d8:	4b06      	ldr	r3, [pc, #24]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a05      	ldr	r2, [pc, #20]	; (80046f4 <HAL_RCC_OscConfig+0x298>)
 80046de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d01b      	beq.n	8004724 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ec:	f7fd fb3c 	bl	8001d68 <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046f2:	e010      	b.n	8004716 <HAL_RCC_OscConfig+0x2ba>
 80046f4:	40021000 	.word	0x40021000
 80046f8:	080072b8 	.word	0x080072b8
 80046fc:	20000000 	.word	0x20000000
 8004700:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004704:	f7fd fb30 	bl	8001d68 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b64      	cmp	r3, #100	; 0x64
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e2c2      	b.n	8004c9c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004716:	4baf      	ldr	r3, [pc, #700]	; (80049d4 <HAL_RCC_OscConfig+0x578>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d0f0      	beq.n	8004704 <HAL_RCC_OscConfig+0x2a8>
 8004722:	e014      	b.n	800474e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004724:	f7fd fb20 	bl	8001d68 <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800472c:	f7fd fb1c 	bl	8001d68 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b64      	cmp	r3, #100	; 0x64
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e2ae      	b.n	8004c9c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800473e:	4ba5      	ldr	r3, [pc, #660]	; (80049d4 <HAL_RCC_OscConfig+0x578>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1f0      	bne.n	800472c <HAL_RCC_OscConfig+0x2d0>
 800474a:	e000      	b.n	800474e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800474c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d060      	beq.n	800481c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	2b04      	cmp	r3, #4
 800475e:	d005      	beq.n	800476c <HAL_RCC_OscConfig+0x310>
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	2b0c      	cmp	r3, #12
 8004764:	d119      	bne.n	800479a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	2b02      	cmp	r3, #2
 800476a:	d116      	bne.n	800479a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800476c:	4b99      	ldr	r3, [pc, #612]	; (80049d4 <HAL_RCC_OscConfig+0x578>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004774:	2b00      	cmp	r3, #0
 8004776:	d005      	beq.n	8004784 <HAL_RCC_OscConfig+0x328>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e28b      	b.n	8004c9c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004784:	4b93      	ldr	r3, [pc, #588]	; (80049d4 <HAL_RCC_OscConfig+0x578>)
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	061b      	lsls	r3, r3, #24
 8004792:	4990      	ldr	r1, [pc, #576]	; (80049d4 <HAL_RCC_OscConfig+0x578>)
 8004794:	4313      	orrs	r3, r2
 8004796:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004798:	e040      	b.n	800481c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d023      	beq.n	80047ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047a2:	4b8c      	ldr	r3, [pc, #560]	; (80049d4 <HAL_RCC_OscConfig+0x578>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a8b      	ldr	r2, [pc, #556]	; (80049d4 <HAL_RCC_OscConfig+0x578>)
 80047a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ae:	f7fd fadb 	bl	8001d68 <HAL_GetTick>
 80047b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047b4:	e008      	b.n	80047c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047b6:	f7fd fad7 	bl	8001d68 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e269      	b.n	8004c9c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047c8:	4b82      	ldr	r3, [pc, #520]	; (80049d4 <HAL_RCC_OscConfig+0x578>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d0f0      	beq.n	80047b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047d4:	4b7f      	ldr	r3, [pc, #508]	; (80049d4 <HAL_RCC_OscConfig+0x578>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	061b      	lsls	r3, r3, #24
 80047e2:	497c      	ldr	r1, [pc, #496]	; (80049d4 <HAL_RCC_OscConfig+0x578>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	604b      	str	r3, [r1, #4]
 80047e8:	e018      	b.n	800481c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047ea:	4b7a      	ldr	r3, [pc, #488]	; (80049d4 <HAL_RCC_OscConfig+0x578>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a79      	ldr	r2, [pc, #484]	; (80049d4 <HAL_RCC_OscConfig+0x578>)
 80047f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f6:	f7fd fab7 	bl	8001d68 <HAL_GetTick>
 80047fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047fc:	e008      	b.n	8004810 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047fe:	f7fd fab3 	bl	8001d68 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d901      	bls.n	8004810 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e245      	b.n	8004c9c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004810:	4b70      	ldr	r3, [pc, #448]	; (80049d4 <HAL_RCC_OscConfig+0x578>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1f0      	bne.n	80047fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0308 	and.w	r3, r3, #8
 8004824:	2b00      	cmp	r3, #0
 8004826:	d03c      	beq.n	80048a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d01c      	beq.n	800486a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004830:	4b68      	ldr	r3, [pc, #416]	; (80049d4 <HAL_RCC_OscConfig+0x578>)
 8004832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004836:	4a67      	ldr	r2, [pc, #412]	; (80049d4 <HAL_RCC_OscConfig+0x578>)
 8004838:	f043 0301 	orr.w	r3, r3, #1
 800483c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004840:	f7fd fa92 	bl	8001d68 <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004846:	e008      	b.n	800485a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004848:	f7fd fa8e 	bl	8001d68 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b02      	cmp	r3, #2
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e220      	b.n	8004c9c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800485a:	4b5e      	ldr	r3, [pc, #376]	; (80049d4 <HAL_RCC_OscConfig+0x578>)
 800485c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d0ef      	beq.n	8004848 <HAL_RCC_OscConfig+0x3ec>
 8004868:	e01b      	b.n	80048a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800486a:	4b5a      	ldr	r3, [pc, #360]	; (80049d4 <HAL_RCC_OscConfig+0x578>)
 800486c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004870:	4a58      	ldr	r2, [pc, #352]	; (80049d4 <HAL_RCC_OscConfig+0x578>)
 8004872:	f023 0301 	bic.w	r3, r3, #1
 8004876:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800487a:	f7fd fa75 	bl	8001d68 <HAL_GetTick>
 800487e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004880:	e008      	b.n	8004894 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004882:	f7fd fa71 	bl	8001d68 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d901      	bls.n	8004894 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e203      	b.n	8004c9c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004894:	4b4f      	ldr	r3, [pc, #316]	; (80049d4 <HAL_RCC_OscConfig+0x578>)
 8004896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1ef      	bne.n	8004882 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0304 	and.w	r3, r3, #4
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f000 80a6 	beq.w	80049fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048b0:	2300      	movs	r3, #0
 80048b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80048b4:	4b47      	ldr	r3, [pc, #284]	; (80049d4 <HAL_RCC_OscConfig+0x578>)
 80048b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10d      	bne.n	80048dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048c0:	4b44      	ldr	r3, [pc, #272]	; (80049d4 <HAL_RCC_OscConfig+0x578>)
 80048c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c4:	4a43      	ldr	r2, [pc, #268]	; (80049d4 <HAL_RCC_OscConfig+0x578>)
 80048c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ca:	6593      	str	r3, [r2, #88]	; 0x58
 80048cc:	4b41      	ldr	r3, [pc, #260]	; (80049d4 <HAL_RCC_OscConfig+0x578>)
 80048ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d4:	60bb      	str	r3, [r7, #8]
 80048d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048d8:	2301      	movs	r3, #1
 80048da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048dc:	4b3e      	ldr	r3, [pc, #248]	; (80049d8 <HAL_RCC_OscConfig+0x57c>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d118      	bne.n	800491a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048e8:	4b3b      	ldr	r3, [pc, #236]	; (80049d8 <HAL_RCC_OscConfig+0x57c>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a3a      	ldr	r2, [pc, #232]	; (80049d8 <HAL_RCC_OscConfig+0x57c>)
 80048ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048f4:	f7fd fa38 	bl	8001d68 <HAL_GetTick>
 80048f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048fa:	e008      	b.n	800490e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048fc:	f7fd fa34 	bl	8001d68 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b02      	cmp	r3, #2
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e1c6      	b.n	8004c9c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800490e:	4b32      	ldr	r3, [pc, #200]	; (80049d8 <HAL_RCC_OscConfig+0x57c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004916:	2b00      	cmp	r3, #0
 8004918:	d0f0      	beq.n	80048fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d108      	bne.n	8004934 <HAL_RCC_OscConfig+0x4d8>
 8004922:	4b2c      	ldr	r3, [pc, #176]	; (80049d4 <HAL_RCC_OscConfig+0x578>)
 8004924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004928:	4a2a      	ldr	r2, [pc, #168]	; (80049d4 <HAL_RCC_OscConfig+0x578>)
 800492a:	f043 0301 	orr.w	r3, r3, #1
 800492e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004932:	e024      	b.n	800497e <HAL_RCC_OscConfig+0x522>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	2b05      	cmp	r3, #5
 800493a:	d110      	bne.n	800495e <HAL_RCC_OscConfig+0x502>
 800493c:	4b25      	ldr	r3, [pc, #148]	; (80049d4 <HAL_RCC_OscConfig+0x578>)
 800493e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004942:	4a24      	ldr	r2, [pc, #144]	; (80049d4 <HAL_RCC_OscConfig+0x578>)
 8004944:	f043 0304 	orr.w	r3, r3, #4
 8004948:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800494c:	4b21      	ldr	r3, [pc, #132]	; (80049d4 <HAL_RCC_OscConfig+0x578>)
 800494e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004952:	4a20      	ldr	r2, [pc, #128]	; (80049d4 <HAL_RCC_OscConfig+0x578>)
 8004954:	f043 0301 	orr.w	r3, r3, #1
 8004958:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800495c:	e00f      	b.n	800497e <HAL_RCC_OscConfig+0x522>
 800495e:	4b1d      	ldr	r3, [pc, #116]	; (80049d4 <HAL_RCC_OscConfig+0x578>)
 8004960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004964:	4a1b      	ldr	r2, [pc, #108]	; (80049d4 <HAL_RCC_OscConfig+0x578>)
 8004966:	f023 0301 	bic.w	r3, r3, #1
 800496a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800496e:	4b19      	ldr	r3, [pc, #100]	; (80049d4 <HAL_RCC_OscConfig+0x578>)
 8004970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004974:	4a17      	ldr	r2, [pc, #92]	; (80049d4 <HAL_RCC_OscConfig+0x578>)
 8004976:	f023 0304 	bic.w	r3, r3, #4
 800497a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d016      	beq.n	80049b4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004986:	f7fd f9ef 	bl	8001d68 <HAL_GetTick>
 800498a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800498c:	e00a      	b.n	80049a4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800498e:	f7fd f9eb 	bl	8001d68 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	f241 3288 	movw	r2, #5000	; 0x1388
 800499c:	4293      	cmp	r3, r2
 800499e:	d901      	bls.n	80049a4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e17b      	b.n	8004c9c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049a4:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <HAL_RCC_OscConfig+0x578>)
 80049a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0ed      	beq.n	800498e <HAL_RCC_OscConfig+0x532>
 80049b2:	e01a      	b.n	80049ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b4:	f7fd f9d8 	bl	8001d68 <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049ba:	e00f      	b.n	80049dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049bc:	f7fd f9d4 	bl	8001d68 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d906      	bls.n	80049dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e164      	b.n	8004c9c <HAL_RCC_OscConfig+0x840>
 80049d2:	bf00      	nop
 80049d4:	40021000 	.word	0x40021000
 80049d8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049dc:	4ba8      	ldr	r3, [pc, #672]	; (8004c80 <HAL_RCC_OscConfig+0x824>)
 80049de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1e8      	bne.n	80049bc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049ea:	7ffb      	ldrb	r3, [r7, #31]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d105      	bne.n	80049fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049f0:	4ba3      	ldr	r3, [pc, #652]	; (8004c80 <HAL_RCC_OscConfig+0x824>)
 80049f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f4:	4aa2      	ldr	r2, [pc, #648]	; (8004c80 <HAL_RCC_OscConfig+0x824>)
 80049f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049fa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0320 	and.w	r3, r3, #32
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d03c      	beq.n	8004a82 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d01c      	beq.n	8004a4a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a10:	4b9b      	ldr	r3, [pc, #620]	; (8004c80 <HAL_RCC_OscConfig+0x824>)
 8004a12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a16:	4a9a      	ldr	r2, [pc, #616]	; (8004c80 <HAL_RCC_OscConfig+0x824>)
 8004a18:	f043 0301 	orr.w	r3, r3, #1
 8004a1c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a20:	f7fd f9a2 	bl	8001d68 <HAL_GetTick>
 8004a24:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a28:	f7fd f99e 	bl	8001d68 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e130      	b.n	8004c9c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a3a:	4b91      	ldr	r3, [pc, #580]	; (8004c80 <HAL_RCC_OscConfig+0x824>)
 8004a3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d0ef      	beq.n	8004a28 <HAL_RCC_OscConfig+0x5cc>
 8004a48:	e01b      	b.n	8004a82 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a4a:	4b8d      	ldr	r3, [pc, #564]	; (8004c80 <HAL_RCC_OscConfig+0x824>)
 8004a4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a50:	4a8b      	ldr	r2, [pc, #556]	; (8004c80 <HAL_RCC_OscConfig+0x824>)
 8004a52:	f023 0301 	bic.w	r3, r3, #1
 8004a56:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a5a:	f7fd f985 	bl	8001d68 <HAL_GetTick>
 8004a5e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a60:	e008      	b.n	8004a74 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a62:	f7fd f981 	bl	8001d68 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e113      	b.n	8004c9c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a74:	4b82      	ldr	r3, [pc, #520]	; (8004c80 <HAL_RCC_OscConfig+0x824>)
 8004a76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1ef      	bne.n	8004a62 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 8107 	beq.w	8004c9a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	f040 80cb 	bne.w	8004c2c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a96:	4b7a      	ldr	r3, [pc, #488]	; (8004c80 <HAL_RCC_OscConfig+0x824>)
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f003 0203 	and.w	r2, r3, #3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d12c      	bne.n	8004b04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d123      	bne.n	8004b04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d11b      	bne.n	8004b04 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d113      	bne.n	8004b04 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae6:	085b      	lsrs	r3, r3, #1
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d109      	bne.n	8004b04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	085b      	lsrs	r3, r3, #1
 8004afc:	3b01      	subs	r3, #1
 8004afe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d06d      	beq.n	8004be0 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	2b0c      	cmp	r3, #12
 8004b08:	d068      	beq.n	8004bdc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b0a:	4b5d      	ldr	r3, [pc, #372]	; (8004c80 <HAL_RCC_OscConfig+0x824>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d105      	bne.n	8004b22 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004b16:	4b5a      	ldr	r3, [pc, #360]	; (8004c80 <HAL_RCC_OscConfig+0x824>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e0ba      	b.n	8004c9c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b26:	4b56      	ldr	r3, [pc, #344]	; (8004c80 <HAL_RCC_OscConfig+0x824>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a55      	ldr	r2, [pc, #340]	; (8004c80 <HAL_RCC_OscConfig+0x824>)
 8004b2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b30:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b32:	f7fd f919 	bl	8001d68 <HAL_GetTick>
 8004b36:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b38:	e008      	b.n	8004b4c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b3a:	f7fd f915 	bl	8001d68 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d901      	bls.n	8004b4c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e0a7      	b.n	8004c9c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b4c:	4b4c      	ldr	r3, [pc, #304]	; (8004c80 <HAL_RCC_OscConfig+0x824>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1f0      	bne.n	8004b3a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b58:	4b49      	ldr	r3, [pc, #292]	; (8004c80 <HAL_RCC_OscConfig+0x824>)
 8004b5a:	68da      	ldr	r2, [r3, #12]
 8004b5c:	4b49      	ldr	r3, [pc, #292]	; (8004c84 <HAL_RCC_OscConfig+0x828>)
 8004b5e:	4013      	ands	r3, r2
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b68:	3a01      	subs	r2, #1
 8004b6a:	0112      	lsls	r2, r2, #4
 8004b6c:	4311      	orrs	r1, r2
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b72:	0212      	lsls	r2, r2, #8
 8004b74:	4311      	orrs	r1, r2
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b7a:	0852      	lsrs	r2, r2, #1
 8004b7c:	3a01      	subs	r2, #1
 8004b7e:	0552      	lsls	r2, r2, #21
 8004b80:	4311      	orrs	r1, r2
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b86:	0852      	lsrs	r2, r2, #1
 8004b88:	3a01      	subs	r2, #1
 8004b8a:	0652      	lsls	r2, r2, #25
 8004b8c:	4311      	orrs	r1, r2
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b92:	06d2      	lsls	r2, r2, #27
 8004b94:	430a      	orrs	r2, r1
 8004b96:	493a      	ldr	r1, [pc, #232]	; (8004c80 <HAL_RCC_OscConfig+0x824>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b9c:	4b38      	ldr	r3, [pc, #224]	; (8004c80 <HAL_RCC_OscConfig+0x824>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a37      	ldr	r2, [pc, #220]	; (8004c80 <HAL_RCC_OscConfig+0x824>)
 8004ba2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ba6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ba8:	4b35      	ldr	r3, [pc, #212]	; (8004c80 <HAL_RCC_OscConfig+0x824>)
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	4a34      	ldr	r2, [pc, #208]	; (8004c80 <HAL_RCC_OscConfig+0x824>)
 8004bae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bb2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bb4:	f7fd f8d8 	bl	8001d68 <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bbc:	f7fd f8d4 	bl	8001d68 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e066      	b.n	8004c9c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bce:	4b2c      	ldr	r3, [pc, #176]	; (8004c80 <HAL_RCC_OscConfig+0x824>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0f0      	beq.n	8004bbc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bda:	e05e      	b.n	8004c9a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e05d      	b.n	8004c9c <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004be0:	4b27      	ldr	r3, [pc, #156]	; (8004c80 <HAL_RCC_OscConfig+0x824>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d156      	bne.n	8004c9a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004bec:	4b24      	ldr	r3, [pc, #144]	; (8004c80 <HAL_RCC_OscConfig+0x824>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a23      	ldr	r2, [pc, #140]	; (8004c80 <HAL_RCC_OscConfig+0x824>)
 8004bf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bf6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bf8:	4b21      	ldr	r3, [pc, #132]	; (8004c80 <HAL_RCC_OscConfig+0x824>)
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	4a20      	ldr	r2, [pc, #128]	; (8004c80 <HAL_RCC_OscConfig+0x824>)
 8004bfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c04:	f7fd f8b0 	bl	8001d68 <HAL_GetTick>
 8004c08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c0a:	e008      	b.n	8004c1e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c0c:	f7fd f8ac 	bl	8001d68 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e03e      	b.n	8004c9c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c1e:	4b18      	ldr	r3, [pc, #96]	; (8004c80 <HAL_RCC_OscConfig+0x824>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0f0      	beq.n	8004c0c <HAL_RCC_OscConfig+0x7b0>
 8004c2a:	e036      	b.n	8004c9a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	2b0c      	cmp	r3, #12
 8004c30:	d031      	beq.n	8004c96 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c32:	4b13      	ldr	r3, [pc, #76]	; (8004c80 <HAL_RCC_OscConfig+0x824>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a12      	ldr	r2, [pc, #72]	; (8004c80 <HAL_RCC_OscConfig+0x824>)
 8004c38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c3c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004c3e:	4b10      	ldr	r3, [pc, #64]	; (8004c80 <HAL_RCC_OscConfig+0x824>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d105      	bne.n	8004c56 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004c4a:	4b0d      	ldr	r3, [pc, #52]	; (8004c80 <HAL_RCC_OscConfig+0x824>)
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	4a0c      	ldr	r2, [pc, #48]	; (8004c80 <HAL_RCC_OscConfig+0x824>)
 8004c50:	f023 0303 	bic.w	r3, r3, #3
 8004c54:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004c56:	4b0a      	ldr	r3, [pc, #40]	; (8004c80 <HAL_RCC_OscConfig+0x824>)
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	4a09      	ldr	r2, [pc, #36]	; (8004c80 <HAL_RCC_OscConfig+0x824>)
 8004c5c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c64:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c66:	f7fd f87f 	bl	8001d68 <HAL_GetTick>
 8004c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c6c:	e00c      	b.n	8004c88 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c6e:	f7fd f87b 	bl	8001d68 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d905      	bls.n	8004c88 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e00d      	b.n	8004c9c <HAL_RCC_OscConfig+0x840>
 8004c80:	40021000 	.word	0x40021000
 8004c84:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c88:	4b06      	ldr	r3, [pc, #24]	; (8004ca4 <HAL_RCC_OscConfig+0x848>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1ec      	bne.n	8004c6e <HAL_RCC_OscConfig+0x812>
 8004c94:	e001      	b.n	8004c9a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3720      	adds	r7, #32
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40021000 	.word	0x40021000

08004ca8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d101      	bne.n	8004cc0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e10f      	b.n	8004ee0 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cc0:	4b89      	ldr	r3, [pc, #548]	; (8004ee8 <HAL_RCC_ClockConfig+0x240>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 030f 	and.w	r3, r3, #15
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d910      	bls.n	8004cf0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cce:	4b86      	ldr	r3, [pc, #536]	; (8004ee8 <HAL_RCC_ClockConfig+0x240>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f023 020f 	bic.w	r2, r3, #15
 8004cd6:	4984      	ldr	r1, [pc, #528]	; (8004ee8 <HAL_RCC_ClockConfig+0x240>)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cde:	4b82      	ldr	r3, [pc, #520]	; (8004ee8 <HAL_RCC_ClockConfig+0x240>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 030f 	and.w	r3, r3, #15
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d001      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e0f7      	b.n	8004ee0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f000 8089 	beq.w	8004e10 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2b03      	cmp	r3, #3
 8004d04:	d133      	bne.n	8004d6e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d06:	4b79      	ldr	r3, [pc, #484]	; (8004eec <HAL_RCC_ClockConfig+0x244>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e0e4      	b.n	8004ee0 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004d16:	f000 fa0f 	bl	8005138 <RCC_GetSysClockFreqFromPLLSource>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	4b74      	ldr	r3, [pc, #464]	; (8004ef0 <HAL_RCC_ClockConfig+0x248>)
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d955      	bls.n	8004dce <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004d22:	4b72      	ldr	r3, [pc, #456]	; (8004eec <HAL_RCC_ClockConfig+0x244>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10a      	bne.n	8004d44 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d2e:	4b6f      	ldr	r3, [pc, #444]	; (8004eec <HAL_RCC_ClockConfig+0x244>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d36:	4a6d      	ldr	r2, [pc, #436]	; (8004eec <HAL_RCC_ClockConfig+0x244>)
 8004d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d3c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004d3e:	2380      	movs	r3, #128	; 0x80
 8004d40:	617b      	str	r3, [r7, #20]
 8004d42:	e044      	b.n	8004dce <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d03e      	beq.n	8004dce <HAL_RCC_ClockConfig+0x126>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d13a      	bne.n	8004dce <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d58:	4b64      	ldr	r3, [pc, #400]	; (8004eec <HAL_RCC_ClockConfig+0x244>)
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d60:	4a62      	ldr	r2, [pc, #392]	; (8004eec <HAL_RCC_ClockConfig+0x244>)
 8004d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d66:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004d68:	2380      	movs	r3, #128	; 0x80
 8004d6a:	617b      	str	r3, [r7, #20]
 8004d6c:	e02f      	b.n	8004dce <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d107      	bne.n	8004d86 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d76:	4b5d      	ldr	r3, [pc, #372]	; (8004eec <HAL_RCC_ClockConfig+0x244>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d115      	bne.n	8004dae <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e0ac      	b.n	8004ee0 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d107      	bne.n	8004d9e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d8e:	4b57      	ldr	r3, [pc, #348]	; (8004eec <HAL_RCC_ClockConfig+0x244>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d109      	bne.n	8004dae <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e0a0      	b.n	8004ee0 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d9e:	4b53      	ldr	r3, [pc, #332]	; (8004eec <HAL_RCC_ClockConfig+0x244>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e098      	b.n	8004ee0 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004dae:	f000 f8a7 	bl	8004f00 <HAL_RCC_GetSysClockFreq>
 8004db2:	4602      	mov	r2, r0
 8004db4:	4b4e      	ldr	r3, [pc, #312]	; (8004ef0 <HAL_RCC_ClockConfig+0x248>)
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d909      	bls.n	8004dce <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004dba:	4b4c      	ldr	r3, [pc, #304]	; (8004eec <HAL_RCC_ClockConfig+0x244>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dc2:	4a4a      	ldr	r2, [pc, #296]	; (8004eec <HAL_RCC_ClockConfig+0x244>)
 8004dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dc8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004dca:	2380      	movs	r3, #128	; 0x80
 8004dcc:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004dce:	4b47      	ldr	r3, [pc, #284]	; (8004eec <HAL_RCC_ClockConfig+0x244>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f023 0203 	bic.w	r2, r3, #3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	4944      	ldr	r1, [pc, #272]	; (8004eec <HAL_RCC_ClockConfig+0x244>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004de0:	f7fc ffc2 	bl	8001d68 <HAL_GetTick>
 8004de4:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004de6:	e00a      	b.n	8004dfe <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004de8:	f7fc ffbe 	bl	8001d68 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e070      	b.n	8004ee0 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dfe:	4b3b      	ldr	r3, [pc, #236]	; (8004eec <HAL_RCC_ClockConfig+0x244>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f003 020c 	and.w	r2, r3, #12
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d1eb      	bne.n	8004de8 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0302 	and.w	r3, r3, #2
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d009      	beq.n	8004e30 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e1c:	4b33      	ldr	r3, [pc, #204]	; (8004eec <HAL_RCC_ClockConfig+0x244>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	4930      	ldr	r1, [pc, #192]	; (8004eec <HAL_RCC_ClockConfig+0x244>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	608b      	str	r3, [r1, #8]
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	2b80      	cmp	r3, #128	; 0x80
 8004e34:	d105      	bne.n	8004e42 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004e36:	4b2d      	ldr	r3, [pc, #180]	; (8004eec <HAL_RCC_ClockConfig+0x244>)
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	4a2c      	ldr	r2, [pc, #176]	; (8004eec <HAL_RCC_ClockConfig+0x244>)
 8004e3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e40:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e42:	4b29      	ldr	r3, [pc, #164]	; (8004ee8 <HAL_RCC_ClockConfig+0x240>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 030f 	and.w	r3, r3, #15
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d210      	bcs.n	8004e72 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e50:	4b25      	ldr	r3, [pc, #148]	; (8004ee8 <HAL_RCC_ClockConfig+0x240>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f023 020f 	bic.w	r2, r3, #15
 8004e58:	4923      	ldr	r1, [pc, #140]	; (8004ee8 <HAL_RCC_ClockConfig+0x240>)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e60:	4b21      	ldr	r3, [pc, #132]	; (8004ee8 <HAL_RCC_ClockConfig+0x240>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 030f 	and.w	r3, r3, #15
 8004e68:	683a      	ldr	r2, [r7, #0]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d001      	beq.n	8004e72 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e036      	b.n	8004ee0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0304 	and.w	r3, r3, #4
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d008      	beq.n	8004e90 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e7e:	4b1b      	ldr	r3, [pc, #108]	; (8004eec <HAL_RCC_ClockConfig+0x244>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	4918      	ldr	r1, [pc, #96]	; (8004eec <HAL_RCC_ClockConfig+0x244>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0308 	and.w	r3, r3, #8
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d009      	beq.n	8004eb0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e9c:	4b13      	ldr	r3, [pc, #76]	; (8004eec <HAL_RCC_ClockConfig+0x244>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	00db      	lsls	r3, r3, #3
 8004eaa:	4910      	ldr	r1, [pc, #64]	; (8004eec <HAL_RCC_ClockConfig+0x244>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004eb0:	f000 f826 	bl	8004f00 <HAL_RCC_GetSysClockFreq>
 8004eb4:	4601      	mov	r1, r0
 8004eb6:	4b0d      	ldr	r3, [pc, #52]	; (8004eec <HAL_RCC_ClockConfig+0x244>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	091b      	lsrs	r3, r3, #4
 8004ebc:	f003 030f 	and.w	r3, r3, #15
 8004ec0:	4a0c      	ldr	r2, [pc, #48]	; (8004ef4 <HAL_RCC_ClockConfig+0x24c>)
 8004ec2:	5cd3      	ldrb	r3, [r2, r3]
 8004ec4:	f003 031f 	and.w	r3, r3, #31
 8004ec8:	fa21 f303 	lsr.w	r3, r1, r3
 8004ecc:	4a0a      	ldr	r2, [pc, #40]	; (8004ef8 <HAL_RCC_ClockConfig+0x250>)
 8004ece:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ed0:	4b0a      	ldr	r3, [pc, #40]	; (8004efc <HAL_RCC_ClockConfig+0x254>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7fc fef7 	bl	8001cc8 <HAL_InitTick>
 8004eda:	4603      	mov	r3, r0
 8004edc:	73fb      	strb	r3, [r7, #15]

  return status;
 8004ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3718      	adds	r7, #24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	40022000 	.word	0x40022000
 8004eec:	40021000 	.word	0x40021000
 8004ef0:	04c4b400 	.word	0x04c4b400
 8004ef4:	080072b8 	.word	0x080072b8
 8004ef8:	20000000 	.word	0x20000000
 8004efc:	20000004 	.word	0x20000004

08004f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b089      	sub	sp, #36	; 0x24
 8004f04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004f06:	2300      	movs	r3, #0
 8004f08:	61fb      	str	r3, [r7, #28]
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f0e:	4b3d      	ldr	r3, [pc, #244]	; (8005004 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f003 030c 	and.w	r3, r3, #12
 8004f16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f18:	4b3a      	ldr	r3, [pc, #232]	; (8005004 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f003 0303 	and.w	r3, r3, #3
 8004f20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d005      	beq.n	8004f34 <HAL_RCC_GetSysClockFreq+0x34>
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	2b0c      	cmp	r3, #12
 8004f2c:	d121      	bne.n	8004f72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d11e      	bne.n	8004f72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004f34:	4b33      	ldr	r3, [pc, #204]	; (8005004 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0308 	and.w	r3, r3, #8
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d107      	bne.n	8004f50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f40:	4b30      	ldr	r3, [pc, #192]	; (8005004 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f46:	0a1b      	lsrs	r3, r3, #8
 8004f48:	f003 030f 	and.w	r3, r3, #15
 8004f4c:	61fb      	str	r3, [r7, #28]
 8004f4e:	e005      	b.n	8004f5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004f50:	4b2c      	ldr	r3, [pc, #176]	; (8005004 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	091b      	lsrs	r3, r3, #4
 8004f56:	f003 030f 	and.w	r3, r3, #15
 8004f5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004f5c:	4a2a      	ldr	r2, [pc, #168]	; (8005008 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10d      	bne.n	8004f88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f70:	e00a      	b.n	8004f88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	2b04      	cmp	r3, #4
 8004f76:	d102      	bne.n	8004f7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f78:	4b24      	ldr	r3, [pc, #144]	; (800500c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004f7a:	61bb      	str	r3, [r7, #24]
 8004f7c:	e004      	b.n	8004f88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	2b08      	cmp	r3, #8
 8004f82:	d101      	bne.n	8004f88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f84:	4b22      	ldr	r3, [pc, #136]	; (8005010 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	2b0c      	cmp	r3, #12
 8004f8c:	d133      	bne.n	8004ff6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f8e:	4b1d      	ldr	r3, [pc, #116]	; (8005004 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	f003 0303 	and.w	r3, r3, #3
 8004f96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d002      	beq.n	8004fa4 <HAL_RCC_GetSysClockFreq+0xa4>
 8004f9e:	2b03      	cmp	r3, #3
 8004fa0:	d003      	beq.n	8004faa <HAL_RCC_GetSysClockFreq+0xaa>
 8004fa2:	e005      	b.n	8004fb0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004fa4:	4b19      	ldr	r3, [pc, #100]	; (800500c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004fa6:	617b      	str	r3, [r7, #20]
      break;
 8004fa8:	e005      	b.n	8004fb6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004faa:	4b19      	ldr	r3, [pc, #100]	; (8005010 <HAL_RCC_GetSysClockFreq+0x110>)
 8004fac:	617b      	str	r3, [r7, #20]
      break;
 8004fae:	e002      	b.n	8004fb6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	617b      	str	r3, [r7, #20]
      break;
 8004fb4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fb6:	4b13      	ldr	r3, [pc, #76]	; (8005004 <HAL_RCC_GetSysClockFreq+0x104>)
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	091b      	lsrs	r3, r3, #4
 8004fbc:	f003 030f 	and.w	r3, r3, #15
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004fc4:	4b0f      	ldr	r3, [pc, #60]	; (8005004 <HAL_RCC_GetSysClockFreq+0x104>)
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	0a1b      	lsrs	r3, r3, #8
 8004fca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	fb02 f203 	mul.w	r2, r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fda:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004fdc:	4b09      	ldr	r3, [pc, #36]	; (8005004 <HAL_RCC_GetSysClockFreq+0x104>)
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	0e5b      	lsrs	r3, r3, #25
 8004fe2:	f003 0303 	and.w	r3, r3, #3
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	005b      	lsls	r3, r3, #1
 8004fea:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004ff6:	69bb      	ldr	r3, [r7, #24]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3724      	adds	r7, #36	; 0x24
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	40021000 	.word	0x40021000
 8005008:	080072d0 	.word	0x080072d0
 800500c:	00f42400 	.word	0x00f42400
 8005010:	007a1200 	.word	0x007a1200

08005014 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005014:	b480      	push	{r7}
 8005016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005018:	4b03      	ldr	r3, [pc, #12]	; (8005028 <HAL_RCC_GetHCLKFreq+0x14>)
 800501a:	681b      	ldr	r3, [r3, #0]
}
 800501c:	4618      	mov	r0, r3
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	20000000 	.word	0x20000000

0800502c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005030:	f7ff fff0 	bl	8005014 <HAL_RCC_GetHCLKFreq>
 8005034:	4601      	mov	r1, r0
 8005036:	4b06      	ldr	r3, [pc, #24]	; (8005050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	0a1b      	lsrs	r3, r3, #8
 800503c:	f003 0307 	and.w	r3, r3, #7
 8005040:	4a04      	ldr	r2, [pc, #16]	; (8005054 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005042:	5cd3      	ldrb	r3, [r2, r3]
 8005044:	f003 031f 	and.w	r3, r3, #31
 8005048:	fa21 f303 	lsr.w	r3, r1, r3
}
 800504c:	4618      	mov	r0, r3
 800504e:	bd80      	pop	{r7, pc}
 8005050:	40021000 	.word	0x40021000
 8005054:	080072c8 	.word	0x080072c8

08005058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800505c:	f7ff ffda 	bl	8005014 <HAL_RCC_GetHCLKFreq>
 8005060:	4601      	mov	r1, r0
 8005062:	4b06      	ldr	r3, [pc, #24]	; (800507c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	0adb      	lsrs	r3, r3, #11
 8005068:	f003 0307 	and.w	r3, r3, #7
 800506c:	4a04      	ldr	r2, [pc, #16]	; (8005080 <HAL_RCC_GetPCLK2Freq+0x28>)
 800506e:	5cd3      	ldrb	r3, [r2, r3]
 8005070:	f003 031f 	and.w	r3, r3, #31
 8005074:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005078:	4618      	mov	r0, r3
 800507a:	bd80      	pop	{r7, pc}
 800507c:	40021000 	.word	0x40021000
 8005080:	080072c8 	.word	0x080072c8

08005084 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800508c:	2300      	movs	r3, #0
 800508e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005090:	4b27      	ldr	r3, [pc, #156]	; (8005130 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d003      	beq.n	80050a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800509c:	f7ff f91a 	bl	80042d4 <HAL_PWREx_GetVoltageRange>
 80050a0:	6178      	str	r0, [r7, #20]
 80050a2:	e014      	b.n	80050ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80050a4:	4b22      	ldr	r3, [pc, #136]	; (8005130 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80050a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a8:	4a21      	ldr	r2, [pc, #132]	; (8005130 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80050aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ae:	6593      	str	r3, [r2, #88]	; 0x58
 80050b0:	4b1f      	ldr	r3, [pc, #124]	; (8005130 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80050b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050b8:	60fb      	str	r3, [r7, #12]
 80050ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80050bc:	f7ff f90a 	bl	80042d4 <HAL_PWREx_GetVoltageRange>
 80050c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80050c2:	4b1b      	ldr	r3, [pc, #108]	; (8005130 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80050c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c6:	4a1a      	ldr	r2, [pc, #104]	; (8005130 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80050c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050d4:	d10b      	bne.n	80050ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2b80      	cmp	r3, #128	; 0x80
 80050da:	d913      	bls.n	8005104 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2ba0      	cmp	r3, #160	; 0xa0
 80050e0:	d902      	bls.n	80050e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050e2:	2302      	movs	r3, #2
 80050e4:	613b      	str	r3, [r7, #16]
 80050e6:	e00d      	b.n	8005104 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050e8:	2301      	movs	r3, #1
 80050ea:	613b      	str	r3, [r7, #16]
 80050ec:	e00a      	b.n	8005104 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b7f      	cmp	r3, #127	; 0x7f
 80050f2:	d902      	bls.n	80050fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80050f4:	2302      	movs	r3, #2
 80050f6:	613b      	str	r3, [r7, #16]
 80050f8:	e004      	b.n	8005104 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b70      	cmp	r3, #112	; 0x70
 80050fe:	d101      	bne.n	8005104 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005100:	2301      	movs	r3, #1
 8005102:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005104:	4b0b      	ldr	r3, [pc, #44]	; (8005134 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f023 020f 	bic.w	r2, r3, #15
 800510c:	4909      	ldr	r1, [pc, #36]	; (8005134 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	4313      	orrs	r3, r2
 8005112:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005114:	4b07      	ldr	r3, [pc, #28]	; (8005134 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 030f 	and.w	r3, r3, #15
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	429a      	cmp	r2, r3
 8005120:	d001      	beq.n	8005126 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e000      	b.n	8005128 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3718      	adds	r7, #24
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	40021000 	.word	0x40021000
 8005134:	40022000 	.word	0x40022000

08005138 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005138:	b480      	push	{r7}
 800513a:	b087      	sub	sp, #28
 800513c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800513e:	2300      	movs	r3, #0
 8005140:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8005142:	4b2d      	ldr	r3, [pc, #180]	; (80051f8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f003 0303 	and.w	r3, r3, #3
 800514a:	2b01      	cmp	r3, #1
 800514c:	d118      	bne.n	8005180 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800514e:	4b2a      	ldr	r3, [pc, #168]	; (80051f8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0308 	and.w	r3, r3, #8
 8005156:	2b00      	cmp	r3, #0
 8005158:	d107      	bne.n	800516a <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800515a:	4b27      	ldr	r3, [pc, #156]	; (80051f8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800515c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005160:	0a1b      	lsrs	r3, r3, #8
 8005162:	f003 030f 	and.w	r3, r3, #15
 8005166:	617b      	str	r3, [r7, #20]
 8005168:	e005      	b.n	8005176 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800516a:	4b23      	ldr	r3, [pc, #140]	; (80051f8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	091b      	lsrs	r3, r3, #4
 8005170:	f003 030f 	and.w	r3, r3, #15
 8005174:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005176:	4a21      	ldr	r2, [pc, #132]	; (80051fc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800517e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005180:	4b1d      	ldr	r3, [pc, #116]	; (80051f8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	f003 0303 	and.w	r3, r3, #3
 8005188:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2b02      	cmp	r3, #2
 800518e:	d002      	beq.n	8005196 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8005190:	2b03      	cmp	r3, #3
 8005192:	d003      	beq.n	800519c <RCC_GetSysClockFreqFromPLLSource+0x64>
 8005194:	e005      	b.n	80051a2 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005196:	4b1a      	ldr	r3, [pc, #104]	; (8005200 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005198:	613b      	str	r3, [r7, #16]
    break;
 800519a:	e005      	b.n	80051a8 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800519c:	4b19      	ldr	r3, [pc, #100]	; (8005204 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800519e:	613b      	str	r3, [r7, #16]
    break;
 80051a0:	e002      	b.n	80051a8 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	613b      	str	r3, [r7, #16]
    break;
 80051a6:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051a8:	4b13      	ldr	r3, [pc, #76]	; (80051f8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	091b      	lsrs	r3, r3, #4
 80051ae:	f003 030f 	and.w	r3, r3, #15
 80051b2:	3301      	adds	r3, #1
 80051b4:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80051b6:	4b10      	ldr	r3, [pc, #64]	; (80051f8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	0a1b      	lsrs	r3, r3, #8
 80051bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	fb02 f203 	mul.w	r2, r2, r3
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051cc:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051ce:	4b0a      	ldr	r3, [pc, #40]	; (80051f8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	0e5b      	lsrs	r3, r3, #25
 80051d4:	f003 0303 	and.w	r3, r3, #3
 80051d8:	3301      	adds	r3, #1
 80051da:	005b      	lsls	r3, r3, #1
 80051dc:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e6:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80051e8:	683b      	ldr	r3, [r7, #0]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	371c      	adds	r7, #28
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	40021000 	.word	0x40021000
 80051fc:	080072d0 	.word	0x080072d0
 8005200:	00f42400 	.word	0x00f42400
 8005204:	007a1200 	.word	0x007a1200

08005208 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005210:	2300      	movs	r3, #0
 8005212:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005214:	2300      	movs	r3, #0
 8005216:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005220:	2b00      	cmp	r3, #0
 8005222:	d03d      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005228:	2b40      	cmp	r3, #64	; 0x40
 800522a:	d00b      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800522c:	2b40      	cmp	r3, #64	; 0x40
 800522e:	d804      	bhi.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00e      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8005234:	2b20      	cmp	r3, #32
 8005236:	d015      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005238:	e01d      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800523a:	2b60      	cmp	r3, #96	; 0x60
 800523c:	d01e      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x74>
 800523e:	2b80      	cmp	r3, #128	; 0x80
 8005240:	d01c      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005242:	e018      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005244:	4b86      	ldr	r3, [pc, #536]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	4a85      	ldr	r2, [pc, #532]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800524a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800524e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005250:	e015      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	3304      	adds	r3, #4
 8005256:	2100      	movs	r1, #0
 8005258:	4618      	mov	r0, r3
 800525a:	f000 fb0d 	bl	8005878 <RCCEx_PLLSAI1_Config>
 800525e:	4603      	mov	r3, r0
 8005260:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005262:	e00c      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	3320      	adds	r3, #32
 8005268:	2100      	movs	r1, #0
 800526a:	4618      	mov	r0, r3
 800526c:	f000 fbf4 	bl	8005a58 <RCCEx_PLLSAI2_Config>
 8005270:	4603      	mov	r3, r0
 8005272:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005274:	e003      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	74fb      	strb	r3, [r7, #19]
      break;
 800527a:	e000      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 800527c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800527e:	7cfb      	ldrb	r3, [r7, #19]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10b      	bne.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005284:	4b76      	ldr	r3, [pc, #472]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005286:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800528a:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005292:	4973      	ldr	r1, [pc, #460]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005294:	4313      	orrs	r3, r2
 8005296:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800529a:	e001      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800529c:	7cfb      	ldrb	r3, [r7, #19]
 800529e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d042      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052b4:	d00f      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0xce>
 80052b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052ba:	d805      	bhi.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d011      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80052c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052c4:	d017      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0xee>
 80052c6:	e01f      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x100>
 80052c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052cc:	d01f      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80052ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052d2:	d01c      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80052d4:	e018      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80052d6:	4b62      	ldr	r3, [pc, #392]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	4a61      	ldr	r2, [pc, #388]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052e0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80052e2:	e015      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	3304      	adds	r3, #4
 80052e8:	2100      	movs	r1, #0
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 fac4 	bl	8005878 <RCCEx_PLLSAI1_Config>
 80052f0:	4603      	mov	r3, r0
 80052f2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80052f4:	e00c      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	3320      	adds	r3, #32
 80052fa:	2100      	movs	r1, #0
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 fbab 	bl	8005a58 <RCCEx_PLLSAI2_Config>
 8005302:	4603      	mov	r3, r0
 8005304:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005306:	e003      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	74fb      	strb	r3, [r7, #19]
      break;
 800530c:	e000      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 800530e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005310:	7cfb      	ldrb	r3, [r7, #19]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10b      	bne.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005316:	4b52      	ldr	r3, [pc, #328]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005318:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800531c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005324:	494e      	ldr	r1, [pc, #312]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005326:	4313      	orrs	r3, r2
 8005328:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800532c:	e001      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800532e:	7cfb      	ldrb	r3, [r7, #19]
 8005330:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800533a:	2b00      	cmp	r3, #0
 800533c:	f000 809f 	beq.w	800547e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005340:	2300      	movs	r3, #0
 8005342:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005344:	4b46      	ldr	r3, [pc, #280]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005350:	2301      	movs	r3, #1
 8005352:	e000      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005354:	2300      	movs	r3, #0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00d      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800535a:	4b41      	ldr	r3, [pc, #260]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800535c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800535e:	4a40      	ldr	r2, [pc, #256]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005364:	6593      	str	r3, [r2, #88]	; 0x58
 8005366:	4b3e      	ldr	r3, [pc, #248]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800536a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800536e:	60bb      	str	r3, [r7, #8]
 8005370:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005372:	2301      	movs	r3, #1
 8005374:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005376:	4b3b      	ldr	r3, [pc, #236]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a3a      	ldr	r2, [pc, #232]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800537c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005380:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005382:	f7fc fcf1 	bl	8001d68 <HAL_GetTick>
 8005386:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005388:	e009      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800538a:	f7fc fced 	bl	8001d68 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	2b02      	cmp	r3, #2
 8005396:	d902      	bls.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	74fb      	strb	r3, [r7, #19]
        break;
 800539c:	e005      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800539e:	4b31      	ldr	r3, [pc, #196]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d0ef      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 80053aa:	7cfb      	ldrb	r3, [r7, #19]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d15b      	bne.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80053b0:	4b2b      	ldr	r3, [pc, #172]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053ba:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d01f      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d019      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80053ce:	4b24      	ldr	r3, [pc, #144]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053d8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053da:	4b21      	ldr	r3, [pc, #132]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e0:	4a1f      	ldr	r2, [pc, #124]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053ea:	4b1d      	ldr	r3, [pc, #116]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f0:	4a1b      	ldr	r2, [pc, #108]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053fa:	4a19      	ldr	r2, [pc, #100]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	2b00      	cmp	r3, #0
 800540a:	d016      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800540c:	f7fc fcac 	bl	8001d68 <HAL_GetTick>
 8005410:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005412:	e00b      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005414:	f7fc fca8 	bl	8001d68 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005422:	4293      	cmp	r3, r2
 8005424:	d902      	bls.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	74fb      	strb	r3, [r7, #19]
            break;
 800542a:	e006      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800542c:	4b0c      	ldr	r3, [pc, #48]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800542e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d0ec      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 800543a:	7cfb      	ldrb	r3, [r7, #19]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10c      	bne.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005440:	4b07      	ldr	r3, [pc, #28]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005446:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005450:	4903      	ldr	r1, [pc, #12]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005452:	4313      	orrs	r3, r2
 8005454:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005458:	e008      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800545a:	7cfb      	ldrb	r3, [r7, #19]
 800545c:	74bb      	strb	r3, [r7, #18]
 800545e:	e005      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x264>
 8005460:	40021000 	.word	0x40021000
 8005464:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005468:	7cfb      	ldrb	r3, [r7, #19]
 800546a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800546c:	7c7b      	ldrb	r3, [r7, #17]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d105      	bne.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005472:	4ba0      	ldr	r3, [pc, #640]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005476:	4a9f      	ldr	r2, [pc, #636]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005478:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800547c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00a      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800548a:	4b9a      	ldr	r3, [pc, #616]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800548c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005490:	f023 0203 	bic.w	r2, r3, #3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005498:	4996      	ldr	r1, [pc, #600]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800549a:	4313      	orrs	r3, r2
 800549c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00a      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054ac:	4b91      	ldr	r3, [pc, #580]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b2:	f023 020c 	bic.w	r2, r3, #12
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ba:	498e      	ldr	r1, [pc, #568]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0304 	and.w	r3, r3, #4
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00a      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054ce:	4b89      	ldr	r3, [pc, #548]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054dc:	4985      	ldr	r1, [pc, #532]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0308 	and.w	r3, r3, #8
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00a      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054f0:	4b80      	ldr	r3, [pc, #512]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054fe:	497d      	ldr	r1, [pc, #500]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005500:	4313      	orrs	r3, r2
 8005502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0310 	and.w	r3, r3, #16
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00a      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005512:	4b78      	ldr	r3, [pc, #480]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005518:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005520:	4974      	ldr	r1, [pc, #464]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005522:	4313      	orrs	r3, r2
 8005524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0320 	and.w	r3, r3, #32
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00a      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005534:	4b6f      	ldr	r3, [pc, #444]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800553a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005542:	496c      	ldr	r1, [pc, #432]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005544:	4313      	orrs	r3, r2
 8005546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00a      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005556:	4b67      	ldr	r3, [pc, #412]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800555c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005564:	4963      	ldr	r1, [pc, #396]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005566:	4313      	orrs	r3, r2
 8005568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00a      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005578:	4b5e      	ldr	r3, [pc, #376]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800557a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005586:	495b      	ldr	r1, [pc, #364]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005588:	4313      	orrs	r3, r2
 800558a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00a      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800559a:	4b56      	ldr	r3, [pc, #344]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800559c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a8:	4952      	ldr	r1, [pc, #328]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00a      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80055bc:	4b4d      	ldr	r3, [pc, #308]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ca:	494a      	ldr	r1, [pc, #296]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00a      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055de:	4b45      	ldr	r3, [pc, #276]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ec:	4941      	ldr	r1, [pc, #260]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00a      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005600:	4b3c      	ldr	r3, [pc, #240]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005602:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005606:	f023 0203 	bic.w	r2, r3, #3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800560e:	4939      	ldr	r1, [pc, #228]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005610:	4313      	orrs	r3, r2
 8005612:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d028      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005622:	4b34      	ldr	r3, [pc, #208]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005628:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005630:	4930      	ldr	r1, [pc, #192]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005632:	4313      	orrs	r3, r2
 8005634:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800563c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005640:	d106      	bne.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005642:	4b2c      	ldr	r3, [pc, #176]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	4a2b      	ldr	r2, [pc, #172]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800564c:	60d3      	str	r3, [r2, #12]
 800564e:	e011      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005654:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005658:	d10c      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	3304      	adds	r3, #4
 800565e:	2101      	movs	r1, #1
 8005660:	4618      	mov	r0, r3
 8005662:	f000 f909 	bl	8005878 <RCCEx_PLLSAI1_Config>
 8005666:	4603      	mov	r3, r0
 8005668:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800566a:	7cfb      	ldrb	r3, [r7, #19]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d001      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8005670:	7cfb      	ldrb	r3, [r7, #19]
 8005672:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d04d      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005684:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005688:	d108      	bne.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x494>
 800568a:	4b1a      	ldr	r3, [pc, #104]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800568c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005690:	4a18      	ldr	r2, [pc, #96]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005696:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800569a:	e012      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800569c:	4b15      	ldr	r3, [pc, #84]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800569e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056a2:	4a14      	ldr	r2, [pc, #80]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056a8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80056ac:	4b11      	ldr	r3, [pc, #68]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056ba:	490e      	ldr	r1, [pc, #56]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056ca:	d106      	bne.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056cc:	4b09      	ldr	r3, [pc, #36]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	4a08      	ldr	r2, [pc, #32]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056d6:	60d3      	str	r3, [r2, #12]
 80056d8:	e020      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056e2:	d109      	bne.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80056e4:	4b03      	ldr	r3, [pc, #12]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	4a02      	ldr	r2, [pc, #8]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056ee:	60d3      	str	r3, [r2, #12]
 80056f0:	e014      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80056f2:	bf00      	nop
 80056f4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005700:	d10c      	bne.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	3304      	adds	r3, #4
 8005706:	2101      	movs	r1, #1
 8005708:	4618      	mov	r0, r3
 800570a:	f000 f8b5 	bl	8005878 <RCCEx_PLLSAI1_Config>
 800570e:	4603      	mov	r3, r0
 8005710:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005712:	7cfb      	ldrb	r3, [r7, #19]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d001      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005718:	7cfb      	ldrb	r3, [r7, #19]
 800571a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d028      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005728:	4b4a      	ldr	r3, [pc, #296]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800572a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800572e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005736:	4947      	ldr	r1, [pc, #284]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005738:	4313      	orrs	r3, r2
 800573a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005742:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005746:	d106      	bne.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005748:	4b42      	ldr	r3, [pc, #264]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	4a41      	ldr	r2, [pc, #260]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800574e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005752:	60d3      	str	r3, [r2, #12]
 8005754:	e011      	b.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800575a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800575e:	d10c      	bne.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	3304      	adds	r3, #4
 8005764:	2101      	movs	r1, #1
 8005766:	4618      	mov	r0, r3
 8005768:	f000 f886 	bl	8005878 <RCCEx_PLLSAI1_Config>
 800576c:	4603      	mov	r3, r0
 800576e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005770:	7cfb      	ldrb	r3, [r7, #19]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d001      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8005776:	7cfb      	ldrb	r3, [r7, #19]
 8005778:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d01e      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005786:	4b33      	ldr	r3, [pc, #204]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800578c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005796:	492f      	ldr	r1, [pc, #188]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005798:	4313      	orrs	r3, r2
 800579a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057a8:	d10c      	bne.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	3304      	adds	r3, #4
 80057ae:	2102      	movs	r1, #2
 80057b0:	4618      	mov	r0, r3
 80057b2:	f000 f861 	bl	8005878 <RCCEx_PLLSAI1_Config>
 80057b6:	4603      	mov	r3, r0
 80057b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057ba:	7cfb      	ldrb	r3, [r7, #19]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d001      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 80057c0:	7cfb      	ldrb	r3, [r7, #19]
 80057c2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00b      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80057d0:	4b20      	ldr	r3, [pc, #128]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80057d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057d6:	f023 0204 	bic.w	r2, r3, #4
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057e0:	491c      	ldr	r1, [pc, #112]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00b      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80057f4:	4b17      	ldr	r3, [pc, #92]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80057f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057fa:	f023 0218 	bic.w	r2, r3, #24
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005804:	4913      	ldr	r1, [pc, #76]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005806:	4313      	orrs	r3, r2
 8005808:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d017      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005818:	4b0e      	ldr	r3, [pc, #56]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800581a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800581e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005828:	490a      	ldr	r1, [pc, #40]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800582a:	4313      	orrs	r3, r2
 800582c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005836:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800583a:	d105      	bne.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800583c:	4b05      	ldr	r3, [pc, #20]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	4a04      	ldr	r2, [pc, #16]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005842:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005846:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005848:	7cbb      	ldrb	r3, [r7, #18]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3718      	adds	r7, #24
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	40021000 	.word	0x40021000

08005858 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005858:	b480      	push	{r7}
 800585a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800585c:	4b05      	ldr	r3, [pc, #20]	; (8005874 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a04      	ldr	r2, [pc, #16]	; (8005874 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005862:	f043 0304 	orr.w	r3, r3, #4
 8005866:	6013      	str	r3, [r2, #0]
}
 8005868:	bf00      	nop
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	40021000 	.word	0x40021000

08005878 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005882:	2300      	movs	r3, #0
 8005884:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005886:	4b70      	ldr	r3, [pc, #448]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	f003 0303 	and.w	r3, r3, #3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00e      	beq.n	80058b0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005892:	4b6d      	ldr	r3, [pc, #436]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	f003 0203 	and.w	r2, r3, #3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d103      	bne.n	80058aa <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
       ||
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d13f      	bne.n	800592a <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	73fb      	strb	r3, [r7, #15]
 80058ae:	e03c      	b.n	800592a <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d00c      	beq.n	80058d2 <RCCEx_PLLSAI1_Config+0x5a>
 80058b8:	2b03      	cmp	r3, #3
 80058ba:	d013      	beq.n	80058e4 <RCCEx_PLLSAI1_Config+0x6c>
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d120      	bne.n	8005902 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058c0:	4b61      	ldr	r3, [pc, #388]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1d0>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d11d      	bne.n	8005908 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058d0:	e01a      	b.n	8005908 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80058d2:	4b5d      	ldr	r3, [pc, #372]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1d0>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d116      	bne.n	800590c <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058e2:	e013      	b.n	800590c <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80058e4:	4b58      	ldr	r3, [pc, #352]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1d0>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10f      	bne.n	8005910 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80058f0:	4b55      	ldr	r3, [pc, #340]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1d0>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d109      	bne.n	8005910 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005900:	e006      	b.n	8005910 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	73fb      	strb	r3, [r7, #15]
      break;
 8005906:	e004      	b.n	8005912 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8005908:	bf00      	nop
 800590a:	e002      	b.n	8005912 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 800590c:	bf00      	nop
 800590e:	e000      	b.n	8005912 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8005910:	bf00      	nop
    }

    if(status == HAL_OK)
 8005912:	7bfb      	ldrb	r3, [r7, #15]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d108      	bne.n	800592a <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005918:	4b4b      	ldr	r3, [pc, #300]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1d0>)
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	f023 0203 	bic.w	r2, r3, #3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4948      	ldr	r1, [pc, #288]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005926:	4313      	orrs	r3, r2
 8005928:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800592a:	7bfb      	ldrb	r3, [r7, #15]
 800592c:	2b00      	cmp	r3, #0
 800592e:	f040 8086 	bne.w	8005a3e <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005932:	4b45      	ldr	r3, [pc, #276]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a44      	ldr	r2, [pc, #272]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005938:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800593c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800593e:	f7fc fa13 	bl	8001d68 <HAL_GetTick>
 8005942:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005944:	e009      	b.n	800595a <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005946:	f7fc fa0f 	bl	8001d68 <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	2b02      	cmp	r3, #2
 8005952:	d902      	bls.n	800595a <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	73fb      	strb	r3, [r7, #15]
        break;
 8005958:	e005      	b.n	8005966 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800595a:	4b3b      	ldr	r3, [pc, #236]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1d0>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1ef      	bne.n	8005946 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8005966:	7bfb      	ldrb	r3, [r7, #15]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d168      	bne.n	8005a3e <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d113      	bne.n	800599a <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005972:	4b35      	ldr	r3, [pc, #212]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005974:	691a      	ldr	r2, [r3, #16]
 8005976:	4b35      	ldr	r3, [pc, #212]	; (8005a4c <RCCEx_PLLSAI1_Config+0x1d4>)
 8005978:	4013      	ands	r3, r2
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	6892      	ldr	r2, [r2, #8]
 800597e:	0211      	lsls	r1, r2, #8
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	68d2      	ldr	r2, [r2, #12]
 8005984:	06d2      	lsls	r2, r2, #27
 8005986:	4311      	orrs	r1, r2
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	6852      	ldr	r2, [r2, #4]
 800598c:	3a01      	subs	r2, #1
 800598e:	0112      	lsls	r2, r2, #4
 8005990:	430a      	orrs	r2, r1
 8005992:	492d      	ldr	r1, [pc, #180]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005994:	4313      	orrs	r3, r2
 8005996:	610b      	str	r3, [r1, #16]
 8005998:	e02d      	b.n	80059f6 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d115      	bne.n	80059cc <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059a0:	4b29      	ldr	r3, [pc, #164]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1d0>)
 80059a2:	691a      	ldr	r2, [r3, #16]
 80059a4:	4b2a      	ldr	r3, [pc, #168]	; (8005a50 <RCCEx_PLLSAI1_Config+0x1d8>)
 80059a6:	4013      	ands	r3, r2
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	6892      	ldr	r2, [r2, #8]
 80059ac:	0211      	lsls	r1, r2, #8
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	6912      	ldr	r2, [r2, #16]
 80059b2:	0852      	lsrs	r2, r2, #1
 80059b4:	3a01      	subs	r2, #1
 80059b6:	0552      	lsls	r2, r2, #21
 80059b8:	4311      	orrs	r1, r2
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	6852      	ldr	r2, [r2, #4]
 80059be:	3a01      	subs	r2, #1
 80059c0:	0112      	lsls	r2, r2, #4
 80059c2:	430a      	orrs	r2, r1
 80059c4:	4920      	ldr	r1, [pc, #128]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1d0>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	610b      	str	r3, [r1, #16]
 80059ca:	e014      	b.n	80059f6 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059cc:	4b1e      	ldr	r3, [pc, #120]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1d0>)
 80059ce:	691a      	ldr	r2, [r3, #16]
 80059d0:	4b20      	ldr	r3, [pc, #128]	; (8005a54 <RCCEx_PLLSAI1_Config+0x1dc>)
 80059d2:	4013      	ands	r3, r2
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	6892      	ldr	r2, [r2, #8]
 80059d8:	0211      	lsls	r1, r2, #8
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	6952      	ldr	r2, [r2, #20]
 80059de:	0852      	lsrs	r2, r2, #1
 80059e0:	3a01      	subs	r2, #1
 80059e2:	0652      	lsls	r2, r2, #25
 80059e4:	4311      	orrs	r1, r2
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	6852      	ldr	r2, [r2, #4]
 80059ea:	3a01      	subs	r2, #1
 80059ec:	0112      	lsls	r2, r2, #4
 80059ee:	430a      	orrs	r2, r1
 80059f0:	4915      	ldr	r1, [pc, #84]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1d0>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80059f6:	4b14      	ldr	r3, [pc, #80]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1d0>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a13      	ldr	r2, [pc, #76]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1d0>)
 80059fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a00:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a02:	f7fc f9b1 	bl	8001d68 <HAL_GetTick>
 8005a06:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a08:	e009      	b.n	8005a1e <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a0a:	f7fc f9ad 	bl	8001d68 <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d902      	bls.n	8005a1e <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	73fb      	strb	r3, [r7, #15]
          break;
 8005a1c:	e005      	b.n	8005a2a <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a1e:	4b0a      	ldr	r3, [pc, #40]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d0ef      	beq.n	8005a0a <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8005a2a:	7bfb      	ldrb	r3, [r7, #15]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d106      	bne.n	8005a3e <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005a30:	4b05      	ldr	r3, [pc, #20]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005a32:	691a      	ldr	r2, [r3, #16]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	4903      	ldr	r1, [pc, #12]	; (8005a48 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	40021000 	.word	0x40021000
 8005a4c:	07ff800f 	.word	0x07ff800f
 8005a50:	ff9f800f 	.word	0xff9f800f
 8005a54:	f9ff800f 	.word	0xf9ff800f

08005a58 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a62:	2300      	movs	r3, #0
 8005a64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a66:	4b70      	ldr	r3, [pc, #448]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	f003 0303 	and.w	r3, r3, #3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00e      	beq.n	8005a90 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005a72:	4b6d      	ldr	r3, [pc, #436]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	f003 0203 	and.w	r2, r3, #3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d103      	bne.n	8005a8a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
       ||
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d13f      	bne.n	8005b0a <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	73fb      	strb	r3, [r7, #15]
 8005a8e:	e03c      	b.n	8005b0a <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d00c      	beq.n	8005ab2 <RCCEx_PLLSAI2_Config+0x5a>
 8005a98:	2b03      	cmp	r3, #3
 8005a9a:	d013      	beq.n	8005ac4 <RCCEx_PLLSAI2_Config+0x6c>
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d120      	bne.n	8005ae2 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005aa0:	4b61      	ldr	r3, [pc, #388]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0302 	and.w	r3, r3, #2
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d11d      	bne.n	8005ae8 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ab0:	e01a      	b.n	8005ae8 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ab2:	4b5d      	ldr	r3, [pc, #372]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d116      	bne.n	8005aec <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ac2:	e013      	b.n	8005aec <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005ac4:	4b58      	ldr	r3, [pc, #352]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d10f      	bne.n	8005af0 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005ad0:	4b55      	ldr	r3, [pc, #340]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d109      	bne.n	8005af0 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005ae0:	e006      	b.n	8005af0 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	73fb      	strb	r3, [r7, #15]
      break;
 8005ae6:	e004      	b.n	8005af2 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8005ae8:	bf00      	nop
 8005aea:	e002      	b.n	8005af2 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8005aec:	bf00      	nop
 8005aee:	e000      	b.n	8005af2 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8005af0:	bf00      	nop
    }

    if(status == HAL_OK)
 8005af2:	7bfb      	ldrb	r3, [r7, #15]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d108      	bne.n	8005b0a <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005af8:	4b4b      	ldr	r3, [pc, #300]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	f023 0203 	bic.w	r2, r3, #3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4948      	ldr	r1, [pc, #288]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005b0a:	7bfb      	ldrb	r3, [r7, #15]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f040 8086 	bne.w	8005c1e <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005b12:	4b45      	ldr	r3, [pc, #276]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a44      	ldr	r2, [pc, #272]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005b18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b1e:	f7fc f923 	bl	8001d68 <HAL_GetTick>
 8005b22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b24:	e009      	b.n	8005b3a <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b26:	f7fc f91f 	bl	8001d68 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d902      	bls.n	8005b3a <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	73fb      	strb	r3, [r7, #15]
        break;
 8005b38:	e005      	b.n	8005b46 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b3a:	4b3b      	ldr	r3, [pc, #236]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1ef      	bne.n	8005b26 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8005b46:	7bfb      	ldrb	r3, [r7, #15]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d168      	bne.n	8005c1e <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d113      	bne.n	8005b7a <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b52:	4b35      	ldr	r3, [pc, #212]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005b54:	695a      	ldr	r2, [r3, #20]
 8005b56:	4b35      	ldr	r3, [pc, #212]	; (8005c2c <RCCEx_PLLSAI2_Config+0x1d4>)
 8005b58:	4013      	ands	r3, r2
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	6892      	ldr	r2, [r2, #8]
 8005b5e:	0211      	lsls	r1, r2, #8
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	68d2      	ldr	r2, [r2, #12]
 8005b64:	06d2      	lsls	r2, r2, #27
 8005b66:	4311      	orrs	r1, r2
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	6852      	ldr	r2, [r2, #4]
 8005b6c:	3a01      	subs	r2, #1
 8005b6e:	0112      	lsls	r2, r2, #4
 8005b70:	430a      	orrs	r2, r1
 8005b72:	492d      	ldr	r1, [pc, #180]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	614b      	str	r3, [r1, #20]
 8005b78:	e02d      	b.n	8005bd6 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d115      	bne.n	8005bac <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b80:	4b29      	ldr	r3, [pc, #164]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005b82:	695a      	ldr	r2, [r3, #20]
 8005b84:	4b2a      	ldr	r3, [pc, #168]	; (8005c30 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b86:	4013      	ands	r3, r2
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	6892      	ldr	r2, [r2, #8]
 8005b8c:	0211      	lsls	r1, r2, #8
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	6912      	ldr	r2, [r2, #16]
 8005b92:	0852      	lsrs	r2, r2, #1
 8005b94:	3a01      	subs	r2, #1
 8005b96:	0552      	lsls	r2, r2, #21
 8005b98:	4311      	orrs	r1, r2
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	6852      	ldr	r2, [r2, #4]
 8005b9e:	3a01      	subs	r2, #1
 8005ba0:	0112      	lsls	r2, r2, #4
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	4920      	ldr	r1, [pc, #128]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	614b      	str	r3, [r1, #20]
 8005baa:	e014      	b.n	8005bd6 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005bac:	4b1e      	ldr	r3, [pc, #120]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005bae:	695a      	ldr	r2, [r3, #20]
 8005bb0:	4b20      	ldr	r3, [pc, #128]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	6892      	ldr	r2, [r2, #8]
 8005bb8:	0211      	lsls	r1, r2, #8
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	6952      	ldr	r2, [r2, #20]
 8005bbe:	0852      	lsrs	r2, r2, #1
 8005bc0:	3a01      	subs	r2, #1
 8005bc2:	0652      	lsls	r2, r2, #25
 8005bc4:	4311      	orrs	r1, r2
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	6852      	ldr	r2, [r2, #4]
 8005bca:	3a01      	subs	r2, #1
 8005bcc:	0112      	lsls	r2, r2, #4
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	4915      	ldr	r1, [pc, #84]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005bd6:	4b14      	ldr	r3, [pc, #80]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a13      	ldr	r2, [pc, #76]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005be0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005be2:	f7fc f8c1 	bl	8001d68 <HAL_GetTick>
 8005be6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005be8:	e009      	b.n	8005bfe <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005bea:	f7fc f8bd 	bl	8001d68 <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d902      	bls.n	8005bfe <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	73fb      	strb	r3, [r7, #15]
          break;
 8005bfc:	e005      	b.n	8005c0a <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005bfe:	4b0a      	ldr	r3, [pc, #40]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d0ef      	beq.n	8005bea <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8005c0a:	7bfb      	ldrb	r3, [r7, #15]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d106      	bne.n	8005c1e <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005c10:	4b05      	ldr	r3, [pc, #20]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005c12:	695a      	ldr	r2, [r3, #20]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	4903      	ldr	r1, [pc, #12]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	40021000 	.word	0x40021000
 8005c2c:	07ff800f 	.word	0x07ff800f
 8005c30:	ff9f800f 	.word	0xff9f800f
 8005c34:	f9ff800f 	.word	0xf9ff800f

08005c38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d101      	bne.n	8005c4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e095      	b.n	8005d76 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d108      	bne.n	8005c64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c5a:	d009      	beq.n	8005c70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	61da      	str	r2, [r3, #28]
 8005c62:	e005      	b.n	8005c70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d106      	bne.n	8005c90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7fb fdc8 	bl	8001820 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ca6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cb0:	d902      	bls.n	8005cb8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	60fb      	str	r3, [r7, #12]
 8005cb6:	e002      	b.n	8005cbe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005cb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cbc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005cc6:	d007      	beq.n	8005cd8 <HAL_SPI_Init+0xa0>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cd0:	d002      	beq.n	8005cd8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	695b      	ldr	r3, [r3, #20]
 8005cf8:	f003 0301 	and.w	r3, r3, #1
 8005cfc:	431a      	orrs	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d06:	431a      	orrs	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	69db      	ldr	r3, [r3, #28]
 8005d0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d10:	431a      	orrs	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d1a:	ea42 0103 	orr.w	r1, r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d22:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	0c1b      	lsrs	r3, r3, #16
 8005d34:	f003 0204 	and.w	r2, r3, #4
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3c:	f003 0310 	and.w	r3, r3, #16
 8005d40:	431a      	orrs	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d46:	f003 0308 	and.w	r3, r3, #8
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005d54:	ea42 0103 	orr.w	r1, r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b082      	sub	sp, #8
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d101      	bne.n	8005d90 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e042      	b.n	8005e16 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d106      	bne.n	8005da8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f7fb fdb2 	bl	800190c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2224      	movs	r2, #36	; 0x24
 8005dac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 0201 	bic.w	r2, r2, #1
 8005dbe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 f8c3 	bl	8005f4c <UART_SetConfig>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d101      	bne.n	8005dd0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e022      	b.n	8005e16 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d002      	beq.n	8005dde <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 fb89 	bl	80064f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005dec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	689a      	ldr	r2, [r3, #8]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005dfc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f042 0201 	orr.w	r2, r2, #1
 8005e0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 fc10 	bl	8006634 <UART_CheckIdleState>
 8005e14:	4603      	mov	r3, r0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3708      	adds	r7, #8
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b08a      	sub	sp, #40	; 0x28
 8005e22:	af02      	add	r7, sp, #8
 8005e24:	60f8      	str	r0, [r7, #12]
 8005e26:	60b9      	str	r1, [r7, #8]
 8005e28:	603b      	str	r3, [r7, #0]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e34:	2b20      	cmp	r3, #32
 8005e36:	f040 8084 	bne.w	8005f42 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d002      	beq.n	8005e46 <HAL_UART_Transmit+0x28>
 8005e40:	88fb      	ldrh	r3, [r7, #6]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d101      	bne.n	8005e4a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e07c      	b.n	8005f44 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d101      	bne.n	8005e58 <HAL_UART_Transmit+0x3a>
 8005e54:	2302      	movs	r3, #2
 8005e56:	e075      	b.n	8005f44 <HAL_UART_Transmit+0x126>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2221      	movs	r2, #33	; 0x21
 8005e6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005e70:	f7fb ff7a 	bl	8001d68 <HAL_GetTick>
 8005e74:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	88fa      	ldrh	r2, [r7, #6]
 8005e7a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	88fa      	ldrh	r2, [r7, #6]
 8005e82:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e8e:	d108      	bne.n	8005ea2 <HAL_UART_Transmit+0x84>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d104      	bne.n	8005ea2 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	61bb      	str	r3, [r7, #24]
 8005ea0:	e003      	b.n	8005eaa <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8005eb2:	e02d      	b.n	8005f10 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	9300      	str	r3, [sp, #0]
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	2180      	movs	r1, #128	; 0x80
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f000 fc00 	bl	80066c4 <UART_WaitOnFlagUntilTimeout>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d001      	beq.n	8005ece <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e03a      	b.n	8005f44 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d10b      	bne.n	8005eec <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	881a      	ldrh	r2, [r3, #0]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ee0:	b292      	uxth	r2, r2
 8005ee2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	3302      	adds	r3, #2
 8005ee8:	61bb      	str	r3, [r7, #24]
 8005eea:	e008      	b.n	8005efe <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	781a      	ldrb	r2, [r3, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	b292      	uxth	r2, r2
 8005ef6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	3301      	adds	r3, #1
 8005efc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	3b01      	subs	r3, #1
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1cb      	bne.n	8005eb4 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	2200      	movs	r2, #0
 8005f24:	2140      	movs	r1, #64	; 0x40
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f000 fbcc 	bl	80066c4 <UART_WaitOnFlagUntilTimeout>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d001      	beq.n	8005f36 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e006      	b.n	8005f44 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2220      	movs	r2, #32
 8005f3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	e000      	b.n	8005f44 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005f42:	2302      	movs	r3, #2
  }
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3720      	adds	r7, #32
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f4c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005f50:	b088      	sub	sp, #32
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f56:	2300      	movs	r3, #0
 8005f58:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	689a      	ldr	r2, [r3, #8]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	431a      	orrs	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	431a      	orrs	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	69db      	ldr	r3, [r3, #28]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f76:	69fa      	ldr	r2, [r7, #28]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	4bb1      	ldr	r3, [pc, #708]	; (8006248 <UART_SetConfig+0x2fc>)
 8005f84:	4013      	ands	r3, r2
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	6812      	ldr	r2, [r2, #0]
 8005f8a:	69f9      	ldr	r1, [r7, #28]
 8005f8c:	430b      	orrs	r3, r1
 8005f8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68da      	ldr	r2, [r3, #12]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4aa6      	ldr	r2, [pc, #664]	; (800624c <UART_SetConfig+0x300>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d004      	beq.n	8005fc0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	69fa      	ldr	r2, [r7, #28]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005fca:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	6812      	ldr	r2, [r2, #0]
 8005fd2:	69f9      	ldr	r1, [r7, #28]
 8005fd4:	430b      	orrs	r3, r1
 8005fd6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fde:	f023 010f 	bic.w	r1, r3, #15
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a97      	ldr	r2, [pc, #604]	; (8006250 <UART_SetConfig+0x304>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d121      	bne.n	800603c <UART_SetConfig+0xf0>
 8005ff8:	4b96      	ldr	r3, [pc, #600]	; (8006254 <UART_SetConfig+0x308>)
 8005ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ffe:	f003 0303 	and.w	r3, r3, #3
 8006002:	2b03      	cmp	r3, #3
 8006004:	d816      	bhi.n	8006034 <UART_SetConfig+0xe8>
 8006006:	a201      	add	r2, pc, #4	; (adr r2, 800600c <UART_SetConfig+0xc0>)
 8006008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600c:	0800601d 	.word	0x0800601d
 8006010:	08006029 	.word	0x08006029
 8006014:	08006023 	.word	0x08006023
 8006018:	0800602f 	.word	0x0800602f
 800601c:	2301      	movs	r3, #1
 800601e:	76fb      	strb	r3, [r7, #27]
 8006020:	e0e8      	b.n	80061f4 <UART_SetConfig+0x2a8>
 8006022:	2302      	movs	r3, #2
 8006024:	76fb      	strb	r3, [r7, #27]
 8006026:	e0e5      	b.n	80061f4 <UART_SetConfig+0x2a8>
 8006028:	2304      	movs	r3, #4
 800602a:	76fb      	strb	r3, [r7, #27]
 800602c:	e0e2      	b.n	80061f4 <UART_SetConfig+0x2a8>
 800602e:	2308      	movs	r3, #8
 8006030:	76fb      	strb	r3, [r7, #27]
 8006032:	e0df      	b.n	80061f4 <UART_SetConfig+0x2a8>
 8006034:	2310      	movs	r3, #16
 8006036:	76fb      	strb	r3, [r7, #27]
 8006038:	bf00      	nop
 800603a:	e0db      	b.n	80061f4 <UART_SetConfig+0x2a8>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a85      	ldr	r2, [pc, #532]	; (8006258 <UART_SetConfig+0x30c>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d134      	bne.n	80060b0 <UART_SetConfig+0x164>
 8006046:	4b83      	ldr	r3, [pc, #524]	; (8006254 <UART_SetConfig+0x308>)
 8006048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800604c:	f003 030c 	and.w	r3, r3, #12
 8006050:	2b0c      	cmp	r3, #12
 8006052:	d829      	bhi.n	80060a8 <UART_SetConfig+0x15c>
 8006054:	a201      	add	r2, pc, #4	; (adr r2, 800605c <UART_SetConfig+0x110>)
 8006056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605a:	bf00      	nop
 800605c:	08006091 	.word	0x08006091
 8006060:	080060a9 	.word	0x080060a9
 8006064:	080060a9 	.word	0x080060a9
 8006068:	080060a9 	.word	0x080060a9
 800606c:	0800609d 	.word	0x0800609d
 8006070:	080060a9 	.word	0x080060a9
 8006074:	080060a9 	.word	0x080060a9
 8006078:	080060a9 	.word	0x080060a9
 800607c:	08006097 	.word	0x08006097
 8006080:	080060a9 	.word	0x080060a9
 8006084:	080060a9 	.word	0x080060a9
 8006088:	080060a9 	.word	0x080060a9
 800608c:	080060a3 	.word	0x080060a3
 8006090:	2300      	movs	r3, #0
 8006092:	76fb      	strb	r3, [r7, #27]
 8006094:	e0ae      	b.n	80061f4 <UART_SetConfig+0x2a8>
 8006096:	2302      	movs	r3, #2
 8006098:	76fb      	strb	r3, [r7, #27]
 800609a:	e0ab      	b.n	80061f4 <UART_SetConfig+0x2a8>
 800609c:	2304      	movs	r3, #4
 800609e:	76fb      	strb	r3, [r7, #27]
 80060a0:	e0a8      	b.n	80061f4 <UART_SetConfig+0x2a8>
 80060a2:	2308      	movs	r3, #8
 80060a4:	76fb      	strb	r3, [r7, #27]
 80060a6:	e0a5      	b.n	80061f4 <UART_SetConfig+0x2a8>
 80060a8:	2310      	movs	r3, #16
 80060aa:	76fb      	strb	r3, [r7, #27]
 80060ac:	bf00      	nop
 80060ae:	e0a1      	b.n	80061f4 <UART_SetConfig+0x2a8>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a69      	ldr	r2, [pc, #420]	; (800625c <UART_SetConfig+0x310>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d120      	bne.n	80060fc <UART_SetConfig+0x1b0>
 80060ba:	4b66      	ldr	r3, [pc, #408]	; (8006254 <UART_SetConfig+0x308>)
 80060bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80060c4:	2b10      	cmp	r3, #16
 80060c6:	d00f      	beq.n	80060e8 <UART_SetConfig+0x19c>
 80060c8:	2b10      	cmp	r3, #16
 80060ca:	d802      	bhi.n	80060d2 <UART_SetConfig+0x186>
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d005      	beq.n	80060dc <UART_SetConfig+0x190>
 80060d0:	e010      	b.n	80060f4 <UART_SetConfig+0x1a8>
 80060d2:	2b20      	cmp	r3, #32
 80060d4:	d005      	beq.n	80060e2 <UART_SetConfig+0x196>
 80060d6:	2b30      	cmp	r3, #48	; 0x30
 80060d8:	d009      	beq.n	80060ee <UART_SetConfig+0x1a2>
 80060da:	e00b      	b.n	80060f4 <UART_SetConfig+0x1a8>
 80060dc:	2300      	movs	r3, #0
 80060de:	76fb      	strb	r3, [r7, #27]
 80060e0:	e088      	b.n	80061f4 <UART_SetConfig+0x2a8>
 80060e2:	2302      	movs	r3, #2
 80060e4:	76fb      	strb	r3, [r7, #27]
 80060e6:	e085      	b.n	80061f4 <UART_SetConfig+0x2a8>
 80060e8:	2304      	movs	r3, #4
 80060ea:	76fb      	strb	r3, [r7, #27]
 80060ec:	e082      	b.n	80061f4 <UART_SetConfig+0x2a8>
 80060ee:	2308      	movs	r3, #8
 80060f0:	76fb      	strb	r3, [r7, #27]
 80060f2:	e07f      	b.n	80061f4 <UART_SetConfig+0x2a8>
 80060f4:	2310      	movs	r3, #16
 80060f6:	76fb      	strb	r3, [r7, #27]
 80060f8:	bf00      	nop
 80060fa:	e07b      	b.n	80061f4 <UART_SetConfig+0x2a8>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a57      	ldr	r2, [pc, #348]	; (8006260 <UART_SetConfig+0x314>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d120      	bne.n	8006148 <UART_SetConfig+0x1fc>
 8006106:	4b53      	ldr	r3, [pc, #332]	; (8006254 <UART_SetConfig+0x308>)
 8006108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800610c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006110:	2b40      	cmp	r3, #64	; 0x40
 8006112:	d00f      	beq.n	8006134 <UART_SetConfig+0x1e8>
 8006114:	2b40      	cmp	r3, #64	; 0x40
 8006116:	d802      	bhi.n	800611e <UART_SetConfig+0x1d2>
 8006118:	2b00      	cmp	r3, #0
 800611a:	d005      	beq.n	8006128 <UART_SetConfig+0x1dc>
 800611c:	e010      	b.n	8006140 <UART_SetConfig+0x1f4>
 800611e:	2b80      	cmp	r3, #128	; 0x80
 8006120:	d005      	beq.n	800612e <UART_SetConfig+0x1e2>
 8006122:	2bc0      	cmp	r3, #192	; 0xc0
 8006124:	d009      	beq.n	800613a <UART_SetConfig+0x1ee>
 8006126:	e00b      	b.n	8006140 <UART_SetConfig+0x1f4>
 8006128:	2300      	movs	r3, #0
 800612a:	76fb      	strb	r3, [r7, #27]
 800612c:	e062      	b.n	80061f4 <UART_SetConfig+0x2a8>
 800612e:	2302      	movs	r3, #2
 8006130:	76fb      	strb	r3, [r7, #27]
 8006132:	e05f      	b.n	80061f4 <UART_SetConfig+0x2a8>
 8006134:	2304      	movs	r3, #4
 8006136:	76fb      	strb	r3, [r7, #27]
 8006138:	e05c      	b.n	80061f4 <UART_SetConfig+0x2a8>
 800613a:	2308      	movs	r3, #8
 800613c:	76fb      	strb	r3, [r7, #27]
 800613e:	e059      	b.n	80061f4 <UART_SetConfig+0x2a8>
 8006140:	2310      	movs	r3, #16
 8006142:	76fb      	strb	r3, [r7, #27]
 8006144:	bf00      	nop
 8006146:	e055      	b.n	80061f4 <UART_SetConfig+0x2a8>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a45      	ldr	r2, [pc, #276]	; (8006264 <UART_SetConfig+0x318>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d124      	bne.n	800619c <UART_SetConfig+0x250>
 8006152:	4b40      	ldr	r3, [pc, #256]	; (8006254 <UART_SetConfig+0x308>)
 8006154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006158:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800615c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006160:	d012      	beq.n	8006188 <UART_SetConfig+0x23c>
 8006162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006166:	d802      	bhi.n	800616e <UART_SetConfig+0x222>
 8006168:	2b00      	cmp	r3, #0
 800616a:	d007      	beq.n	800617c <UART_SetConfig+0x230>
 800616c:	e012      	b.n	8006194 <UART_SetConfig+0x248>
 800616e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006172:	d006      	beq.n	8006182 <UART_SetConfig+0x236>
 8006174:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006178:	d009      	beq.n	800618e <UART_SetConfig+0x242>
 800617a:	e00b      	b.n	8006194 <UART_SetConfig+0x248>
 800617c:	2300      	movs	r3, #0
 800617e:	76fb      	strb	r3, [r7, #27]
 8006180:	e038      	b.n	80061f4 <UART_SetConfig+0x2a8>
 8006182:	2302      	movs	r3, #2
 8006184:	76fb      	strb	r3, [r7, #27]
 8006186:	e035      	b.n	80061f4 <UART_SetConfig+0x2a8>
 8006188:	2304      	movs	r3, #4
 800618a:	76fb      	strb	r3, [r7, #27]
 800618c:	e032      	b.n	80061f4 <UART_SetConfig+0x2a8>
 800618e:	2308      	movs	r3, #8
 8006190:	76fb      	strb	r3, [r7, #27]
 8006192:	e02f      	b.n	80061f4 <UART_SetConfig+0x2a8>
 8006194:	2310      	movs	r3, #16
 8006196:	76fb      	strb	r3, [r7, #27]
 8006198:	bf00      	nop
 800619a:	e02b      	b.n	80061f4 <UART_SetConfig+0x2a8>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a2a      	ldr	r2, [pc, #168]	; (800624c <UART_SetConfig+0x300>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d124      	bne.n	80061f0 <UART_SetConfig+0x2a4>
 80061a6:	4b2b      	ldr	r3, [pc, #172]	; (8006254 <UART_SetConfig+0x308>)
 80061a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80061b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061b4:	d012      	beq.n	80061dc <UART_SetConfig+0x290>
 80061b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061ba:	d802      	bhi.n	80061c2 <UART_SetConfig+0x276>
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d007      	beq.n	80061d0 <UART_SetConfig+0x284>
 80061c0:	e012      	b.n	80061e8 <UART_SetConfig+0x29c>
 80061c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061c6:	d006      	beq.n	80061d6 <UART_SetConfig+0x28a>
 80061c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061cc:	d009      	beq.n	80061e2 <UART_SetConfig+0x296>
 80061ce:	e00b      	b.n	80061e8 <UART_SetConfig+0x29c>
 80061d0:	2300      	movs	r3, #0
 80061d2:	76fb      	strb	r3, [r7, #27]
 80061d4:	e00e      	b.n	80061f4 <UART_SetConfig+0x2a8>
 80061d6:	2302      	movs	r3, #2
 80061d8:	76fb      	strb	r3, [r7, #27]
 80061da:	e00b      	b.n	80061f4 <UART_SetConfig+0x2a8>
 80061dc:	2304      	movs	r3, #4
 80061de:	76fb      	strb	r3, [r7, #27]
 80061e0:	e008      	b.n	80061f4 <UART_SetConfig+0x2a8>
 80061e2:	2308      	movs	r3, #8
 80061e4:	76fb      	strb	r3, [r7, #27]
 80061e6:	e005      	b.n	80061f4 <UART_SetConfig+0x2a8>
 80061e8:	2310      	movs	r3, #16
 80061ea:	76fb      	strb	r3, [r7, #27]
 80061ec:	bf00      	nop
 80061ee:	e001      	b.n	80061f4 <UART_SetConfig+0x2a8>
 80061f0:	2310      	movs	r3, #16
 80061f2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a14      	ldr	r2, [pc, #80]	; (800624c <UART_SetConfig+0x300>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	f040 80a1 	bne.w	8006342 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006200:	7efb      	ldrb	r3, [r7, #27]
 8006202:	2b08      	cmp	r3, #8
 8006204:	d836      	bhi.n	8006274 <UART_SetConfig+0x328>
 8006206:	a201      	add	r2, pc, #4	; (adr r2, 800620c <UART_SetConfig+0x2c0>)
 8006208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620c:	08006231 	.word	0x08006231
 8006210:	08006275 	.word	0x08006275
 8006214:	08006239 	.word	0x08006239
 8006218:	08006275 	.word	0x08006275
 800621c:	0800623f 	.word	0x0800623f
 8006220:	08006275 	.word	0x08006275
 8006224:	08006275 	.word	0x08006275
 8006228:	08006275 	.word	0x08006275
 800622c:	0800626d 	.word	0x0800626d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006230:	f7fe fefc 	bl	800502c <HAL_RCC_GetPCLK1Freq>
 8006234:	6178      	str	r0, [r7, #20]
        break;
 8006236:	e022      	b.n	800627e <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006238:	4b0b      	ldr	r3, [pc, #44]	; (8006268 <UART_SetConfig+0x31c>)
 800623a:	617b      	str	r3, [r7, #20]
        break;
 800623c:	e01f      	b.n	800627e <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800623e:	f7fe fe5f 	bl	8004f00 <HAL_RCC_GetSysClockFreq>
 8006242:	6178      	str	r0, [r7, #20]
        break;
 8006244:	e01b      	b.n	800627e <UART_SetConfig+0x332>
 8006246:	bf00      	nop
 8006248:	cfff69f3 	.word	0xcfff69f3
 800624c:	40008000 	.word	0x40008000
 8006250:	40013800 	.word	0x40013800
 8006254:	40021000 	.word	0x40021000
 8006258:	40004400 	.word	0x40004400
 800625c:	40004800 	.word	0x40004800
 8006260:	40004c00 	.word	0x40004c00
 8006264:	40005000 	.word	0x40005000
 8006268:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800626c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006270:	617b      	str	r3, [r7, #20]
        break;
 8006272:	e004      	b.n	800627e <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8006274:	2300      	movs	r3, #0
 8006276:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	76bb      	strb	r3, [r7, #26]
        break;
 800627c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	2b00      	cmp	r3, #0
 8006282:	f000 811d 	beq.w	80064c0 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628a:	4a97      	ldr	r2, [pc, #604]	; (80064e8 <UART_SetConfig+0x59c>)
 800628c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006290:	461a      	mov	r2, r3
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	fbb3 f3f2 	udiv	r3, r3, r2
 8006298:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685a      	ldr	r2, [r3, #4]
 800629e:	4613      	mov	r3, r2
 80062a0:	005b      	lsls	r3, r3, #1
 80062a2:	4413      	add	r3, r2
 80062a4:	68ba      	ldr	r2, [r7, #8]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d305      	bcc.n	80062b6 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d902      	bls.n	80062bc <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	76bb      	strb	r3, [r7, #26]
 80062ba:	e101      	b.n	80064c0 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	4618      	mov	r0, r3
 80062c0:	f04f 0100 	mov.w	r1, #0
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c8:	4a87      	ldr	r2, [pc, #540]	; (80064e8 <UART_SetConfig+0x59c>)
 80062ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	f04f 0400 	mov.w	r4, #0
 80062d4:	461a      	mov	r2, r3
 80062d6:	4623      	mov	r3, r4
 80062d8:	f7f9 ffea 	bl	80002b0 <__aeabi_uldivmod>
 80062dc:	4603      	mov	r3, r0
 80062de:	460c      	mov	r4, r1
 80062e0:	4619      	mov	r1, r3
 80062e2:	4622      	mov	r2, r4
 80062e4:	f04f 0300 	mov.w	r3, #0
 80062e8:	f04f 0400 	mov.w	r4, #0
 80062ec:	0214      	lsls	r4, r2, #8
 80062ee:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80062f2:	020b      	lsls	r3, r1, #8
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	6852      	ldr	r2, [r2, #4]
 80062f8:	0852      	lsrs	r2, r2, #1
 80062fa:	4611      	mov	r1, r2
 80062fc:	f04f 0200 	mov.w	r2, #0
 8006300:	eb13 0b01 	adds.w	fp, r3, r1
 8006304:	eb44 0c02 	adc.w	ip, r4, r2
 8006308:	4658      	mov	r0, fp
 800630a:	4661      	mov	r1, ip
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f04f 0400 	mov.w	r4, #0
 8006314:	461a      	mov	r2, r3
 8006316:	4623      	mov	r3, r4
 8006318:	f7f9 ffca 	bl	80002b0 <__aeabi_uldivmod>
 800631c:	4603      	mov	r3, r0
 800631e:	460c      	mov	r4, r1
 8006320:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006328:	d308      	bcc.n	800633c <UART_SetConfig+0x3f0>
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006330:	d204      	bcs.n	800633c <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	60da      	str	r2, [r3, #12]
 800633a:	e0c1      	b.n	80064c0 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	76bb      	strb	r3, [r7, #26]
 8006340:	e0be      	b.n	80064c0 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800634a:	d164      	bne.n	8006416 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 800634c:	7efb      	ldrb	r3, [r7, #27]
 800634e:	2b08      	cmp	r3, #8
 8006350:	d827      	bhi.n	80063a2 <UART_SetConfig+0x456>
 8006352:	a201      	add	r2, pc, #4	; (adr r2, 8006358 <UART_SetConfig+0x40c>)
 8006354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006358:	0800637d 	.word	0x0800637d
 800635c:	08006385 	.word	0x08006385
 8006360:	0800638d 	.word	0x0800638d
 8006364:	080063a3 	.word	0x080063a3
 8006368:	08006393 	.word	0x08006393
 800636c:	080063a3 	.word	0x080063a3
 8006370:	080063a3 	.word	0x080063a3
 8006374:	080063a3 	.word	0x080063a3
 8006378:	0800639b 	.word	0x0800639b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800637c:	f7fe fe56 	bl	800502c <HAL_RCC_GetPCLK1Freq>
 8006380:	6178      	str	r0, [r7, #20]
        break;
 8006382:	e013      	b.n	80063ac <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006384:	f7fe fe68 	bl	8005058 <HAL_RCC_GetPCLK2Freq>
 8006388:	6178      	str	r0, [r7, #20]
        break;
 800638a:	e00f      	b.n	80063ac <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800638c:	4b57      	ldr	r3, [pc, #348]	; (80064ec <UART_SetConfig+0x5a0>)
 800638e:	617b      	str	r3, [r7, #20]
        break;
 8006390:	e00c      	b.n	80063ac <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006392:	f7fe fdb5 	bl	8004f00 <HAL_RCC_GetSysClockFreq>
 8006396:	6178      	str	r0, [r7, #20]
        break;
 8006398:	e008      	b.n	80063ac <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800639a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800639e:	617b      	str	r3, [r7, #20]
        break;
 80063a0:	e004      	b.n	80063ac <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 80063a2:	2300      	movs	r3, #0
 80063a4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	76bb      	strb	r3, [r7, #26]
        break;
 80063aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f000 8086 	beq.w	80064c0 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b8:	4a4b      	ldr	r2, [pc, #300]	; (80064e8 <UART_SetConfig+0x59c>)
 80063ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063be:	461a      	mov	r2, r3
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80063c6:	005a      	lsls	r2, r3, #1
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	085b      	lsrs	r3, r3, #1
 80063ce:	441a      	add	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063d8:	b29b      	uxth	r3, r3
 80063da:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	2b0f      	cmp	r3, #15
 80063e0:	d916      	bls.n	8006410 <UART_SetConfig+0x4c4>
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063e8:	d212      	bcs.n	8006410 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	f023 030f 	bic.w	r3, r3, #15
 80063f2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	085b      	lsrs	r3, r3, #1
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	f003 0307 	and.w	r3, r3, #7
 80063fe:	b29a      	uxth	r2, r3
 8006400:	89fb      	ldrh	r3, [r7, #14]
 8006402:	4313      	orrs	r3, r2
 8006404:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	89fa      	ldrh	r2, [r7, #14]
 800640c:	60da      	str	r2, [r3, #12]
 800640e:	e057      	b.n	80064c0 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	76bb      	strb	r3, [r7, #26]
 8006414:	e054      	b.n	80064c0 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006416:	7efb      	ldrb	r3, [r7, #27]
 8006418:	2b08      	cmp	r3, #8
 800641a:	d828      	bhi.n	800646e <UART_SetConfig+0x522>
 800641c:	a201      	add	r2, pc, #4	; (adr r2, 8006424 <UART_SetConfig+0x4d8>)
 800641e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006422:	bf00      	nop
 8006424:	08006449 	.word	0x08006449
 8006428:	08006451 	.word	0x08006451
 800642c:	08006459 	.word	0x08006459
 8006430:	0800646f 	.word	0x0800646f
 8006434:	0800645f 	.word	0x0800645f
 8006438:	0800646f 	.word	0x0800646f
 800643c:	0800646f 	.word	0x0800646f
 8006440:	0800646f 	.word	0x0800646f
 8006444:	08006467 	.word	0x08006467
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006448:	f7fe fdf0 	bl	800502c <HAL_RCC_GetPCLK1Freq>
 800644c:	6178      	str	r0, [r7, #20]
        break;
 800644e:	e013      	b.n	8006478 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006450:	f7fe fe02 	bl	8005058 <HAL_RCC_GetPCLK2Freq>
 8006454:	6178      	str	r0, [r7, #20]
        break;
 8006456:	e00f      	b.n	8006478 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006458:	4b24      	ldr	r3, [pc, #144]	; (80064ec <UART_SetConfig+0x5a0>)
 800645a:	617b      	str	r3, [r7, #20]
        break;
 800645c:	e00c      	b.n	8006478 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800645e:	f7fe fd4f 	bl	8004f00 <HAL_RCC_GetSysClockFreq>
 8006462:	6178      	str	r0, [r7, #20]
        break;
 8006464:	e008      	b.n	8006478 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800646a:	617b      	str	r3, [r7, #20]
        break;
 800646c:	e004      	b.n	8006478 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 800646e:	2300      	movs	r3, #0
 8006470:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	76bb      	strb	r3, [r7, #26]
        break;
 8006476:	bf00      	nop
    }

    if (pclk != 0U)
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d020      	beq.n	80064c0 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006482:	4a19      	ldr	r2, [pc, #100]	; (80064e8 <UART_SetConfig+0x59c>)
 8006484:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006488:	461a      	mov	r2, r3
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	085b      	lsrs	r3, r3, #1
 8006496:	441a      	add	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	2b0f      	cmp	r3, #15
 80064a8:	d908      	bls.n	80064bc <UART_SetConfig+0x570>
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064b0:	d204      	bcs.n	80064bc <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	60da      	str	r2, [r3, #12]
 80064ba:	e001      	b.n	80064c0 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80064dc:	7ebb      	ldrb	r3, [r7, #26]
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3720      	adds	r7, #32
 80064e2:	46bd      	mov	sp, r7
 80064e4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80064e8:	08007300 	.word	0x08007300
 80064ec:	00f42400 	.word	0x00f42400

080064f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064fc:	f003 0301 	and.w	r3, r3, #1
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00a      	beq.n	800651a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651e:	f003 0302 	and.w	r3, r3, #2
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	430a      	orrs	r2, r1
 800653a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006540:	f003 0304 	and.w	r3, r3, #4
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00a      	beq.n	800655e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	430a      	orrs	r2, r1
 800655c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006562:	f003 0308 	and.w	r3, r3, #8
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00a      	beq.n	8006580 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	430a      	orrs	r2, r1
 800657e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006584:	f003 0310 	and.w	r3, r3, #16
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00a      	beq.n	80065a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	430a      	orrs	r2, r1
 80065a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a6:	f003 0320 	and.w	r3, r3, #32
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00a      	beq.n	80065c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d01a      	beq.n	8006606 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065ee:	d10a      	bne.n	8006606 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	430a      	orrs	r2, r1
 8006604:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00a      	beq.n	8006628 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	430a      	orrs	r2, r1
 8006626:	605a      	str	r2, [r3, #4]
  }
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b086      	sub	sp, #24
 8006638:	af02      	add	r7, sp, #8
 800663a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006644:	f7fb fb90 	bl	8001d68 <HAL_GetTick>
 8006648:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0308 	and.w	r3, r3, #8
 8006654:	2b08      	cmp	r3, #8
 8006656:	d10e      	bne.n	8006676 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006658:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f82c 	bl	80066c4 <UART_WaitOnFlagUntilTimeout>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e022      	b.n	80066bc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0304 	and.w	r3, r3, #4
 8006680:	2b04      	cmp	r3, #4
 8006682:	d10e      	bne.n	80066a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006684:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f816 	bl	80066c4 <UART_WaitOnFlagUntilTimeout>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e00c      	b.n	80066bc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2220      	movs	r2, #32
 80066a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2220      	movs	r2, #32
 80066ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	603b      	str	r3, [r7, #0]
 80066d0:	4613      	mov	r3, r2
 80066d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066d4:	e062      	b.n	800679c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066dc:	d05e      	beq.n	800679c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066de:	f7fb fb43 	bl	8001d68 <HAL_GetTick>
 80066e2:	4602      	mov	r2, r0
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	69ba      	ldr	r2, [r7, #24]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d302      	bcc.n	80066f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d11d      	bne.n	8006730 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006702:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	689a      	ldr	r2, [r3, #8]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f022 0201 	bic.w	r2, r2, #1
 8006712:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2220      	movs	r2, #32
 8006718:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2220      	movs	r2, #32
 8006720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	e045      	b.n	80067bc <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0304 	and.w	r3, r3, #4
 800673a:	2b00      	cmp	r3, #0
 800673c:	d02e      	beq.n	800679c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	69db      	ldr	r3, [r3, #28]
 8006744:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006748:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800674c:	d126      	bne.n	800679c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006756:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006766:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	689a      	ldr	r2, [r3, #8]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f022 0201 	bic.w	r2, r2, #1
 8006776:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2220      	movs	r2, #32
 800677c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2220      	movs	r2, #32
 8006784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2220      	movs	r2, #32
 800678c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e00f      	b.n	80067bc <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	69da      	ldr	r2, [r3, #28]
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	4013      	ands	r3, r2
 80067a6:	68ba      	ldr	r2, [r7, #8]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	bf0c      	ite	eq
 80067ac:	2301      	moveq	r3, #1
 80067ae:	2300      	movne	r3, #0
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	461a      	mov	r2, r3
 80067b4:	79fb      	ldrb	r3, [r7, #7]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d08d      	beq.n	80066d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d101      	bne.n	80067da <HAL_UARTEx_DisableFifoMode+0x16>
 80067d6:	2302      	movs	r3, #2
 80067d8:	e027      	b.n	800682a <HAL_UARTEx_DisableFifoMode+0x66>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2201      	movs	r2, #1
 80067de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2224      	movs	r2, #36	; 0x24
 80067e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f022 0201 	bic.w	r2, r2, #1
 8006800:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006808:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2220      	movs	r2, #32
 800681c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3714      	adds	r7, #20
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr

08006836 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b084      	sub	sp, #16
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006846:	2b01      	cmp	r3, #1
 8006848:	d101      	bne.n	800684e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800684a:	2302      	movs	r3, #2
 800684c:	e02d      	b.n	80068aa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2224      	movs	r2, #36	; 0x24
 800685a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f022 0201 	bic.w	r2, r2, #1
 8006874:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	683a      	ldr	r2, [r7, #0]
 8006886:	430a      	orrs	r2, r1
 8006888:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f850 	bl	8006930 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2220      	movs	r2, #32
 800689c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b084      	sub	sp, #16
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
 80068ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d101      	bne.n	80068ca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80068c6:	2302      	movs	r3, #2
 80068c8:	e02d      	b.n	8006926 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2224      	movs	r2, #36	; 0x24
 80068d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f022 0201 	bic.w	r2, r2, #1
 80068f0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	683a      	ldr	r2, [r7, #0]
 8006902:	430a      	orrs	r2, r1
 8006904:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f812 	bl	8006930 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2220      	movs	r2, #32
 8006918:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
	...

08006930 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006930:	b480      	push	{r7}
 8006932:	b089      	sub	sp, #36	; 0x24
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006938:	4a2f      	ldr	r2, [pc, #188]	; (80069f8 <UARTEx_SetNbDataToProcess+0xc8>)
 800693a:	f107 0314 	add.w	r3, r7, #20
 800693e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006942:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006946:	4a2d      	ldr	r2, [pc, #180]	; (80069fc <UARTEx_SetNbDataToProcess+0xcc>)
 8006948:	f107 030c 	add.w	r3, r7, #12
 800694c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006950:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006958:	2b00      	cmp	r3, #0
 800695a:	d108      	bne.n	800696e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800696c:	e03d      	b.n	80069ea <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800696e:	2308      	movs	r3, #8
 8006970:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006972:	2308      	movs	r3, #8
 8006974:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	0e5b      	lsrs	r3, r3, #25
 800697e:	b2db      	uxtb	r3, r3
 8006980:	f003 0307 	and.w	r3, r3, #7
 8006984:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	0f5b      	lsrs	r3, r3, #29
 800698e:	b2db      	uxtb	r3, r3
 8006990:	f003 0307 	and.w	r3, r3, #7
 8006994:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006996:	7fbb      	ldrb	r3, [r7, #30]
 8006998:	7f3a      	ldrb	r2, [r7, #28]
 800699a:	f107 0120 	add.w	r1, r7, #32
 800699e:	440a      	add	r2, r1
 80069a0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80069a4:	fb02 f303 	mul.w	r3, r2, r3
 80069a8:	7f3a      	ldrb	r2, [r7, #28]
 80069aa:	f107 0120 	add.w	r1, r7, #32
 80069ae:	440a      	add	r2, r1
 80069b0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80069b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80069c0:	7ffb      	ldrb	r3, [r7, #31]
 80069c2:	7f7a      	ldrb	r2, [r7, #29]
 80069c4:	f107 0120 	add.w	r1, r7, #32
 80069c8:	440a      	add	r2, r1
 80069ca:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80069ce:	fb02 f303 	mul.w	r3, r2, r3
 80069d2:	7f7a      	ldrb	r2, [r7, #29]
 80069d4:	f107 0120 	add.w	r1, r7, #32
 80069d8:	440a      	add	r2, r1
 80069da:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80069de:	fb93 f3f2 	sdiv	r3, r3, r2
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80069ea:	bf00      	nop
 80069ec:	3724      	adds	r7, #36	; 0x24
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	080072a8 	.word	0x080072a8
 80069fc:	080072b0 	.word	0x080072b0

08006a00 <__errno>:
 8006a00:	4b01      	ldr	r3, [pc, #4]	; (8006a08 <__errno+0x8>)
 8006a02:	6818      	ldr	r0, [r3, #0]
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	2000000c 	.word	0x2000000c

08006a0c <__libc_init_array>:
 8006a0c:	b570      	push	{r4, r5, r6, lr}
 8006a0e:	4e0d      	ldr	r6, [pc, #52]	; (8006a44 <__libc_init_array+0x38>)
 8006a10:	4c0d      	ldr	r4, [pc, #52]	; (8006a48 <__libc_init_array+0x3c>)
 8006a12:	1ba4      	subs	r4, r4, r6
 8006a14:	10a4      	asrs	r4, r4, #2
 8006a16:	2500      	movs	r5, #0
 8006a18:	42a5      	cmp	r5, r4
 8006a1a:	d109      	bne.n	8006a30 <__libc_init_array+0x24>
 8006a1c:	4e0b      	ldr	r6, [pc, #44]	; (8006a4c <__libc_init_array+0x40>)
 8006a1e:	4c0c      	ldr	r4, [pc, #48]	; (8006a50 <__libc_init_array+0x44>)
 8006a20:	f000 fc26 	bl	8007270 <_init>
 8006a24:	1ba4      	subs	r4, r4, r6
 8006a26:	10a4      	asrs	r4, r4, #2
 8006a28:	2500      	movs	r5, #0
 8006a2a:	42a5      	cmp	r5, r4
 8006a2c:	d105      	bne.n	8006a3a <__libc_init_array+0x2e>
 8006a2e:	bd70      	pop	{r4, r5, r6, pc}
 8006a30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a34:	4798      	blx	r3
 8006a36:	3501      	adds	r5, #1
 8006a38:	e7ee      	b.n	8006a18 <__libc_init_array+0xc>
 8006a3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a3e:	4798      	blx	r3
 8006a40:	3501      	adds	r5, #1
 8006a42:	e7f2      	b.n	8006a2a <__libc_init_array+0x1e>
 8006a44:	08007354 	.word	0x08007354
 8006a48:	08007354 	.word	0x08007354
 8006a4c:	08007354 	.word	0x08007354
 8006a50:	08007358 	.word	0x08007358

08006a54 <memset>:
 8006a54:	4402      	add	r2, r0
 8006a56:	4603      	mov	r3, r0
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d100      	bne.n	8006a5e <memset+0xa>
 8006a5c:	4770      	bx	lr
 8006a5e:	f803 1b01 	strb.w	r1, [r3], #1
 8006a62:	e7f9      	b.n	8006a58 <memset+0x4>

08006a64 <siprintf>:
 8006a64:	b40e      	push	{r1, r2, r3}
 8006a66:	b500      	push	{lr}
 8006a68:	b09c      	sub	sp, #112	; 0x70
 8006a6a:	ab1d      	add	r3, sp, #116	; 0x74
 8006a6c:	9002      	str	r0, [sp, #8]
 8006a6e:	9006      	str	r0, [sp, #24]
 8006a70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a74:	4809      	ldr	r0, [pc, #36]	; (8006a9c <siprintf+0x38>)
 8006a76:	9107      	str	r1, [sp, #28]
 8006a78:	9104      	str	r1, [sp, #16]
 8006a7a:	4909      	ldr	r1, [pc, #36]	; (8006aa0 <siprintf+0x3c>)
 8006a7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a80:	9105      	str	r1, [sp, #20]
 8006a82:	6800      	ldr	r0, [r0, #0]
 8006a84:	9301      	str	r3, [sp, #4]
 8006a86:	a902      	add	r1, sp, #8
 8006a88:	f000 f866 	bl	8006b58 <_svfiprintf_r>
 8006a8c:	9b02      	ldr	r3, [sp, #8]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	701a      	strb	r2, [r3, #0]
 8006a92:	b01c      	add	sp, #112	; 0x70
 8006a94:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a98:	b003      	add	sp, #12
 8006a9a:	4770      	bx	lr
 8006a9c:	2000000c 	.word	0x2000000c
 8006aa0:	ffff0208 	.word	0xffff0208

08006aa4 <__ssputs_r>:
 8006aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aa8:	688e      	ldr	r6, [r1, #8]
 8006aaa:	429e      	cmp	r6, r3
 8006aac:	4682      	mov	sl, r0
 8006aae:	460c      	mov	r4, r1
 8006ab0:	4690      	mov	r8, r2
 8006ab2:	4699      	mov	r9, r3
 8006ab4:	d837      	bhi.n	8006b26 <__ssputs_r+0x82>
 8006ab6:	898a      	ldrh	r2, [r1, #12]
 8006ab8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006abc:	d031      	beq.n	8006b22 <__ssputs_r+0x7e>
 8006abe:	6825      	ldr	r5, [r4, #0]
 8006ac0:	6909      	ldr	r1, [r1, #16]
 8006ac2:	1a6f      	subs	r7, r5, r1
 8006ac4:	6965      	ldr	r5, [r4, #20]
 8006ac6:	2302      	movs	r3, #2
 8006ac8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006acc:	fb95 f5f3 	sdiv	r5, r5, r3
 8006ad0:	f109 0301 	add.w	r3, r9, #1
 8006ad4:	443b      	add	r3, r7
 8006ad6:	429d      	cmp	r5, r3
 8006ad8:	bf38      	it	cc
 8006ada:	461d      	movcc	r5, r3
 8006adc:	0553      	lsls	r3, r2, #21
 8006ade:	d530      	bpl.n	8006b42 <__ssputs_r+0x9e>
 8006ae0:	4629      	mov	r1, r5
 8006ae2:	f000 fb2b 	bl	800713c <_malloc_r>
 8006ae6:	4606      	mov	r6, r0
 8006ae8:	b950      	cbnz	r0, 8006b00 <__ssputs_r+0x5c>
 8006aea:	230c      	movs	r3, #12
 8006aec:	f8ca 3000 	str.w	r3, [sl]
 8006af0:	89a3      	ldrh	r3, [r4, #12]
 8006af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006af6:	81a3      	strh	r3, [r4, #12]
 8006af8:	f04f 30ff 	mov.w	r0, #4294967295
 8006afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b00:	463a      	mov	r2, r7
 8006b02:	6921      	ldr	r1, [r4, #16]
 8006b04:	f000 faa8 	bl	8007058 <memcpy>
 8006b08:	89a3      	ldrh	r3, [r4, #12]
 8006b0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b12:	81a3      	strh	r3, [r4, #12]
 8006b14:	6126      	str	r6, [r4, #16]
 8006b16:	6165      	str	r5, [r4, #20]
 8006b18:	443e      	add	r6, r7
 8006b1a:	1bed      	subs	r5, r5, r7
 8006b1c:	6026      	str	r6, [r4, #0]
 8006b1e:	60a5      	str	r5, [r4, #8]
 8006b20:	464e      	mov	r6, r9
 8006b22:	454e      	cmp	r6, r9
 8006b24:	d900      	bls.n	8006b28 <__ssputs_r+0x84>
 8006b26:	464e      	mov	r6, r9
 8006b28:	4632      	mov	r2, r6
 8006b2a:	4641      	mov	r1, r8
 8006b2c:	6820      	ldr	r0, [r4, #0]
 8006b2e:	f000 fa9e 	bl	800706e <memmove>
 8006b32:	68a3      	ldr	r3, [r4, #8]
 8006b34:	1b9b      	subs	r3, r3, r6
 8006b36:	60a3      	str	r3, [r4, #8]
 8006b38:	6823      	ldr	r3, [r4, #0]
 8006b3a:	441e      	add	r6, r3
 8006b3c:	6026      	str	r6, [r4, #0]
 8006b3e:	2000      	movs	r0, #0
 8006b40:	e7dc      	b.n	8006afc <__ssputs_r+0x58>
 8006b42:	462a      	mov	r2, r5
 8006b44:	f000 fb54 	bl	80071f0 <_realloc_r>
 8006b48:	4606      	mov	r6, r0
 8006b4a:	2800      	cmp	r0, #0
 8006b4c:	d1e2      	bne.n	8006b14 <__ssputs_r+0x70>
 8006b4e:	6921      	ldr	r1, [r4, #16]
 8006b50:	4650      	mov	r0, sl
 8006b52:	f000 faa5 	bl	80070a0 <_free_r>
 8006b56:	e7c8      	b.n	8006aea <__ssputs_r+0x46>

08006b58 <_svfiprintf_r>:
 8006b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b5c:	461d      	mov	r5, r3
 8006b5e:	898b      	ldrh	r3, [r1, #12]
 8006b60:	061f      	lsls	r7, r3, #24
 8006b62:	b09d      	sub	sp, #116	; 0x74
 8006b64:	4680      	mov	r8, r0
 8006b66:	460c      	mov	r4, r1
 8006b68:	4616      	mov	r6, r2
 8006b6a:	d50f      	bpl.n	8006b8c <_svfiprintf_r+0x34>
 8006b6c:	690b      	ldr	r3, [r1, #16]
 8006b6e:	b96b      	cbnz	r3, 8006b8c <_svfiprintf_r+0x34>
 8006b70:	2140      	movs	r1, #64	; 0x40
 8006b72:	f000 fae3 	bl	800713c <_malloc_r>
 8006b76:	6020      	str	r0, [r4, #0]
 8006b78:	6120      	str	r0, [r4, #16]
 8006b7a:	b928      	cbnz	r0, 8006b88 <_svfiprintf_r+0x30>
 8006b7c:	230c      	movs	r3, #12
 8006b7e:	f8c8 3000 	str.w	r3, [r8]
 8006b82:	f04f 30ff 	mov.w	r0, #4294967295
 8006b86:	e0c8      	b.n	8006d1a <_svfiprintf_r+0x1c2>
 8006b88:	2340      	movs	r3, #64	; 0x40
 8006b8a:	6163      	str	r3, [r4, #20]
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8006b90:	2320      	movs	r3, #32
 8006b92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b96:	2330      	movs	r3, #48	; 0x30
 8006b98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b9c:	9503      	str	r5, [sp, #12]
 8006b9e:	f04f 0b01 	mov.w	fp, #1
 8006ba2:	4637      	mov	r7, r6
 8006ba4:	463d      	mov	r5, r7
 8006ba6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006baa:	b10b      	cbz	r3, 8006bb0 <_svfiprintf_r+0x58>
 8006bac:	2b25      	cmp	r3, #37	; 0x25
 8006bae:	d13e      	bne.n	8006c2e <_svfiprintf_r+0xd6>
 8006bb0:	ebb7 0a06 	subs.w	sl, r7, r6
 8006bb4:	d00b      	beq.n	8006bce <_svfiprintf_r+0x76>
 8006bb6:	4653      	mov	r3, sl
 8006bb8:	4632      	mov	r2, r6
 8006bba:	4621      	mov	r1, r4
 8006bbc:	4640      	mov	r0, r8
 8006bbe:	f7ff ff71 	bl	8006aa4 <__ssputs_r>
 8006bc2:	3001      	adds	r0, #1
 8006bc4:	f000 80a4 	beq.w	8006d10 <_svfiprintf_r+0x1b8>
 8006bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bca:	4453      	add	r3, sl
 8006bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8006bce:	783b      	ldrb	r3, [r7, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f000 809d 	beq.w	8006d10 <_svfiprintf_r+0x1b8>
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8006bdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006be0:	9304      	str	r3, [sp, #16]
 8006be2:	9307      	str	r3, [sp, #28]
 8006be4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006be8:	931a      	str	r3, [sp, #104]	; 0x68
 8006bea:	462f      	mov	r7, r5
 8006bec:	2205      	movs	r2, #5
 8006bee:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006bf2:	4850      	ldr	r0, [pc, #320]	; (8006d34 <_svfiprintf_r+0x1dc>)
 8006bf4:	f7f9 fb0c 	bl	8000210 <memchr>
 8006bf8:	9b04      	ldr	r3, [sp, #16]
 8006bfa:	b9d0      	cbnz	r0, 8006c32 <_svfiprintf_r+0xda>
 8006bfc:	06d9      	lsls	r1, r3, #27
 8006bfe:	bf44      	itt	mi
 8006c00:	2220      	movmi	r2, #32
 8006c02:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006c06:	071a      	lsls	r2, r3, #28
 8006c08:	bf44      	itt	mi
 8006c0a:	222b      	movmi	r2, #43	; 0x2b
 8006c0c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006c10:	782a      	ldrb	r2, [r5, #0]
 8006c12:	2a2a      	cmp	r2, #42	; 0x2a
 8006c14:	d015      	beq.n	8006c42 <_svfiprintf_r+0xea>
 8006c16:	9a07      	ldr	r2, [sp, #28]
 8006c18:	462f      	mov	r7, r5
 8006c1a:	2000      	movs	r0, #0
 8006c1c:	250a      	movs	r5, #10
 8006c1e:	4639      	mov	r1, r7
 8006c20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c24:	3b30      	subs	r3, #48	; 0x30
 8006c26:	2b09      	cmp	r3, #9
 8006c28:	d94d      	bls.n	8006cc6 <_svfiprintf_r+0x16e>
 8006c2a:	b1b8      	cbz	r0, 8006c5c <_svfiprintf_r+0x104>
 8006c2c:	e00f      	b.n	8006c4e <_svfiprintf_r+0xf6>
 8006c2e:	462f      	mov	r7, r5
 8006c30:	e7b8      	b.n	8006ba4 <_svfiprintf_r+0x4c>
 8006c32:	4a40      	ldr	r2, [pc, #256]	; (8006d34 <_svfiprintf_r+0x1dc>)
 8006c34:	1a80      	subs	r0, r0, r2
 8006c36:	fa0b f000 	lsl.w	r0, fp, r0
 8006c3a:	4318      	orrs	r0, r3
 8006c3c:	9004      	str	r0, [sp, #16]
 8006c3e:	463d      	mov	r5, r7
 8006c40:	e7d3      	b.n	8006bea <_svfiprintf_r+0x92>
 8006c42:	9a03      	ldr	r2, [sp, #12]
 8006c44:	1d11      	adds	r1, r2, #4
 8006c46:	6812      	ldr	r2, [r2, #0]
 8006c48:	9103      	str	r1, [sp, #12]
 8006c4a:	2a00      	cmp	r2, #0
 8006c4c:	db01      	blt.n	8006c52 <_svfiprintf_r+0xfa>
 8006c4e:	9207      	str	r2, [sp, #28]
 8006c50:	e004      	b.n	8006c5c <_svfiprintf_r+0x104>
 8006c52:	4252      	negs	r2, r2
 8006c54:	f043 0302 	orr.w	r3, r3, #2
 8006c58:	9207      	str	r2, [sp, #28]
 8006c5a:	9304      	str	r3, [sp, #16]
 8006c5c:	783b      	ldrb	r3, [r7, #0]
 8006c5e:	2b2e      	cmp	r3, #46	; 0x2e
 8006c60:	d10c      	bne.n	8006c7c <_svfiprintf_r+0x124>
 8006c62:	787b      	ldrb	r3, [r7, #1]
 8006c64:	2b2a      	cmp	r3, #42	; 0x2a
 8006c66:	d133      	bne.n	8006cd0 <_svfiprintf_r+0x178>
 8006c68:	9b03      	ldr	r3, [sp, #12]
 8006c6a:	1d1a      	adds	r2, r3, #4
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	9203      	str	r2, [sp, #12]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	bfb8      	it	lt
 8006c74:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c78:	3702      	adds	r7, #2
 8006c7a:	9305      	str	r3, [sp, #20]
 8006c7c:	4d2e      	ldr	r5, [pc, #184]	; (8006d38 <_svfiprintf_r+0x1e0>)
 8006c7e:	7839      	ldrb	r1, [r7, #0]
 8006c80:	2203      	movs	r2, #3
 8006c82:	4628      	mov	r0, r5
 8006c84:	f7f9 fac4 	bl	8000210 <memchr>
 8006c88:	b138      	cbz	r0, 8006c9a <_svfiprintf_r+0x142>
 8006c8a:	2340      	movs	r3, #64	; 0x40
 8006c8c:	1b40      	subs	r0, r0, r5
 8006c8e:	fa03 f000 	lsl.w	r0, r3, r0
 8006c92:	9b04      	ldr	r3, [sp, #16]
 8006c94:	4303      	orrs	r3, r0
 8006c96:	3701      	adds	r7, #1
 8006c98:	9304      	str	r3, [sp, #16]
 8006c9a:	7839      	ldrb	r1, [r7, #0]
 8006c9c:	4827      	ldr	r0, [pc, #156]	; (8006d3c <_svfiprintf_r+0x1e4>)
 8006c9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ca2:	2206      	movs	r2, #6
 8006ca4:	1c7e      	adds	r6, r7, #1
 8006ca6:	f7f9 fab3 	bl	8000210 <memchr>
 8006caa:	2800      	cmp	r0, #0
 8006cac:	d038      	beq.n	8006d20 <_svfiprintf_r+0x1c8>
 8006cae:	4b24      	ldr	r3, [pc, #144]	; (8006d40 <_svfiprintf_r+0x1e8>)
 8006cb0:	bb13      	cbnz	r3, 8006cf8 <_svfiprintf_r+0x1a0>
 8006cb2:	9b03      	ldr	r3, [sp, #12]
 8006cb4:	3307      	adds	r3, #7
 8006cb6:	f023 0307 	bic.w	r3, r3, #7
 8006cba:	3308      	adds	r3, #8
 8006cbc:	9303      	str	r3, [sp, #12]
 8006cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cc0:	444b      	add	r3, r9
 8006cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8006cc4:	e76d      	b.n	8006ba2 <_svfiprintf_r+0x4a>
 8006cc6:	fb05 3202 	mla	r2, r5, r2, r3
 8006cca:	2001      	movs	r0, #1
 8006ccc:	460f      	mov	r7, r1
 8006cce:	e7a6      	b.n	8006c1e <_svfiprintf_r+0xc6>
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	3701      	adds	r7, #1
 8006cd4:	9305      	str	r3, [sp, #20]
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	250a      	movs	r5, #10
 8006cda:	4638      	mov	r0, r7
 8006cdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ce0:	3a30      	subs	r2, #48	; 0x30
 8006ce2:	2a09      	cmp	r2, #9
 8006ce4:	d903      	bls.n	8006cee <_svfiprintf_r+0x196>
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d0c8      	beq.n	8006c7c <_svfiprintf_r+0x124>
 8006cea:	9105      	str	r1, [sp, #20]
 8006cec:	e7c6      	b.n	8006c7c <_svfiprintf_r+0x124>
 8006cee:	fb05 2101 	mla	r1, r5, r1, r2
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	4607      	mov	r7, r0
 8006cf6:	e7f0      	b.n	8006cda <_svfiprintf_r+0x182>
 8006cf8:	ab03      	add	r3, sp, #12
 8006cfa:	9300      	str	r3, [sp, #0]
 8006cfc:	4622      	mov	r2, r4
 8006cfe:	4b11      	ldr	r3, [pc, #68]	; (8006d44 <_svfiprintf_r+0x1ec>)
 8006d00:	a904      	add	r1, sp, #16
 8006d02:	4640      	mov	r0, r8
 8006d04:	f3af 8000 	nop.w
 8006d08:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006d0c:	4681      	mov	r9, r0
 8006d0e:	d1d6      	bne.n	8006cbe <_svfiprintf_r+0x166>
 8006d10:	89a3      	ldrh	r3, [r4, #12]
 8006d12:	065b      	lsls	r3, r3, #25
 8006d14:	f53f af35 	bmi.w	8006b82 <_svfiprintf_r+0x2a>
 8006d18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d1a:	b01d      	add	sp, #116	; 0x74
 8006d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d20:	ab03      	add	r3, sp, #12
 8006d22:	9300      	str	r3, [sp, #0]
 8006d24:	4622      	mov	r2, r4
 8006d26:	4b07      	ldr	r3, [pc, #28]	; (8006d44 <_svfiprintf_r+0x1ec>)
 8006d28:	a904      	add	r1, sp, #16
 8006d2a:	4640      	mov	r0, r8
 8006d2c:	f000 f882 	bl	8006e34 <_printf_i>
 8006d30:	e7ea      	b.n	8006d08 <_svfiprintf_r+0x1b0>
 8006d32:	bf00      	nop
 8006d34:	08007318 	.word	0x08007318
 8006d38:	0800731e 	.word	0x0800731e
 8006d3c:	08007322 	.word	0x08007322
 8006d40:	00000000 	.word	0x00000000
 8006d44:	08006aa5 	.word	0x08006aa5

08006d48 <_printf_common>:
 8006d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d4c:	4691      	mov	r9, r2
 8006d4e:	461f      	mov	r7, r3
 8006d50:	688a      	ldr	r2, [r1, #8]
 8006d52:	690b      	ldr	r3, [r1, #16]
 8006d54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	bfb8      	it	lt
 8006d5c:	4613      	movlt	r3, r2
 8006d5e:	f8c9 3000 	str.w	r3, [r9]
 8006d62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d66:	4606      	mov	r6, r0
 8006d68:	460c      	mov	r4, r1
 8006d6a:	b112      	cbz	r2, 8006d72 <_printf_common+0x2a>
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	f8c9 3000 	str.w	r3, [r9]
 8006d72:	6823      	ldr	r3, [r4, #0]
 8006d74:	0699      	lsls	r1, r3, #26
 8006d76:	bf42      	ittt	mi
 8006d78:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006d7c:	3302      	addmi	r3, #2
 8006d7e:	f8c9 3000 	strmi.w	r3, [r9]
 8006d82:	6825      	ldr	r5, [r4, #0]
 8006d84:	f015 0506 	ands.w	r5, r5, #6
 8006d88:	d107      	bne.n	8006d9a <_printf_common+0x52>
 8006d8a:	f104 0a19 	add.w	sl, r4, #25
 8006d8e:	68e3      	ldr	r3, [r4, #12]
 8006d90:	f8d9 2000 	ldr.w	r2, [r9]
 8006d94:	1a9b      	subs	r3, r3, r2
 8006d96:	42ab      	cmp	r3, r5
 8006d98:	dc28      	bgt.n	8006dec <_printf_common+0xa4>
 8006d9a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006d9e:	6822      	ldr	r2, [r4, #0]
 8006da0:	3300      	adds	r3, #0
 8006da2:	bf18      	it	ne
 8006da4:	2301      	movne	r3, #1
 8006da6:	0692      	lsls	r2, r2, #26
 8006da8:	d42d      	bmi.n	8006e06 <_printf_common+0xbe>
 8006daa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006dae:	4639      	mov	r1, r7
 8006db0:	4630      	mov	r0, r6
 8006db2:	47c0      	blx	r8
 8006db4:	3001      	adds	r0, #1
 8006db6:	d020      	beq.n	8006dfa <_printf_common+0xb2>
 8006db8:	6823      	ldr	r3, [r4, #0]
 8006dba:	68e5      	ldr	r5, [r4, #12]
 8006dbc:	f8d9 2000 	ldr.w	r2, [r9]
 8006dc0:	f003 0306 	and.w	r3, r3, #6
 8006dc4:	2b04      	cmp	r3, #4
 8006dc6:	bf08      	it	eq
 8006dc8:	1aad      	subeq	r5, r5, r2
 8006dca:	68a3      	ldr	r3, [r4, #8]
 8006dcc:	6922      	ldr	r2, [r4, #16]
 8006dce:	bf0c      	ite	eq
 8006dd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006dd4:	2500      	movne	r5, #0
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	bfc4      	itt	gt
 8006dda:	1a9b      	subgt	r3, r3, r2
 8006ddc:	18ed      	addgt	r5, r5, r3
 8006dde:	f04f 0900 	mov.w	r9, #0
 8006de2:	341a      	adds	r4, #26
 8006de4:	454d      	cmp	r5, r9
 8006de6:	d11a      	bne.n	8006e1e <_printf_common+0xd6>
 8006de8:	2000      	movs	r0, #0
 8006dea:	e008      	b.n	8006dfe <_printf_common+0xb6>
 8006dec:	2301      	movs	r3, #1
 8006dee:	4652      	mov	r2, sl
 8006df0:	4639      	mov	r1, r7
 8006df2:	4630      	mov	r0, r6
 8006df4:	47c0      	blx	r8
 8006df6:	3001      	adds	r0, #1
 8006df8:	d103      	bne.n	8006e02 <_printf_common+0xba>
 8006dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8006dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e02:	3501      	adds	r5, #1
 8006e04:	e7c3      	b.n	8006d8e <_printf_common+0x46>
 8006e06:	18e1      	adds	r1, r4, r3
 8006e08:	1c5a      	adds	r2, r3, #1
 8006e0a:	2030      	movs	r0, #48	; 0x30
 8006e0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e10:	4422      	add	r2, r4
 8006e12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e1a:	3302      	adds	r3, #2
 8006e1c:	e7c5      	b.n	8006daa <_printf_common+0x62>
 8006e1e:	2301      	movs	r3, #1
 8006e20:	4622      	mov	r2, r4
 8006e22:	4639      	mov	r1, r7
 8006e24:	4630      	mov	r0, r6
 8006e26:	47c0      	blx	r8
 8006e28:	3001      	adds	r0, #1
 8006e2a:	d0e6      	beq.n	8006dfa <_printf_common+0xb2>
 8006e2c:	f109 0901 	add.w	r9, r9, #1
 8006e30:	e7d8      	b.n	8006de4 <_printf_common+0x9c>
	...

08006e34 <_printf_i>:
 8006e34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e38:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006e3c:	460c      	mov	r4, r1
 8006e3e:	7e09      	ldrb	r1, [r1, #24]
 8006e40:	b085      	sub	sp, #20
 8006e42:	296e      	cmp	r1, #110	; 0x6e
 8006e44:	4617      	mov	r7, r2
 8006e46:	4606      	mov	r6, r0
 8006e48:	4698      	mov	r8, r3
 8006e4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e4c:	f000 80b3 	beq.w	8006fb6 <_printf_i+0x182>
 8006e50:	d822      	bhi.n	8006e98 <_printf_i+0x64>
 8006e52:	2963      	cmp	r1, #99	; 0x63
 8006e54:	d036      	beq.n	8006ec4 <_printf_i+0x90>
 8006e56:	d80a      	bhi.n	8006e6e <_printf_i+0x3a>
 8006e58:	2900      	cmp	r1, #0
 8006e5a:	f000 80b9 	beq.w	8006fd0 <_printf_i+0x19c>
 8006e5e:	2958      	cmp	r1, #88	; 0x58
 8006e60:	f000 8083 	beq.w	8006f6a <_printf_i+0x136>
 8006e64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e68:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006e6c:	e032      	b.n	8006ed4 <_printf_i+0xa0>
 8006e6e:	2964      	cmp	r1, #100	; 0x64
 8006e70:	d001      	beq.n	8006e76 <_printf_i+0x42>
 8006e72:	2969      	cmp	r1, #105	; 0x69
 8006e74:	d1f6      	bne.n	8006e64 <_printf_i+0x30>
 8006e76:	6820      	ldr	r0, [r4, #0]
 8006e78:	6813      	ldr	r3, [r2, #0]
 8006e7a:	0605      	lsls	r5, r0, #24
 8006e7c:	f103 0104 	add.w	r1, r3, #4
 8006e80:	d52a      	bpl.n	8006ed8 <_printf_i+0xa4>
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	6011      	str	r1, [r2, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	da03      	bge.n	8006e92 <_printf_i+0x5e>
 8006e8a:	222d      	movs	r2, #45	; 0x2d
 8006e8c:	425b      	negs	r3, r3
 8006e8e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006e92:	486f      	ldr	r0, [pc, #444]	; (8007050 <_printf_i+0x21c>)
 8006e94:	220a      	movs	r2, #10
 8006e96:	e039      	b.n	8006f0c <_printf_i+0xd8>
 8006e98:	2973      	cmp	r1, #115	; 0x73
 8006e9a:	f000 809d 	beq.w	8006fd8 <_printf_i+0x1a4>
 8006e9e:	d808      	bhi.n	8006eb2 <_printf_i+0x7e>
 8006ea0:	296f      	cmp	r1, #111	; 0x6f
 8006ea2:	d020      	beq.n	8006ee6 <_printf_i+0xb2>
 8006ea4:	2970      	cmp	r1, #112	; 0x70
 8006ea6:	d1dd      	bne.n	8006e64 <_printf_i+0x30>
 8006ea8:	6823      	ldr	r3, [r4, #0]
 8006eaa:	f043 0320 	orr.w	r3, r3, #32
 8006eae:	6023      	str	r3, [r4, #0]
 8006eb0:	e003      	b.n	8006eba <_printf_i+0x86>
 8006eb2:	2975      	cmp	r1, #117	; 0x75
 8006eb4:	d017      	beq.n	8006ee6 <_printf_i+0xb2>
 8006eb6:	2978      	cmp	r1, #120	; 0x78
 8006eb8:	d1d4      	bne.n	8006e64 <_printf_i+0x30>
 8006eba:	2378      	movs	r3, #120	; 0x78
 8006ebc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ec0:	4864      	ldr	r0, [pc, #400]	; (8007054 <_printf_i+0x220>)
 8006ec2:	e055      	b.n	8006f70 <_printf_i+0x13c>
 8006ec4:	6813      	ldr	r3, [r2, #0]
 8006ec6:	1d19      	adds	r1, r3, #4
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	6011      	str	r1, [r2, #0]
 8006ecc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ed0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e08c      	b.n	8006ff2 <_printf_i+0x1be>
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	6011      	str	r1, [r2, #0]
 8006edc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006ee0:	bf18      	it	ne
 8006ee2:	b21b      	sxthne	r3, r3
 8006ee4:	e7cf      	b.n	8006e86 <_printf_i+0x52>
 8006ee6:	6813      	ldr	r3, [r2, #0]
 8006ee8:	6825      	ldr	r5, [r4, #0]
 8006eea:	1d18      	adds	r0, r3, #4
 8006eec:	6010      	str	r0, [r2, #0]
 8006eee:	0628      	lsls	r0, r5, #24
 8006ef0:	d501      	bpl.n	8006ef6 <_printf_i+0xc2>
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	e002      	b.n	8006efc <_printf_i+0xc8>
 8006ef6:	0668      	lsls	r0, r5, #25
 8006ef8:	d5fb      	bpl.n	8006ef2 <_printf_i+0xbe>
 8006efa:	881b      	ldrh	r3, [r3, #0]
 8006efc:	4854      	ldr	r0, [pc, #336]	; (8007050 <_printf_i+0x21c>)
 8006efe:	296f      	cmp	r1, #111	; 0x6f
 8006f00:	bf14      	ite	ne
 8006f02:	220a      	movne	r2, #10
 8006f04:	2208      	moveq	r2, #8
 8006f06:	2100      	movs	r1, #0
 8006f08:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f0c:	6865      	ldr	r5, [r4, #4]
 8006f0e:	60a5      	str	r5, [r4, #8]
 8006f10:	2d00      	cmp	r5, #0
 8006f12:	f2c0 8095 	blt.w	8007040 <_printf_i+0x20c>
 8006f16:	6821      	ldr	r1, [r4, #0]
 8006f18:	f021 0104 	bic.w	r1, r1, #4
 8006f1c:	6021      	str	r1, [r4, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d13d      	bne.n	8006f9e <_printf_i+0x16a>
 8006f22:	2d00      	cmp	r5, #0
 8006f24:	f040 808e 	bne.w	8007044 <_printf_i+0x210>
 8006f28:	4665      	mov	r5, ip
 8006f2a:	2a08      	cmp	r2, #8
 8006f2c:	d10b      	bne.n	8006f46 <_printf_i+0x112>
 8006f2e:	6823      	ldr	r3, [r4, #0]
 8006f30:	07db      	lsls	r3, r3, #31
 8006f32:	d508      	bpl.n	8006f46 <_printf_i+0x112>
 8006f34:	6923      	ldr	r3, [r4, #16]
 8006f36:	6862      	ldr	r2, [r4, #4]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	bfde      	ittt	le
 8006f3c:	2330      	movle	r3, #48	; 0x30
 8006f3e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f42:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f46:	ebac 0305 	sub.w	r3, ip, r5
 8006f4a:	6123      	str	r3, [r4, #16]
 8006f4c:	f8cd 8000 	str.w	r8, [sp]
 8006f50:	463b      	mov	r3, r7
 8006f52:	aa03      	add	r2, sp, #12
 8006f54:	4621      	mov	r1, r4
 8006f56:	4630      	mov	r0, r6
 8006f58:	f7ff fef6 	bl	8006d48 <_printf_common>
 8006f5c:	3001      	adds	r0, #1
 8006f5e:	d14d      	bne.n	8006ffc <_printf_i+0x1c8>
 8006f60:	f04f 30ff 	mov.w	r0, #4294967295
 8006f64:	b005      	add	sp, #20
 8006f66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f6a:	4839      	ldr	r0, [pc, #228]	; (8007050 <_printf_i+0x21c>)
 8006f6c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006f70:	6813      	ldr	r3, [r2, #0]
 8006f72:	6821      	ldr	r1, [r4, #0]
 8006f74:	1d1d      	adds	r5, r3, #4
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	6015      	str	r5, [r2, #0]
 8006f7a:	060a      	lsls	r2, r1, #24
 8006f7c:	d50b      	bpl.n	8006f96 <_printf_i+0x162>
 8006f7e:	07ca      	lsls	r2, r1, #31
 8006f80:	bf44      	itt	mi
 8006f82:	f041 0120 	orrmi.w	r1, r1, #32
 8006f86:	6021      	strmi	r1, [r4, #0]
 8006f88:	b91b      	cbnz	r3, 8006f92 <_printf_i+0x15e>
 8006f8a:	6822      	ldr	r2, [r4, #0]
 8006f8c:	f022 0220 	bic.w	r2, r2, #32
 8006f90:	6022      	str	r2, [r4, #0]
 8006f92:	2210      	movs	r2, #16
 8006f94:	e7b7      	b.n	8006f06 <_printf_i+0xd2>
 8006f96:	064d      	lsls	r5, r1, #25
 8006f98:	bf48      	it	mi
 8006f9a:	b29b      	uxthmi	r3, r3
 8006f9c:	e7ef      	b.n	8006f7e <_printf_i+0x14a>
 8006f9e:	4665      	mov	r5, ip
 8006fa0:	fbb3 f1f2 	udiv	r1, r3, r2
 8006fa4:	fb02 3311 	mls	r3, r2, r1, r3
 8006fa8:	5cc3      	ldrb	r3, [r0, r3]
 8006faa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006fae:	460b      	mov	r3, r1
 8006fb0:	2900      	cmp	r1, #0
 8006fb2:	d1f5      	bne.n	8006fa0 <_printf_i+0x16c>
 8006fb4:	e7b9      	b.n	8006f2a <_printf_i+0xf6>
 8006fb6:	6813      	ldr	r3, [r2, #0]
 8006fb8:	6825      	ldr	r5, [r4, #0]
 8006fba:	6961      	ldr	r1, [r4, #20]
 8006fbc:	1d18      	adds	r0, r3, #4
 8006fbe:	6010      	str	r0, [r2, #0]
 8006fc0:	0628      	lsls	r0, r5, #24
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	d501      	bpl.n	8006fca <_printf_i+0x196>
 8006fc6:	6019      	str	r1, [r3, #0]
 8006fc8:	e002      	b.n	8006fd0 <_printf_i+0x19c>
 8006fca:	066a      	lsls	r2, r5, #25
 8006fcc:	d5fb      	bpl.n	8006fc6 <_printf_i+0x192>
 8006fce:	8019      	strh	r1, [r3, #0]
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	6123      	str	r3, [r4, #16]
 8006fd4:	4665      	mov	r5, ip
 8006fd6:	e7b9      	b.n	8006f4c <_printf_i+0x118>
 8006fd8:	6813      	ldr	r3, [r2, #0]
 8006fda:	1d19      	adds	r1, r3, #4
 8006fdc:	6011      	str	r1, [r2, #0]
 8006fde:	681d      	ldr	r5, [r3, #0]
 8006fe0:	6862      	ldr	r2, [r4, #4]
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	f7f9 f913 	bl	8000210 <memchr>
 8006fea:	b108      	cbz	r0, 8006ff0 <_printf_i+0x1bc>
 8006fec:	1b40      	subs	r0, r0, r5
 8006fee:	6060      	str	r0, [r4, #4]
 8006ff0:	6863      	ldr	r3, [r4, #4]
 8006ff2:	6123      	str	r3, [r4, #16]
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ffa:	e7a7      	b.n	8006f4c <_printf_i+0x118>
 8006ffc:	6923      	ldr	r3, [r4, #16]
 8006ffe:	462a      	mov	r2, r5
 8007000:	4639      	mov	r1, r7
 8007002:	4630      	mov	r0, r6
 8007004:	47c0      	blx	r8
 8007006:	3001      	adds	r0, #1
 8007008:	d0aa      	beq.n	8006f60 <_printf_i+0x12c>
 800700a:	6823      	ldr	r3, [r4, #0]
 800700c:	079b      	lsls	r3, r3, #30
 800700e:	d413      	bmi.n	8007038 <_printf_i+0x204>
 8007010:	68e0      	ldr	r0, [r4, #12]
 8007012:	9b03      	ldr	r3, [sp, #12]
 8007014:	4298      	cmp	r0, r3
 8007016:	bfb8      	it	lt
 8007018:	4618      	movlt	r0, r3
 800701a:	e7a3      	b.n	8006f64 <_printf_i+0x130>
 800701c:	2301      	movs	r3, #1
 800701e:	464a      	mov	r2, r9
 8007020:	4639      	mov	r1, r7
 8007022:	4630      	mov	r0, r6
 8007024:	47c0      	blx	r8
 8007026:	3001      	adds	r0, #1
 8007028:	d09a      	beq.n	8006f60 <_printf_i+0x12c>
 800702a:	3501      	adds	r5, #1
 800702c:	68e3      	ldr	r3, [r4, #12]
 800702e:	9a03      	ldr	r2, [sp, #12]
 8007030:	1a9b      	subs	r3, r3, r2
 8007032:	42ab      	cmp	r3, r5
 8007034:	dcf2      	bgt.n	800701c <_printf_i+0x1e8>
 8007036:	e7eb      	b.n	8007010 <_printf_i+0x1dc>
 8007038:	2500      	movs	r5, #0
 800703a:	f104 0919 	add.w	r9, r4, #25
 800703e:	e7f5      	b.n	800702c <_printf_i+0x1f8>
 8007040:	2b00      	cmp	r3, #0
 8007042:	d1ac      	bne.n	8006f9e <_printf_i+0x16a>
 8007044:	7803      	ldrb	r3, [r0, #0]
 8007046:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800704a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800704e:	e76c      	b.n	8006f2a <_printf_i+0xf6>
 8007050:	08007329 	.word	0x08007329
 8007054:	0800733a 	.word	0x0800733a

08007058 <memcpy>:
 8007058:	b510      	push	{r4, lr}
 800705a:	1e43      	subs	r3, r0, #1
 800705c:	440a      	add	r2, r1
 800705e:	4291      	cmp	r1, r2
 8007060:	d100      	bne.n	8007064 <memcpy+0xc>
 8007062:	bd10      	pop	{r4, pc}
 8007064:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007068:	f803 4f01 	strb.w	r4, [r3, #1]!
 800706c:	e7f7      	b.n	800705e <memcpy+0x6>

0800706e <memmove>:
 800706e:	4288      	cmp	r0, r1
 8007070:	b510      	push	{r4, lr}
 8007072:	eb01 0302 	add.w	r3, r1, r2
 8007076:	d807      	bhi.n	8007088 <memmove+0x1a>
 8007078:	1e42      	subs	r2, r0, #1
 800707a:	4299      	cmp	r1, r3
 800707c:	d00a      	beq.n	8007094 <memmove+0x26>
 800707e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007082:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007086:	e7f8      	b.n	800707a <memmove+0xc>
 8007088:	4283      	cmp	r3, r0
 800708a:	d9f5      	bls.n	8007078 <memmove+0xa>
 800708c:	1881      	adds	r1, r0, r2
 800708e:	1ad2      	subs	r2, r2, r3
 8007090:	42d3      	cmn	r3, r2
 8007092:	d100      	bne.n	8007096 <memmove+0x28>
 8007094:	bd10      	pop	{r4, pc}
 8007096:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800709a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800709e:	e7f7      	b.n	8007090 <memmove+0x22>

080070a0 <_free_r>:
 80070a0:	b538      	push	{r3, r4, r5, lr}
 80070a2:	4605      	mov	r5, r0
 80070a4:	2900      	cmp	r1, #0
 80070a6:	d045      	beq.n	8007134 <_free_r+0x94>
 80070a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070ac:	1f0c      	subs	r4, r1, #4
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	bfb8      	it	lt
 80070b2:	18e4      	addlt	r4, r4, r3
 80070b4:	f000 f8d2 	bl	800725c <__malloc_lock>
 80070b8:	4a1f      	ldr	r2, [pc, #124]	; (8007138 <_free_r+0x98>)
 80070ba:	6813      	ldr	r3, [r2, #0]
 80070bc:	4610      	mov	r0, r2
 80070be:	b933      	cbnz	r3, 80070ce <_free_r+0x2e>
 80070c0:	6063      	str	r3, [r4, #4]
 80070c2:	6014      	str	r4, [r2, #0]
 80070c4:	4628      	mov	r0, r5
 80070c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070ca:	f000 b8c8 	b.w	800725e <__malloc_unlock>
 80070ce:	42a3      	cmp	r3, r4
 80070d0:	d90c      	bls.n	80070ec <_free_r+0x4c>
 80070d2:	6821      	ldr	r1, [r4, #0]
 80070d4:	1862      	adds	r2, r4, r1
 80070d6:	4293      	cmp	r3, r2
 80070d8:	bf04      	itt	eq
 80070da:	681a      	ldreq	r2, [r3, #0]
 80070dc:	685b      	ldreq	r3, [r3, #4]
 80070de:	6063      	str	r3, [r4, #4]
 80070e0:	bf04      	itt	eq
 80070e2:	1852      	addeq	r2, r2, r1
 80070e4:	6022      	streq	r2, [r4, #0]
 80070e6:	6004      	str	r4, [r0, #0]
 80070e8:	e7ec      	b.n	80070c4 <_free_r+0x24>
 80070ea:	4613      	mov	r3, r2
 80070ec:	685a      	ldr	r2, [r3, #4]
 80070ee:	b10a      	cbz	r2, 80070f4 <_free_r+0x54>
 80070f0:	42a2      	cmp	r2, r4
 80070f2:	d9fa      	bls.n	80070ea <_free_r+0x4a>
 80070f4:	6819      	ldr	r1, [r3, #0]
 80070f6:	1858      	adds	r0, r3, r1
 80070f8:	42a0      	cmp	r0, r4
 80070fa:	d10b      	bne.n	8007114 <_free_r+0x74>
 80070fc:	6820      	ldr	r0, [r4, #0]
 80070fe:	4401      	add	r1, r0
 8007100:	1858      	adds	r0, r3, r1
 8007102:	4282      	cmp	r2, r0
 8007104:	6019      	str	r1, [r3, #0]
 8007106:	d1dd      	bne.n	80070c4 <_free_r+0x24>
 8007108:	6810      	ldr	r0, [r2, #0]
 800710a:	6852      	ldr	r2, [r2, #4]
 800710c:	605a      	str	r2, [r3, #4]
 800710e:	4401      	add	r1, r0
 8007110:	6019      	str	r1, [r3, #0]
 8007112:	e7d7      	b.n	80070c4 <_free_r+0x24>
 8007114:	d902      	bls.n	800711c <_free_r+0x7c>
 8007116:	230c      	movs	r3, #12
 8007118:	602b      	str	r3, [r5, #0]
 800711a:	e7d3      	b.n	80070c4 <_free_r+0x24>
 800711c:	6820      	ldr	r0, [r4, #0]
 800711e:	1821      	adds	r1, r4, r0
 8007120:	428a      	cmp	r2, r1
 8007122:	bf04      	itt	eq
 8007124:	6811      	ldreq	r1, [r2, #0]
 8007126:	6852      	ldreq	r2, [r2, #4]
 8007128:	6062      	str	r2, [r4, #4]
 800712a:	bf04      	itt	eq
 800712c:	1809      	addeq	r1, r1, r0
 800712e:	6021      	streq	r1, [r4, #0]
 8007130:	605c      	str	r4, [r3, #4]
 8007132:	e7c7      	b.n	80070c4 <_free_r+0x24>
 8007134:	bd38      	pop	{r3, r4, r5, pc}
 8007136:	bf00      	nop
 8007138:	200000e4 	.word	0x200000e4

0800713c <_malloc_r>:
 800713c:	b570      	push	{r4, r5, r6, lr}
 800713e:	1ccd      	adds	r5, r1, #3
 8007140:	f025 0503 	bic.w	r5, r5, #3
 8007144:	3508      	adds	r5, #8
 8007146:	2d0c      	cmp	r5, #12
 8007148:	bf38      	it	cc
 800714a:	250c      	movcc	r5, #12
 800714c:	2d00      	cmp	r5, #0
 800714e:	4606      	mov	r6, r0
 8007150:	db01      	blt.n	8007156 <_malloc_r+0x1a>
 8007152:	42a9      	cmp	r1, r5
 8007154:	d903      	bls.n	800715e <_malloc_r+0x22>
 8007156:	230c      	movs	r3, #12
 8007158:	6033      	str	r3, [r6, #0]
 800715a:	2000      	movs	r0, #0
 800715c:	bd70      	pop	{r4, r5, r6, pc}
 800715e:	f000 f87d 	bl	800725c <__malloc_lock>
 8007162:	4a21      	ldr	r2, [pc, #132]	; (80071e8 <_malloc_r+0xac>)
 8007164:	6814      	ldr	r4, [r2, #0]
 8007166:	4621      	mov	r1, r4
 8007168:	b991      	cbnz	r1, 8007190 <_malloc_r+0x54>
 800716a:	4c20      	ldr	r4, [pc, #128]	; (80071ec <_malloc_r+0xb0>)
 800716c:	6823      	ldr	r3, [r4, #0]
 800716e:	b91b      	cbnz	r3, 8007178 <_malloc_r+0x3c>
 8007170:	4630      	mov	r0, r6
 8007172:	f000 f863 	bl	800723c <_sbrk_r>
 8007176:	6020      	str	r0, [r4, #0]
 8007178:	4629      	mov	r1, r5
 800717a:	4630      	mov	r0, r6
 800717c:	f000 f85e 	bl	800723c <_sbrk_r>
 8007180:	1c43      	adds	r3, r0, #1
 8007182:	d124      	bne.n	80071ce <_malloc_r+0x92>
 8007184:	230c      	movs	r3, #12
 8007186:	6033      	str	r3, [r6, #0]
 8007188:	4630      	mov	r0, r6
 800718a:	f000 f868 	bl	800725e <__malloc_unlock>
 800718e:	e7e4      	b.n	800715a <_malloc_r+0x1e>
 8007190:	680b      	ldr	r3, [r1, #0]
 8007192:	1b5b      	subs	r3, r3, r5
 8007194:	d418      	bmi.n	80071c8 <_malloc_r+0x8c>
 8007196:	2b0b      	cmp	r3, #11
 8007198:	d90f      	bls.n	80071ba <_malloc_r+0x7e>
 800719a:	600b      	str	r3, [r1, #0]
 800719c:	50cd      	str	r5, [r1, r3]
 800719e:	18cc      	adds	r4, r1, r3
 80071a0:	4630      	mov	r0, r6
 80071a2:	f000 f85c 	bl	800725e <__malloc_unlock>
 80071a6:	f104 000b 	add.w	r0, r4, #11
 80071aa:	1d23      	adds	r3, r4, #4
 80071ac:	f020 0007 	bic.w	r0, r0, #7
 80071b0:	1ac3      	subs	r3, r0, r3
 80071b2:	d0d3      	beq.n	800715c <_malloc_r+0x20>
 80071b4:	425a      	negs	r2, r3
 80071b6:	50e2      	str	r2, [r4, r3]
 80071b8:	e7d0      	b.n	800715c <_malloc_r+0x20>
 80071ba:	428c      	cmp	r4, r1
 80071bc:	684b      	ldr	r3, [r1, #4]
 80071be:	bf16      	itet	ne
 80071c0:	6063      	strne	r3, [r4, #4]
 80071c2:	6013      	streq	r3, [r2, #0]
 80071c4:	460c      	movne	r4, r1
 80071c6:	e7eb      	b.n	80071a0 <_malloc_r+0x64>
 80071c8:	460c      	mov	r4, r1
 80071ca:	6849      	ldr	r1, [r1, #4]
 80071cc:	e7cc      	b.n	8007168 <_malloc_r+0x2c>
 80071ce:	1cc4      	adds	r4, r0, #3
 80071d0:	f024 0403 	bic.w	r4, r4, #3
 80071d4:	42a0      	cmp	r0, r4
 80071d6:	d005      	beq.n	80071e4 <_malloc_r+0xa8>
 80071d8:	1a21      	subs	r1, r4, r0
 80071da:	4630      	mov	r0, r6
 80071dc:	f000 f82e 	bl	800723c <_sbrk_r>
 80071e0:	3001      	adds	r0, #1
 80071e2:	d0cf      	beq.n	8007184 <_malloc_r+0x48>
 80071e4:	6025      	str	r5, [r4, #0]
 80071e6:	e7db      	b.n	80071a0 <_malloc_r+0x64>
 80071e8:	200000e4 	.word	0x200000e4
 80071ec:	200000e8 	.word	0x200000e8

080071f0 <_realloc_r>:
 80071f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071f2:	4607      	mov	r7, r0
 80071f4:	4614      	mov	r4, r2
 80071f6:	460e      	mov	r6, r1
 80071f8:	b921      	cbnz	r1, 8007204 <_realloc_r+0x14>
 80071fa:	4611      	mov	r1, r2
 80071fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007200:	f7ff bf9c 	b.w	800713c <_malloc_r>
 8007204:	b922      	cbnz	r2, 8007210 <_realloc_r+0x20>
 8007206:	f7ff ff4b 	bl	80070a0 <_free_r>
 800720a:	4625      	mov	r5, r4
 800720c:	4628      	mov	r0, r5
 800720e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007210:	f000 f826 	bl	8007260 <_malloc_usable_size_r>
 8007214:	42a0      	cmp	r0, r4
 8007216:	d20f      	bcs.n	8007238 <_realloc_r+0x48>
 8007218:	4621      	mov	r1, r4
 800721a:	4638      	mov	r0, r7
 800721c:	f7ff ff8e 	bl	800713c <_malloc_r>
 8007220:	4605      	mov	r5, r0
 8007222:	2800      	cmp	r0, #0
 8007224:	d0f2      	beq.n	800720c <_realloc_r+0x1c>
 8007226:	4631      	mov	r1, r6
 8007228:	4622      	mov	r2, r4
 800722a:	f7ff ff15 	bl	8007058 <memcpy>
 800722e:	4631      	mov	r1, r6
 8007230:	4638      	mov	r0, r7
 8007232:	f7ff ff35 	bl	80070a0 <_free_r>
 8007236:	e7e9      	b.n	800720c <_realloc_r+0x1c>
 8007238:	4635      	mov	r5, r6
 800723a:	e7e7      	b.n	800720c <_realloc_r+0x1c>

0800723c <_sbrk_r>:
 800723c:	b538      	push	{r3, r4, r5, lr}
 800723e:	4c06      	ldr	r4, [pc, #24]	; (8007258 <_sbrk_r+0x1c>)
 8007240:	2300      	movs	r3, #0
 8007242:	4605      	mov	r5, r0
 8007244:	4608      	mov	r0, r1
 8007246:	6023      	str	r3, [r4, #0]
 8007248:	f7fa fc90 	bl	8001b6c <_sbrk>
 800724c:	1c43      	adds	r3, r0, #1
 800724e:	d102      	bne.n	8007256 <_sbrk_r+0x1a>
 8007250:	6823      	ldr	r3, [r4, #0]
 8007252:	b103      	cbz	r3, 8007256 <_sbrk_r+0x1a>
 8007254:	602b      	str	r3, [r5, #0]
 8007256:	bd38      	pop	{r3, r4, r5, pc}
 8007258:	20000570 	.word	0x20000570

0800725c <__malloc_lock>:
 800725c:	4770      	bx	lr

0800725e <__malloc_unlock>:
 800725e:	4770      	bx	lr

08007260 <_malloc_usable_size_r>:
 8007260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007264:	1f18      	subs	r0, r3, #4
 8007266:	2b00      	cmp	r3, #0
 8007268:	bfbc      	itt	lt
 800726a:	580b      	ldrlt	r3, [r1, r0]
 800726c:	18c0      	addlt	r0, r0, r3
 800726e:	4770      	bx	lr

08007270 <_init>:
 8007270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007272:	bf00      	nop
 8007274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007276:	bc08      	pop	{r3}
 8007278:	469e      	mov	lr, r3
 800727a:	4770      	bx	lr

0800727c <_fini>:
 800727c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800727e:	bf00      	nop
 8007280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007282:	bc08      	pop	{r3}
 8007284:	469e      	mov	lr, r3
 8007286:	4770      	bx	lr
